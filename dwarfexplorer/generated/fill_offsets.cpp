#include <cstdint>
#include <DataDefs.h>
#include <Core.h>
#include <Console.h>
#include <Export.h>
#include <PluginManager.h>
#include <RemoteServer.h>
#include <RemoteClient.h>
#include <VersionInfo.h>
#include "df_all.h"
#include "DF_Types.h"
#include <unordered_map>

namespace rdf
{
void generate_text_info_elementst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::text_info_elementst*>(p_df_structure);

}

void generate_text_info_element_longst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::text_info_element_longst*>(p_df_structure);

	p_table["val"] = reinterpret_cast<uint64_t>(&(df_structure->val)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_text_info_element_stringst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::text_info_element_stringst*>(p_df_structure);

	p_table["val"] = reinterpret_cast<uint64_t>(&(df_structure->val)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_optionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_optionst*>(p_df_structure);

}

void generate_adventure_item_interact_choicest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_item_interact_choicest*>(p_df_structure);

}

void generate_adventure_item_interact_pull_outst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_item_interact_pull_outst*>(p_df_structure);

}

void generate_adventure_item_interact_readst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_item_interact_readst*>(p_df_structure);

}

void generate_adventure_item_interact_strugglest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_item_interact_strugglest*>(p_df_structure);

}

void generate_popup_message_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::popup_message*>(p_df_structure);

	p_table["text"] = reinterpret_cast<uint64_t>(&(df_structure->text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bright"] = reinterpret_cast<uint64_t>(&(df_structure->bright)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_element_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_element*>(p_df_structure);

	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_element_creaturest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_element_creaturest*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_element_plantst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_element_plantst*>(p_df_structure);

	p_table["plant_id"] = reinterpret_cast<uint64_t>(&(df_structure->plant_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_element_treest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_element_treest*>(p_df_structure);

	p_table["plant_id"] = reinterpret_cast<uint64_t>(&(df_structure->plant_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_element_shapest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_element_shapest*>(p_df_structure);

	p_table["shape_id"] = reinterpret_cast<uint64_t>(&(df_structure->shape_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_property_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_property*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_ref_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_ref*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subid"] = reinterpret_cast<uint64_t>(&(df_structure->subid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_poetic_form_perspective_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::poetic_form_perspective*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_musical_form_sub4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::musical_form_sub4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_musical_form_interval_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::musical_form_interval*>(p_df_structure);

	p_table["degree"] = reinterpret_cast<uint64_t>(&(df_structure->degree)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_dance_form_sub1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::dance_form_sub1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_dance_form_sub2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::dance_form_sub2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_scale_sub1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::scale_sub1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_scale_sub2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::scale_sub2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_rhythm_sub2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::rhythm_sub2*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_occupation_sub1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::occupation_sub1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_extents_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_extents*>(p_df_structure);

	p_table["extents"] = reinterpret_cast<uint64_t>(&(df_structure->extents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["width"] = reinterpret_cast<uint64_t>(&(df_structure->width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["height"] = reinterpret_cast<uint64_t>(&(df_structure->height)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_drawbuffer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_drawbuffer*>(p_df_structure);

	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fore"] = reinterpret_cast<uint64_t>(&(df_structure->fore)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["back"] = reinterpret_cast<uint64_t>(&(df_structure->back)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bright"] = reinterpret_cast<uint64_t>(&(df_structure->bright)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_hospital_supplies_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::hospital_supplies*>(p_df_structure);

	p_table["supplies_needed"] = reinterpret_cast<uint64_t>(&(df_structure->supplies_needed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_splints"] = reinterpret_cast<uint64_t>(&(df_structure->max_splints)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_thread"] = reinterpret_cast<uint64_t>(&(df_structure->max_thread)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_cloth"] = reinterpret_cast<uint64_t>(&(df_structure->max_cloth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_crutches"] = reinterpret_cast<uint64_t>(&(df_structure->max_crutches)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_plaster"] = reinterpret_cast<uint64_t>(&(df_structure->max_plaster)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_buckets"] = reinterpret_cast<uint64_t>(&(df_structure->max_buckets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_soap"] = reinterpret_cast<uint64_t>(&(df_structure->max_soap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_splints"] = reinterpret_cast<uint64_t>(&(df_structure->cur_splints)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_thread"] = reinterpret_cast<uint64_t>(&(df_structure->cur_thread)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_cloth"] = reinterpret_cast<uint64_t>(&(df_structure->cur_cloth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_crutches"] = reinterpret_cast<uint64_t>(&(df_structure->cur_crutches)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_plaster"] = reinterpret_cast<uint64_t>(&(df_structure->cur_plaster)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_buckets"] = reinterpret_cast<uint64_t>(&(df_structure->cur_buckets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_soap"] = reinterpret_cast<uint64_t>(&(df_structure->cur_soap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supply_recheck_timer"] = reinterpret_cast<uint64_t>(&(df_structure->supply_recheck_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_users_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_users*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_pressure_plate_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::pressure_plate_info*>(p_df_structure);

	p_table["unit_min"] = reinterpret_cast<uint64_t>(&(df_structure->unit_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_max"] = reinterpret_cast<uint64_t>(&(df_structure->unit_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["water_min"] = reinterpret_cast<uint64_t>(&(df_structure->water_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["water_max"] = reinterpret_cast<uint64_t>(&(df_structure->water_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["magma_min"] = reinterpret_cast<uint64_t>(&(df_structure->magma_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["magma_max"] = reinterpret_cast<uint64_t>(&(df_structure->magma_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["track_min"] = reinterpret_cast<uint64_t>(&(df_structure->track_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["track_max"] = reinterpret_cast<uint64_t>(&(df_structure->track_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_body_part_layer_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::body_part_layer_raw*>(p_df_structure);

	p_table["layer_name"] = reinterpret_cast<uint64_t>(&(df_structure->layer_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_id"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["part_fraction"] = reinterpret_cast<uint64_t>(&(df_structure->part_fraction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["healing_rate"] = reinterpret_cast<uint64_t>(&(df_structure->healing_rate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vascular"] = reinterpret_cast<uint64_t>(&(df_structure->vascular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pain_receptors"] = reinterpret_cast<uint64_t>(&(df_structure->pain_receptors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7"] = reinterpret_cast<uint64_t>(&(df_structure->unk7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->bp_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_id"] = reinterpret_cast<uint64_t>(&(df_structure->layer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_idx"] = reinterpret_cast<uint64_t>(&(df_structure->parent_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_layer_id"] = reinterpret_cast<uint64_t>(&(df_structure->parent_layer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_depth"] = reinterpret_cast<uint64_t>(&(df_structure->layer_depth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leak_barrier_id"] = reinterpret_cast<uint64_t>(&(df_structure->leak_barrier_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nonsolid_id"] = reinterpret_cast<uint64_t>(&(df_structure->nonsolid_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["styleable_id"] = reinterpret_cast<uint64_t>(&(df_structure->styleable_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_color_modifier_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::color_modifier_raw*>(p_df_structure);

	p_table["pattern_index"] = reinterpret_cast<uint64_t>(&(df_structure->pattern_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pattern_frequency"] = reinterpret_cast<uint64_t>(&(df_structure->pattern_frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_layer_id"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_layer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_date"] = reinterpret_cast<uint64_t>(&(df_structure->start_date)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_date"] = reinterpret_cast<uint64_t>(&(df_structure->end_date)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["part"] = reinterpret_cast<uint64_t>(&(df_structure->part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_70"] = reinterpret_cast<uint64_t>(&(df_structure->unk_70)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_78"] = reinterpret_cast<uint64_t>(&(df_structure->unk_78)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_88"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_gait_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::gait_info*>(p_df_structure);

	p_table["action_string_idx"] = reinterpret_cast<uint64_t>(&(df_structure->action_string_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["full_speed"] = reinterpret_cast<uint64_t>(&(df_structure->full_speed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildup_time"] = reinterpret_cast<uint64_t>(&(df_structure->buildup_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["turn_max"] = reinterpret_cast<uint64_t>(&(df_structure->turn_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_speed"] = reinterpret_cast<uint64_t>(&(df_structure->start_speed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["energy_use"] = reinterpret_cast<uint64_t>(&(df_structure->energy_use)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stealth_slows"] = reinterpret_cast<uint64_t>(&(df_structure->stealth_slows)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_graphics_appointment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_graphics_appointment*>(p_df_structure);

	p_table["token"] = reinterpret_cast<uint64_t>(&(df_structure->token)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["texpos"] = reinterpret_cast<uint64_t>(&(df_structure->texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["texpos_gs"] = reinterpret_cast<uint64_t>(&(df_structure->texpos_gs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_color"] = reinterpret_cast<uint64_t>(&(df_structure->add_color)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_variation_convert_tag_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_variation_convert_tag*>(p_df_structure);

	p_table["cvct_master"] = reinterpret_cast<uint64_t>(&(df_structure->cvct_master)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cvct_target"] = reinterpret_cast<uint64_t>(&(df_structure->cvct_target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cvct_replacement"] = reinterpret_cast<uint64_t>(&(df_structure->cvct_replacement)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_body_detail_plan_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::body_detail_plan*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_material_name"] = reinterpret_cast<uint64_t>(&(df_structure->add_material_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_material_template"] = reinterpret_cast<uint64_t>(&(df_structure->add_material_template)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_tissue_name"] = reinterpret_cast<uint64_t>(&(df_structure->add_tissue_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_tissue_template"] = reinterpret_cast<uint64_t>(&(df_structure->add_tissue_template)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5c"] = reinterpret_cast<uint64_t>(&(df_structure->unk5c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6c"] = reinterpret_cast<uint64_t>(&(df_structure->unk6c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7c"] = reinterpret_cast<uint64_t>(&(df_structure->unk7c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_layers_selection"] = reinterpret_cast<uint64_t>(&(df_structure->bp_layers_selection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_layers_criteria"] = reinterpret_cast<uint64_t>(&(df_structure->bp_layers_criteria)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_layers_tissue"] = reinterpret_cast<uint64_t>(&(df_structure->bp_layers_tissue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_layers_thickness"] = reinterpret_cast<uint64_t>(&(df_structure->bp_layers_thickness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_layers_position"] = reinterpret_cast<uint64_t>(&(df_structure->bp_layers_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_layers_over_under"] = reinterpret_cast<uint64_t>(&(df_structure->bp_layers_over_under)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relsize_selection"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relsize_selection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relsize_criteria"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relsize_criteria)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relsize_value"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relsize_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_position_selection"] = reinterpret_cast<uint64_t>(&(df_structure->bp_position_selection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_position_criteria"] = reinterpret_cast<uint64_t>(&(df_structure->bp_position_criteria)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_position_value"] = reinterpret_cast<uint64_t>(&(df_structure->bp_position_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_selection_1"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_selection_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_criteria_1"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_criteria_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_value_1"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_value_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_selection_2"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_selection_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_criteria_2"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_criteria_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_extent"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_extent)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_descriptor_color_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::descriptor_color*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["word_unk"] = reinterpret_cast<uint64_t>(&(df_structure->word_unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["words"] = reinterpret_cast<uint64_t>(&(df_structure->words)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bold"] = reinterpret_cast<uint64_t>(&(df_structure->bold)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["red"] = reinterpret_cast<uint64_t>(&(df_structure->red)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["green"] = reinterpret_cast<uint64_t>(&(df_structure->green)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blue"] = reinterpret_cast<uint64_t>(&(df_structure->blue)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_descriptor_shape_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::descriptor_shape*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["words_str"] = reinterpret_cast<uint64_t>(&(df_structure->words_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["words"] = reinterpret_cast<uint64_t>(&(df_structure->words)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adj"] = reinterpret_cast<uint64_t>(&(df_structure->adj)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gems_use"] = reinterpret_cast<uint64_t>(&(df_structure->gems_use)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category"] = reinterpret_cast<uint64_t>(&(df_structure->category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["faces"] = reinterpret_cast<uint64_t>(&(df_structure->faces)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_activity_statistics__T_food_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_activity_statistics::T_food*>(p_df_structure);

	p_table["total"] = reinterpret_cast<uint64_t>(&(df_structure->total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meat"] = reinterpret_cast<uint64_t>(&(df_structure->meat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fish"] = reinterpret_cast<uint64_t>(&(df_structure->fish)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other"] = reinterpret_cast<uint64_t>(&(df_structure->other)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seeds"] = reinterpret_cast<uint64_t>(&(df_structure->seeds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plant"] = reinterpret_cast<uint64_t>(&(df_structure->plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drink"] = reinterpret_cast<uint64_t>(&(df_structure->drink)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_activity_statistics__T_wealth_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_activity_statistics::T_wealth*>(p_df_structure);

	p_table["total"] = reinterpret_cast<uint64_t>(&(df_structure->total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapons"] = reinterpret_cast<uint64_t>(&(df_structure->weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor"] = reinterpret_cast<uint64_t>(&(df_structure->armor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["furniture"] = reinterpret_cast<uint64_t>(&(df_structure->furniture)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other"] = reinterpret_cast<uint64_t>(&(df_structure->other)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["architecture"] = reinterpret_cast<uint64_t>(&(df_structure->architecture)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["displayed"] = reinterpret_cast<uint64_t>(&(df_structure->displayed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["held"] = reinterpret_cast<uint64_t>(&(df_structure->held)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["imported"] = reinterpret_cast<uint64_t>(&(df_structure->imported)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["exported"] = reinterpret_cast<uint64_t>(&(df_structure->exported)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_activity_statistics_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_activity_statistics*>(p_df_structure);

	p_table["food"] = reinterpret_cast<uint64_t>(&(df_structure->food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_counts"] = reinterpret_cast<uint64_t>(&(df_structure->unit_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population"] = reinterpret_cast<uint64_t>(&(df_structure->population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trained_animals"] = reinterpret_cast<uint64_t>(&(df_structure->trained_animals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_animals"] = reinterpret_cast<uint64_t>(&(df_structure->other_animals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_counts"] = reinterpret_cast<uint64_t>(&(df_structure->item_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["created_weapons"] = reinterpret_cast<uint64_t>(&(df_structure->created_weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wealth"] = reinterpret_cast<uint64_t>(&(df_structure->wealth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recent_jobs"] = reinterpret_cast<uint64_t>(&(df_structure->recent_jobs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["excavated_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->excavated_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_history"] = reinterpret_cast<uint64_t>(&(df_structure->death_history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["insanity_history"] = reinterpret_cast<uint64_t>(&(df_structure->insanity_history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["execution_history"] = reinterpret_cast<uint64_t>(&(df_structure->execution_history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noble_death_history"] = reinterpret_cast<uint64_t>(&(df_structure->noble_death_history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_deaths"] = reinterpret_cast<uint64_t>(&(df_structure->total_deaths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_insanities"] = reinterpret_cast<uint64_t>(&(df_structure->total_insanities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_executions"] = reinterpret_cast<uint64_t>(&(df_structure->total_executions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->num_artifacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_creature_foods"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_creature_foods)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_creatures"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_creatures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_plant_foods"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_plant_foods)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_plants"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_water_features"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_water_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_subterranean_features"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_subterranean_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_chasm_features"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_chasm_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_magma_features"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_magma_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_feature_layers"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_feature_layers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["migrant_wave_idx"] = reinterpret_cast<uint64_t>(&(df_structure->migrant_wave_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["found_minerals"] = reinterpret_cast<uint64_t>(&(df_structure->found_minerals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["found_misc"] = reinterpret_cast<uint64_t>(&(df_structure->found_misc)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_sell_requests_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_sell_requests*>(p_df_structure);

	p_table["priority"] = reinterpret_cast<uint64_t>(&(df_structure->priority)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_unk_v47_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_unk_v47_1*>(p_df_structure);

	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement"] = reinterpret_cast<uint64_t>(&(df_structure->agreement)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_tissue_style_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_tissue_style*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["preferred_shapings"] = reinterpret_cast<uint64_t>(&(df_structure->preferred_shapings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maintain_length_min"] = reinterpret_cast<uint64_t>(&(df_structure->maintain_length_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maintain_length_max"] = reinterpret_cast<uint64_t>(&(df_structure->maintain_length_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_position_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_position*>(p_df_structure);

	p_table["code"] = reinterpret_cast<uint64_t>(&(df_structure->code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allowed_creature"] = reinterpret_cast<uint64_t>(&(df_structure->allowed_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allowed_class"] = reinterpret_cast<uint64_t>(&(df_structure->allowed_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rejected_creature"] = reinterpret_cast<uint64_t>(&(df_structure->rejected_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rejected_class"] = reinterpret_cast<uint64_t>(&(df_structure->rejected_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_female"] = reinterpret_cast<uint64_t>(&(df_structure->name_female)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_male"] = reinterpret_cast<uint64_t>(&(df_structure->name_male)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spouse"] = reinterpret_cast<uint64_t>(&(df_structure->spouse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spouse_female"] = reinterpret_cast<uint64_t>(&(df_structure->spouse_female)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spouse_male"] = reinterpret_cast<uint64_t>(&(df_structure->spouse_male)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad"] = reinterpret_cast<uint64_t>(&(df_structure->squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["land_name"] = reinterpret_cast<uint64_t>(&(df_structure->land_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_size"] = reinterpret_cast<uint64_t>(&(df_structure->squad_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["commander_id"] = reinterpret_cast<uint64_t>(&(df_structure->commander_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["commander_civ"] = reinterpret_cast<uint64_t>(&(df_structure->commander_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["commander_types"] = reinterpret_cast<uint64_t>(&(df_structure->commander_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["land_holder"] = reinterpret_cast<uint64_t>(&(df_structure->land_holder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["requires_population"] = reinterpret_cast<uint64_t>(&(df_structure->requires_population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["precedence"] = reinterpret_cast<uint64_t>(&(df_structure->precedence)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["replaced_by"] = reinterpret_cast<uint64_t>(&(df_structure->replaced_by)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number"] = reinterpret_cast<uint64_t>(&(df_structure->number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appointed_by"] = reinterpret_cast<uint64_t>(&(df_structure->appointed_by)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appointed_by_civ"] = reinterpret_cast<uint64_t>(&(df_structure->appointed_by_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["succession_by_position"] = reinterpret_cast<uint64_t>(&(df_structure->succession_by_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["responsibilities"] = reinterpret_cast<uint64_t>(&(df_structure->responsibilities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_boxes"] = reinterpret_cast<uint64_t>(&(df_structure->required_boxes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_cabinets"] = reinterpret_cast<uint64_t>(&(df_structure->required_cabinets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_racks"] = reinterpret_cast<uint64_t>(&(df_structure->required_racks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_stands"] = reinterpret_cast<uint64_t>(&(df_structure->required_stands)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_office"] = reinterpret_cast<uint64_t>(&(df_structure->required_office)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_bedroom"] = reinterpret_cast<uint64_t>(&(df_structure->required_bedroom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_dining"] = reinterpret_cast<uint64_t>(&(df_structure->required_dining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_tomb"] = reinterpret_cast<uint64_t>(&(df_structure->required_tomb)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mandate_max"] = reinterpret_cast<uint64_t>(&(df_structure->mandate_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["demand_max"] = reinterpret_cast<uint64_t>(&(df_structure->demand_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_position_assignment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_position_assignment*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_id"] = reinterpret_cast<uint64_t>(&(df_structure->position_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_id"] = reinterpret_cast<uint64_t>(&(df_structure->squad_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_citizenship_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_citizenship*>(p_df_structure);

	p_table["applicant"] = reinterpret_cast<uint64_t>(&(df_structure->applicant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["government"] = reinterpret_cast<uint64_t>(&(df_structure->government)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_parley_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_parley*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["party_id"] = reinterpret_cast<uint64_t>(&(df_structure->party_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_position_corruption_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_position_corruption*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["actor_index"] = reinterpret_cast<uint64_t>(&(df_structure->actor_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["influencer_index"] = reinterpret_cast<uint64_t>(&(df_structure->influencer_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intermediary_index"] = reinterpret_cast<uint64_t>(&(df_structure->intermediary_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_id"] = reinterpret_cast<uint64_t>(&(df_structure->target_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_id"] = reinterpret_cast<uint64_t>(&(df_structure->position_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_plot_steal_artifact_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_plot_steal_artifact*>(p_df_structure);

	p_table["actor_index"] = reinterpret_cast<uint64_t>(&(df_structure->actor_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["influencer_index"] = reinterpret_cast<uint64_t>(&(df_structure->influencer_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intermediary_index"] = reinterpret_cast<uint64_t>(&(df_structure->intermediary_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_promise_position_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_promise_position*>(p_df_structure);

	p_table["beneficiary_index"] = reinterpret_cast<uint64_t>(&(df_structure->beneficiary_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["actor_index"] = reinterpret_cast<uint64_t>(&(df_structure->actor_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["promisee_index"] = reinterpret_cast<uint64_t>(&(df_structure->promisee_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["influencer_index"] = reinterpret_cast<uint64_t>(&(df_structure->influencer_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intermediary_indices"] = reinterpret_cast<uint64_t>(&(df_structure->intermediary_indices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_plot_assassination_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_plot_assassination*>(p_df_structure);

	p_table["actor_index"] = reinterpret_cast<uint64_t>(&(df_structure->actor_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["influencer_index"] = reinterpret_cast<uint64_t>(&(df_structure->influencer_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intermediary_index"] = reinterpret_cast<uint64_t>(&(df_structure->intermediary_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_id"] = reinterpret_cast<uint64_t>(&(df_structure->target_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_plot_abduct_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_plot_abduct*>(p_df_structure);

	p_table["actor_index"] = reinterpret_cast<uint64_t>(&(df_structure->actor_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["influencer_index"] = reinterpret_cast<uint64_t>(&(df_structure->influencer_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intermediary_index"] = reinterpret_cast<uint64_t>(&(df_structure->intermediary_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_id"] = reinterpret_cast<uint64_t>(&(df_structure->target_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_unk10_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_unk10*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_plot_infiltration_coup_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_plot_infiltration_coup*>(p_df_structure);

	p_table["actor_index"] = reinterpret_cast<uint64_t>(&(df_structure->actor_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["influencer_index"] = reinterpret_cast<uint64_t>(&(df_structure->influencer_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["action"] = reinterpret_cast<uint64_t>(&(df_structure->action)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_plot_frame_treason_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_plot_frame_treason*>(p_df_structure);

	p_table["actor_index"] = reinterpret_cast<uint64_t>(&(df_structure->actor_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["influencer_index"] = reinterpret_cast<uint64_t>(&(df_structure->influencer_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_id"] = reinterpret_cast<uint64_t>(&(df_structure->victim_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fool_id"] = reinterpret_cast<uint64_t>(&(df_structure->fool_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_plot_induce_war_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_plot_induce_war*>(p_df_structure);

	p_table["actor_index"] = reinterpret_cast<uint64_t>(&(df_structure->actor_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["influencer_index"] = reinterpret_cast<uint64_t>(&(df_structure->influencer_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker"] = reinterpret_cast<uint64_t>(&(df_structure->attacker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender"] = reinterpret_cast<uint64_t>(&(df_structure->defender)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_animal_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_animal_raw*>(p_df_structure);

	p_table["token"] = reinterpret_cast<uint64_t>(&(df_structure->token)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_token"] = reinterpret_cast<uint64_t>(&(df_structure->caste_token)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animal_class"] = reinterpret_cast<uint64_t>(&(df_structure->animal_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden_class"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_large_integer__T_u_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::large_integer::T_u*>(p_df_structure);

	p_table["low_part"] = reinterpret_cast<uint64_t>(&(df_structure->low_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["high_part"] = reinterpret_cast<uint64_t>(&(df_structure->high_part)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_large_integer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::large_integer*>(p_df_structure);

	p_table["low_part"] = reinterpret_cast<uint64_t>(&(df_structure->low_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["high_part"] = reinterpret_cast<uint64_t>(&(df_structure->high_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["u"] = reinterpret_cast<uint64_t>(&(df_structure->u)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quad_part"] = reinterpret_cast<uint64_t>(&(df_structure->quad_part)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_renderer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::renderer*>(p_df_structure);

	p_table["screen"] = reinterpret_cast<uint64_t>(&(df_structure->screen)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_addcolor"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_addcolor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_grayscale"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_grayscale)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_cf"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_cf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_cbr"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_cbr)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screen_old"] = reinterpret_cast<uint64_t>(&(df_structure->screen_old)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_old"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_old)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_addcolor_old"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_addcolor_old)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_grayscale_old"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_grayscale_old)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_cf_old"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_cf_old)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_cbr_old"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_cbr_old)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_identity_unk_94_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::identity_unk_94*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_propertyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_propertyst*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_datest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_datest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_actionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_actionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_toolst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_toolst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_emotionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_emotionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_color_patternst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_color_patternst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_shapest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_shapest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_adjectivest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_adjectivest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_positionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_positionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_property_timest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_property_timest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_elementst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_elementst*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_element_hfst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_element_hfst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_element_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_element_sitest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_element_regionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture_element_regionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event*>(p_df_structure);

	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seconds"] = reinterpret_cast<uint64_t>(&(df_structure->seconds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_attacked_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_attacked_sitest*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_general_hf"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_general_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_general_hf"] = reinterpret_cast<uint64_t>(&(df_structure->defender_general_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_merc_enid"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_merc_enid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_merc_enid"] = reinterpret_cast<uint64_t>(&(df_structure->defender_merc_enid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_support_merc_enid_toggle"] = reinterpret_cast<uint64_t>(&(df_structure->a_support_merc_enid_toggle)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_destroyed_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_destroyed_sitest*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_created_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_created_sitest*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["resident_civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->resident_civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["builder_hf"] = reinterpret_cast<uint64_t>(&(df_structure->builder_hf)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_expels_hfst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_expels_hfst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["expelled"] = reinterpret_cast<uint64_t>(&(df_structure->expelled)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_first_contactst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_first_contactst*>(p_df_structure);

	p_table["contactor"] = reinterpret_cast<uint64_t>(&(df_structure->contactor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contacted"] = reinterpret_cast<uint64_t>(&(df_structure->contacted)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_first_contact_failedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_first_contact_failedst*>(p_df_structure);

	p_table["contactor"] = reinterpret_cast<uint64_t>(&(df_structure->contactor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rejector"] = reinterpret_cast<uint64_t>(&(df_structure->rejector)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_diplomat_lostst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_diplomat_lostst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["involved"] = reinterpret_cast<uint64_t>(&(df_structure->involved)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_agreements_voidedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_agreements_voidedst*>(p_df_structure);

	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destination"] = reinterpret_cast<uint64_t>(&(df_structure->destination)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_merchantst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_merchantst*>(p_df_structure);

	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destination"] = reinterpret_cast<uint64_t>(&(df_structure->destination)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_hiddenst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_hiddenst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_lostst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_lostst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_property_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_property_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion_id"] = reinterpret_cast<uint64_t>(&(df_structure->subregion_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_foundst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_foundst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_property_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_property_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_recoveredst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_recoveredst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_droppedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_droppedst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_reclaim_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_reclaim_sitest*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_destroyed_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_destroyed_sitest*>(p_df_structure);

	p_table["attacker_hf"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_site_diedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_site_diedst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_site_retiredst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_site_retiredst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_createdst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_createdst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creator_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->creator_hfid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_incorporatedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_incorporatedst*>(p_df_structure);

	p_table["migrant_entity"] = reinterpret_cast<uint64_t>(&(df_structure->migrant_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["join_entity"] = reinterpret_cast<uint64_t>(&(df_structure->join_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leader_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->leader_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_created_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_created_buildingst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["builder_hf"] = reinterpret_cast<uint64_t>(&(df_structure->builder_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rebuild"] = reinterpret_cast<uint64_t>(&(df_structure->rebuild)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_replaced_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_replaced_buildingst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_structure"] = reinterpret_cast<uint64_t>(&(df_structure->old_structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_structure"] = reinterpret_cast<uint64_t>(&(df_structure->new_structure)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_razed_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_razed_buildingst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_createdst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_createdst*>(p_df_structure);

	p_table["maker"] = reinterpret_cast<uint64_t>(&(df_structure->maker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maker_entity"] = reinterpret_cast<uint64_t>(&(df_structure->maker_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_created_arch_designst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_created_arch_designst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_type"] = reinterpret_cast<uint64_t>(&(df_structure->building_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->building_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_custom"] = reinterpret_cast<uint64_t>(&(df_structure->building_custom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_created_arch_constructst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_created_arch_constructst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_type"] = reinterpret_cast<uint64_t>(&(df_structure->building_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->building_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_custom"] = reinterpret_cast<uint64_t>(&(df_structure->building_custom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_created_foodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_created_foodst*>(p_df_structure);

	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_plundered_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_plundered_sitest*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_site_new_leaderst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_site_new_leaderst*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->new_site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_leaders"] = reinterpret_cast<uint64_t>(&(df_structure->new_leaders)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_site_tribute_forcedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_site_tribute_forcedst*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["season"] = reinterpret_cast<uint64_t>(&(df_structure->season)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tribute_flags"] = reinterpret_cast<uint64_t>(&(df_structure->tribute_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_site_taken_overst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_site_taken_overst*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->new_site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_site_surrenderedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_site_surrenderedst*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_abductedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_abductedst*>(p_df_structure);

	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["snatcher"] = reinterpret_cast<uint64_t>(&(df_structure->snatcher)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_razed_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_razed_buildingst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_creature_devouredst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_creature_devouredst*>(p_df_structure);

	p_table["victim"] = reinterpret_cast<uint64_t>(&(df_structure->victim)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["eater"] = reinterpret_cast<uint64_t>(&(df_structure->eater)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_woundedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_woundedst*>(p_df_structure);

	p_table["woundee"] = reinterpret_cast<uint64_t>(&(df_structure->woundee)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wounder"] = reinterpret_cast<uint64_t>(&(df_structure->wounder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["woundee_race"] = reinterpret_cast<uint64_t>(&(df_structure->woundee_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["woundee_caste"] = reinterpret_cast<uint64_t>(&(df_structure->woundee_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part"] = reinterpret_cast<uint64_t>(&(df_structure->body_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["injury_type"] = reinterpret_cast<uint64_t>(&(df_structure->injury_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["part_lost"] = reinterpret_cast<uint64_t>(&(df_structure->part_lost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_created_world_constructionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_created_world_constructionst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["construction"] = reinterpret_cast<uint64_t>(&(df_structure->construction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["master_construction"] = reinterpret_cast<uint64_t>(&(df_structure->master_construction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site1"] = reinterpret_cast<uint64_t>(&(df_structure->site1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site2"] = reinterpret_cast<uint64_t>(&(df_structure->site2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_reunionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_reunionst*>(p_df_structure);

	p_table["missing"] = reinterpret_cast<uint64_t>(&(df_structure->missing)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reunited_with"] = reinterpret_cast<uint64_t>(&(df_structure->reunited_with)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assistant"] = reinterpret_cast<uint64_t>(&(df_structure->assistant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_assume_identityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_assume_identityst*>(p_df_structure);

	p_table["trickster"] = reinterpret_cast<uint64_t>(&(df_structure->trickster)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["identity"] = reinterpret_cast<uint64_t>(&(df_structure->identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_create_entity_positionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_create_entity_positionst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position"] = reinterpret_cast<uint64_t>(&(df_structure->position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_change_creature_typest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_change_creature_typest*>(p_df_structure);

	p_table["changee"] = reinterpret_cast<uint64_t>(&(df_structure->changee)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["changer"] = reinterpret_cast<uint64_t>(&(df_structure->changer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_race"] = reinterpret_cast<uint64_t>(&(df_structure->old_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_caste"] = reinterpret_cast<uint64_t>(&(df_structure->old_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_race"] = reinterpret_cast<uint64_t>(&(df_structure->new_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_caste"] = reinterpret_cast<uint64_t>(&(df_structure->new_caste)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_learns_secretst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_learns_secretst*>(p_df_structure);

	p_table["student"] = reinterpret_cast<uint64_t>(&(df_structure->student)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["teacher"] = reinterpret_cast<uint64_t>(&(df_structure->teacher)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction"] = reinterpret_cast<uint64_t>(&(df_structure->interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_act_on_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_act_on_buildingst*>(p_df_structure);

	p_table["action"] = reinterpret_cast<uint64_t>(&(df_structure->action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_does_interactionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_does_interactionst*>(p_df_structure);

	p_table["doer"] = reinterpret_cast<uint64_t>(&(df_structure->doer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction"] = reinterpret_cast<uint64_t>(&(df_structure->interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_lawst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_lawst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_flags"] = reinterpret_cast<uint64_t>(&(df_structure->add_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["remove_flags"] = reinterpret_cast<uint64_t>(&(df_structure->remove_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_storedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_storedst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_agreement_formedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_agreement_formedst*>(p_df_structure);

	p_table["agreement_id"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["delegated"] = reinterpret_cast<uint64_t>(&(df_structure->delegated)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_insurrection_startedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_insurrection_startedst*>(p_df_structure);

	p_table["target_civ"] = reinterpret_cast<uint64_t>(&(df_structure->target_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_attacked_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_attacked_sitest*>(p_df_structure);

	p_table["attacker_hf"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_performancest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_performancest*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occasion"] = reinterpret_cast<uint64_t>(&(df_structure->occasion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["schedule"] = reinterpret_cast<uint64_t>(&(df_structure->schedule)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_competitionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_competitionst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occasion"] = reinterpret_cast<uint64_t>(&(df_structure->occasion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["schedule"] = reinterpret_cast<uint64_t>(&(df_structure->schedule)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["competitor_hf"] = reinterpret_cast<uint64_t>(&(df_structure->competitor_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["winner_hf"] = reinterpret_cast<uint64_t>(&(df_structure->winner_hf)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_processionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_processionst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occasion"] = reinterpret_cast<uint64_t>(&(df_structure->occasion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["schedule"] = reinterpret_cast<uint64_t>(&(df_structure->schedule)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_ceremonyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_ceremonyst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occasion"] = reinterpret_cast<uint64_t>(&(df_structure->occasion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["schedule"] = reinterpret_cast<uint64_t>(&(df_structure->schedule)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_transformedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_transformedst*>(p_df_structure);

	p_table["new_artifact"] = reinterpret_cast<uint64_t>(&(df_structure->new_artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_artifact"] = reinterpret_cast<uint64_t>(&(df_structure->old_artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_destroyedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_destroyedst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destroyer_hf"] = reinterpret_cast<uint64_t>(&(df_structure->destroyer_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destroyer_civ"] = reinterpret_cast<uint64_t>(&(df_structure->destroyer_civ)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_regionpop_incorporated_into_entityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_regionpop_incorporated_into_entityst*>(p_df_structure);

	p_table["pop_race"] = reinterpret_cast<uint64_t>(&(df_structure->pop_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number_moved"] = reinterpret_cast<uint64_t>(&(df_structure->number_moved)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pop_region"] = reinterpret_cast<uint64_t>(&(df_structure->pop_region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pop_layer"] = reinterpret_cast<uint64_t>(&(df_structure->pop_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["join_entity"] = reinterpret_cast<uint64_t>(&(df_structure->join_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_act_on_artifactst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_act_on_artifactst*>(p_df_structure);

	p_table["action"] = reinterpret_cast<uint64_t>(&(df_structure->action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_copiedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_copiedst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_dest"] = reinterpret_cast<uint64_t>(&(df_structure->entity_dest)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_src"] = reinterpret_cast<uint64_t>(&(df_structure->entity_src)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_dest"] = reinterpret_cast<uint64_t>(&(df_structure->site_dest)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_src"] = reinterpret_cast<uint64_t>(&(df_structure->site_src)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure_dest"] = reinterpret_cast<uint64_t>(&(df_structure->structure_dest)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure_src"] = reinterpret_cast<uint64_t>(&(df_structure->structure_src)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_sneak_into_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_sneak_into_sitest*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_spotted_leaving_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_spotted_leaving_sitest*>(p_df_structure);

	p_table["spotter_hf"] = reinterpret_cast<uint64_t>(&(df_structure->spotter_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leaver_civ"] = reinterpret_cast<uint64_t>(&(df_structure->leaver_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_searched_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_searched_sitest*>(p_df_structure);

	p_table["searcher_civ"] = reinterpret_cast<uint64_t>(&(df_structure->searcher_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["result"] = reinterpret_cast<uint64_t>(&(df_structure->result)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_freedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_freedst*>(p_df_structure);

	p_table["freeing_civ"] = reinterpret_cast<uint64_t>(&(df_structure->freeing_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["freeing_hf"] = reinterpret_cast<uint64_t>(&(df_structure->freeing_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["holding_civ"] = reinterpret_cast<uint64_t>(&(df_structure->holding_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_civ"] = reinterpret_cast<uint64_t>(&(df_structure->site_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rescued_hfs"] = reinterpret_cast<uint64_t>(&(df_structure->rescued_hfs)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_simple_actionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_simple_actionst*>(p_df_structure);

	p_table["group_hfs"] = reinterpret_cast<uint64_t>(&(df_structure->group_hfs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_rampaged_in_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_rampaged_in_sitest*>(p_df_structure);

	p_table["rampage_civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->rampage_civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_fled_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_fled_sitest*>(p_df_structure);

	p_table["fled_civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->fled_civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_squad_vs_squadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_squad_vs_squadst*>(p_df_structure);

	p_table["a_leader_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->a_leader_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_leadership_roll"] = reinterpret_cast<uint64_t>(&(df_structure->a_leadership_roll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->a_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_squad_id"] = reinterpret_cast<uint64_t>(&(df_structure->a_squad_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_race"] = reinterpret_cast<uint64_t>(&(df_structure->a_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_interaction"] = reinterpret_cast<uint64_t>(&(df_structure->a_interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_effect"] = reinterpret_cast<uint64_t>(&(df_structure->a_effect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_number"] = reinterpret_cast<uint64_t>(&(df_structure->a_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_slain"] = reinterpret_cast<uint64_t>(&(df_structure->a_slain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_leader_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->d_leader_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_leadership_roll"] = reinterpret_cast<uint64_t>(&(df_structure->d_leadership_roll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->d_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_squad_id"] = reinterpret_cast<uint64_t>(&(df_structure->d_squad_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_race"] = reinterpret_cast<uint64_t>(&(df_structure->d_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_interaction"] = reinterpret_cast<uint64_t>(&(df_structure->d_interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_effect"] = reinterpret_cast<uint64_t>(&(df_structure->d_effect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_number"] = reinterpret_cast<uint64_t>(&(df_structure->d_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_slain"] = reinterpret_cast<uint64_t>(&(df_structure->d_slain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion"] = reinterpret_cast<uint64_t>(&(df_structure->subregion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_layer"] = reinterpret_cast<uint64_t>(&(df_structure->feature_layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_tradest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_tradest*>(p_df_structure);

	p_table["hf"] = reinterpret_cast<uint64_t>(&(df_structure->hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_site"] = reinterpret_cast<uint64_t>(&(df_structure->source_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dest_site"] = reinterpret_cast<uint64_t>(&(df_structure->dest_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["production_zone"] = reinterpret_cast<uint64_t>(&(df_structure->production_zone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allotment"] = reinterpret_cast<uint64_t>(&(df_structure->allotment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allotment_index"] = reinterpret_cast<uint64_t>(&(df_structure->allotment_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["account_shift"] = reinterpret_cast<uint64_t>(&(df_structure->account_shift)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_gamblest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_gamblest*>(p_df_structure);

	p_table["hf"] = reinterpret_cast<uint64_t>(&(df_structure->hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["account_before"] = reinterpret_cast<uint64_t>(&(df_structure->account_before)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["account_after"] = reinterpret_cast<uint64_t>(&(df_structure->account_after)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_add_hf_entity_honorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_add_hf_entity_honorst*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hfid"] = reinterpret_cast<uint64_t>(&(df_structure->hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["honor_id"] = reinterpret_cast<uint64_t>(&(df_structure->honor_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_equipment_purchasest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_equipment_purchasest*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality"] = reinterpret_cast<uint64_t>(&(df_structure->quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hfs"] = reinterpret_cast<uint64_t>(&(df_structure->hfs)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_modified_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_modified_buildingst*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hf"] = reinterpret_cast<uint64_t>(&(df_structure->hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["modification"] = reinterpret_cast<uint64_t>(&(df_structure->modification)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_building_profile_acquiredst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_building_profile_acquiredst*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_profile"] = reinterpret_cast<uint64_t>(&(df_structure->building_profile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["acquirer_hf"] = reinterpret_cast<uint64_t>(&(df_structure->acquirer_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["acquirer_entity"] = reinterpret_cast<uint64_t>(&(df_structure->acquirer_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["acquisition_type"] = reinterpret_cast<uint64_t>(&(df_structure->acquisition_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["previous_owner_hf"] = reinterpret_cast<uint64_t>(&(df_structure->previous_owner_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_preachst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_preachst*>(p_df_structure);

	p_table["speaker_hf"] = reinterpret_cast<uint64_t>(&(df_structure->speaker_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity1"] = reinterpret_cast<uint64_t>(&(df_structure->entity1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity2"] = reinterpret_cast<uint64_t>(&(df_structure->entity2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_persecutedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_persecutedst*>(p_df_structure);

	p_table["persecuting_hf"] = reinterpret_cast<uint64_t>(&(df_structure->persecuting_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["persecuting_entity"] = reinterpret_cast<uint64_t>(&(df_structure->persecuting_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_entity"] = reinterpret_cast<uint64_t>(&(df_structure->target_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["property_confiscated_from_hfs"] = reinterpret_cast<uint64_t>(&(df_structure->property_confiscated_from_hfs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destroyed_structures"] = reinterpret_cast<uint64_t>(&(df_structure->destroyed_structures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shrines_destroyed"] = reinterpret_cast<uint64_t>(&(df_structure->shrines_destroyed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["expelled_hfs"] = reinterpret_cast<uint64_t>(&(df_structure->expelled_hfs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["expelled_populations"] = reinterpret_cast<uint64_t>(&(df_structure->expelled_populations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["expelled_races"] = reinterpret_cast<uint64_t>(&(df_structure->expelled_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["expelled_counts"] = reinterpret_cast<uint64_t>(&(df_structure->expelled_counts)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_breach_feature_layerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_breach_feature_layerst*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_entity"] = reinterpret_cast<uint64_t>(&(df_structure->site_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_entity"] = reinterpret_cast<uint64_t>(&(df_structure->civ_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_alliance_formedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_alliance_formedst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["joining_entities"] = reinterpret_cast<uint64_t>(&(df_structure->joining_entities)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_ransomedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_ransomedst*>(p_df_structure);

	p_table["ransomed_hf"] = reinterpret_cast<uint64_t>(&(df_structure->ransomed_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ransomer_hf"] = reinterpret_cast<uint64_t>(&(df_structure->ransomer_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["payer_hf"] = reinterpret_cast<uint64_t>(&(df_structure->payer_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["payer_entity"] = reinterpret_cast<uint64_t>(&(df_structure->payer_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["moved_to_site"] = reinterpret_cast<uint64_t>(&(df_structure->moved_to_site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_enslavedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_enslavedst*>(p_df_structure);

	p_table["enslaved_hf"] = reinterpret_cast<uint64_t>(&(df_structure->enslaved_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seller_hf"] = reinterpret_cast<uint64_t>(&(df_structure->seller_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["payer_entity"] = reinterpret_cast<uint64_t>(&(df_structure->payer_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["moved_to_site"] = reinterpret_cast<uint64_t>(&(df_structure->moved_to_site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_sabotagest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_sabotagest*>(p_df_structure);

	p_table["saboteur_hf"] = reinterpret_cast<uint64_t>(&(df_structure->saboteur_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_entity"] = reinterpret_cast<uint64_t>(&(df_structure->target_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_overthrownst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_overthrownst*>(p_df_structure);

	p_table["overthrown_hf"] = reinterpret_cast<uint64_t>(&(df_structure->overthrown_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_taker_hf"] = reinterpret_cast<uint64_t>(&(df_structure->position_taker_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["instigator_hf"] = reinterpret_cast<uint64_t>(&(df_structure->instigator_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_profile_id"] = reinterpret_cast<uint64_t>(&(df_structure->position_profile_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["conspirator_hfs"] = reinterpret_cast<uint64_t>(&(df_structure->conspirator_hfs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hfs_formed_intrigue_relationshipst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hfs_formed_intrigue_relationshipst*>(p_df_structure);

	p_table["corruptor_hf"] = reinterpret_cast<uint64_t>(&(df_structure->corruptor_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["corruptor_identity"] = reinterpret_cast<uint64_t>(&(df_structure->corruptor_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_identity"] = reinterpret_cast<uint64_t>(&(df_structure->target_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_failed_intrigue_corruptionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_failed_intrigue_corruptionst*>(p_df_structure);

	p_table["corruptor_hf"] = reinterpret_cast<uint64_t>(&(df_structure->corruptor_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["corruptor_identity"] = reinterpret_cast<uint64_t>(&(df_structure->corruptor_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_identity"] = reinterpret_cast<uint64_t>(&(df_structure->target_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_convictedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_convictedst*>(p_df_structure);

	p_table["convicted_hf"] = reinterpret_cast<uint64_t>(&(df_structure->convicted_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convicter_entity"] = reinterpret_cast<uint64_t>(&(df_structure->convicter_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recognized_by_entity"] = reinterpret_cast<uint64_t>(&(df_structure->recognized_by_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recognized_by_hf"] = reinterpret_cast<uint64_t>(&(df_structure->recognized_by_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["implicated_hfs"] = reinterpret_cast<uint64_t>(&(df_structure->implicated_hfs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["corrupt_hf"] = reinterpret_cast<uint64_t>(&(df_structure->corrupt_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["behest_of_hf"] = reinterpret_cast<uint64_t>(&(df_structure->behest_of_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fooled_hf"] = reinterpret_cast<uint64_t>(&(df_structure->fooled_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["framer_hf"] = reinterpret_cast<uint64_t>(&(df_structure->framer_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["surveillance_hf"] = reinterpret_cast<uint64_t>(&(df_structure->surveillance_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["co_conspirator_hf"] = reinterpret_cast<uint64_t>(&(df_structure->co_conspirator_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crime"] = reinterpret_cast<uint64_t>(&(df_structure->crime)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hammerstrokes"] = reinterpret_cast<uint64_t>(&(df_structure->hammerstrokes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prison_months"] = reinterpret_cast<uint64_t>(&(df_structure->prison_months)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["punishment_flags"] = reinterpret_cast<uint64_t>(&(df_structure->punishment_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plot_flags"] = reinterpret_cast<uint64_t>(&(df_structure->plot_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_failed_frame_attemptst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_failed_frame_attemptst*>(p_df_structure);

	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convicter_entity"] = reinterpret_cast<uint64_t>(&(df_structure->convicter_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plotter_hf"] = reinterpret_cast<uint64_t>(&(df_structure->plotter_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fooled_hf"] = reinterpret_cast<uint64_t>(&(df_structure->fooled_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["framer_hf"] = reinterpret_cast<uint64_t>(&(df_structure->framer_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crime"] = reinterpret_cast<uint64_t>(&(df_structure->crime)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_interrogatedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_interrogatedst*>(p_df_structure);

	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["arresting_entity"] = reinterpret_cast<uint64_t>(&(df_structure->arresting_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interrogator_hf"] = reinterpret_cast<uint64_t>(&(df_structure->interrogator_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["implicated_hfs"] = reinterpret_cast<uint64_t>(&(df_structure->implicated_hfs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interrogation_flags"] = reinterpret_cast<uint64_t>(&(df_structure->interrogation_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection*>(p_df_structure);

	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["collections"] = reinterpret_cast<uint64_t>(&(df_structure->collections)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year"] = reinterpret_cast<uint64_t>(&(df_structure->end_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_seconds"] = reinterpret_cast<uint64_t>(&(df_structure->start_seconds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_seconds"] = reinterpret_cast<uint64_t>(&(df_structure->end_seconds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_site_conqueredst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_site_conqueredst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_journeyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_journeyst*>(p_df_structure);

	p_table["traveler_hf"] = reinterpret_cast<uint64_t>(&(df_structure->traveler_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_insurrectionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_insurrectionst*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_civ"] = reinterpret_cast<uint64_t>(&(df_structure->target_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_occasionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_occasionst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occasion"] = reinterpret_cast<uint64_t>(&(df_structure->occasion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_performancest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_performancest*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_competitionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_competitionst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_processionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_processionst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_ceremonyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_ceremonyst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_purgest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_purgest*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_persecutionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_persecutionst*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_entity_overthrownst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_entity_overthrownst*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_init_media_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::init_media*>(p_df_structure);

	p_table["flag"] = reinterpret_cast<uint64_t>(&(df_structure->flag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volume"] = reinterpret_cast<uint64_t>(&(df_structure->volume)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_init_input_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::init_input*>(p_df_structure);

	p_table["hold_time"] = reinterpret_cast<uint64_t>(&(df_structure->hold_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["repeat_time"] = reinterpret_cast<uint64_t>(&(df_structure->repeat_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["macro_time"] = reinterpret_cast<uint64_t>(&(df_structure->macro_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pause_zoom_no_interface_ms"] = reinterpret_cast<uint64_t>(&(df_structure->pause_zoom_no_interface_ms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flag"] = reinterpret_cast<uint64_t>(&(df_structure->flag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["zoom_speed"] = reinterpret_cast<uint64_t>(&(df_structure->zoom_speed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["repeat_accel_start"] = reinterpret_cast<uint64_t>(&(df_structure->repeat_accel_start)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["repeat_accel_limit"] = reinterpret_cast<uint64_t>(&(df_structure->repeat_accel_limit)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_init_window_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::init_window*>(p_df_structure);

	p_table["flag"] = reinterpret_cast<uint64_t>(&(df_structure->flag)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_tile_page_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::tile_page*>(p_df_structure);

	p_table["token"] = reinterpret_cast<uint64_t>(&(df_structure->token)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filename"] = reinterpret_cast<uint64_t>(&(df_structure->filename)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_dim_x"] = reinterpret_cast<uint64_t>(&(df_structure->tile_dim_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_dim_y"] = reinterpret_cast<uint64_t>(&(df_structure->tile_dim_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_dim_x"] = reinterpret_cast<uint64_t>(&(df_structure->page_dim_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_dim_y"] = reinterpret_cast<uint64_t>(&(df_structure->page_dim_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["texpos"] = reinterpret_cast<uint64_t>(&(df_structure->texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["datapos"] = reinterpret_cast<uint64_t>(&(df_structure->datapos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["texpos_gs"] = reinterpret_cast<uint64_t>(&(df_structure->texpos_gs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["datapos_gs"] = reinterpret_cast<uint64_t>(&(df_structure->datapos_gs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["loaded"] = reinterpret_cast<uint64_t>(&(df_structure->loaded)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["frequency"] = reinterpret_cast<uint64_t>(&(df_structure->frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_string_1"] = reinterpret_cast<uint64_t>(&(df_structure->hist_string_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_string_2"] = reinterpret_cast<uint64_t>(&(df_structure->hist_string_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trigger_string_second"] = reinterpret_cast<uint64_t>(&(df_structure->trigger_string_second)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trigger_string_third"] = reinterpret_cast<uint64_t>(&(df_structure->trigger_string_third)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trigger_string"] = reinterpret_cast<uint64_t>(&(df_structure->trigger_string)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_regionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_regionst*>(p_df_structure);

	p_table["region_flags"] = reinterpret_cast<uint64_t>(&(df_structure->region_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["regions"] = reinterpret_cast<uint64_t>(&(df_structure->regions)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_disturbancest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_disturbancest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_attackst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_attackst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_ingestionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_ingestionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_creature_actionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_creature_actionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_underground_specialst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_underground_specialst*>(p_df_structure);

}

void generate_interaction_source_experimentst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_experimentst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_target_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_target_info*>(p_df_structure);

	p_table["affected_creature_str"] = reinterpret_cast<uint64_t>(&(df_structure->affected_creature_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["affected_creature"] = reinterpret_cast<uint64_t>(&(df_structure->affected_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["affected_class"] = reinterpret_cast<uint64_t>(&(df_structure->affected_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["immune_creature_str"] = reinterpret_cast<uint64_t>(&(df_structure->immune_creature_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["immune_creature"] = reinterpret_cast<uint64_t>(&(df_structure->immune_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["immune_class"] = reinterpret_cast<uint64_t>(&(df_structure->immune_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden_syndrome_class"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden_syndrome_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["requires_1"] = reinterpret_cast<uint64_t>(&(df_structure->requires_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["requires_2"] = reinterpret_cast<uint64_t>(&(df_structure->requires_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden_1"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden_2"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["restrictions"] = reinterpret_cast<uint64_t>(&(df_structure->restrictions)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_instance_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_instance*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_index"] = reinterpret_cast<uint64_t>(&(df_structure->region_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["affected_units"] = reinterpret_cast<uint64_t>(&(df_structure->affected_units)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_weapon_attack_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::weapon_attack*>(p_df_structure);

	p_table["edged"] = reinterpret_cast<uint64_t>(&(df_structure->edged)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contact"] = reinterpret_cast<uint64_t>(&(df_structure->contact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["penetration"] = reinterpret_cast<uint64_t>(&(df_structure->penetration)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["velocity_mult"] = reinterpret_cast<uint64_t>(&(df_structure->velocity_mult)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_2nd"] = reinterpret_cast<uint64_t>(&(df_structure->verb_2nd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_3rd"] = reinterpret_cast<uint64_t>(&(df_structure->verb_3rd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noun"] = reinterpret_cast<uint64_t>(&(df_structure->noun)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prepare"] = reinterpret_cast<uint64_t>(&(df_structure->prepare)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recover"] = reinterpret_cast<uint64_t>(&(df_structure->recover)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["base_flags"] = reinterpret_cast<uint64_t>(&(df_structure->base_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->source_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_enid"] = reinterpret_cast<uint64_t>(&(df_structure->source_enid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["raw_strings"] = reinterpret_cast<uint64_t>(&(df_structure->raw_strings)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_armor_properties_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::armor_properties*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_size"] = reinterpret_cast<uint64_t>(&(df_structure->layer_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_permit"] = reinterpret_cast<uint64_t>(&(df_structure->layer_permit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["coverage"] = reinterpret_cast<uint64_t>(&(df_structure->coverage)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_foodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_foodst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["level"] = reinterpret_cast<uint64_t>(&(df_structure->level)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_instrument_piece_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::instrument_piece*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_shieldst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_shieldst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blockchance"] = reinterpret_cast<uint64_t>(&(df_structure->blockchance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorlevel"] = reinterpret_cast<uint64_t>(&(df_structure->armorlevel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["upstep"] = reinterpret_cast<uint64_t>(&(df_structure->upstep)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_siegeammost_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_siegeammost*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_class"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_class)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_toyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_toyst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_temperaturest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::temperaturest*>(p_df_structure);

	p_table["whole"] = reinterpret_cast<uint64_t>(&(df_structure->whole)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction"] = reinterpret_cast<uint64_t>(&(df_structure->fraction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_body_size_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::body_size_info*>(p_df_structure);

	p_table["size_cur"] = reinterpret_cast<uint64_t>(&(df_structure->size_cur)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size_base"] = reinterpret_cast<uint64_t>(&(df_structure->size_base)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["area_cur"] = reinterpret_cast<uint64_t>(&(df_structure->area_cur)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["area_base"] = reinterpret_cast<uint64_t>(&(df_structure->area_base)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["length_cur"] = reinterpret_cast<uint64_t>(&(df_structure->length_cur)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["length_base"] = reinterpret_cast<uint64_t>(&(df_structure->length_base)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_stockpile_ref_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_stockpile_ref*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_art_specification_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job_art_specification*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subid"] = reinterpret_cast<uint64_t>(&(df_structure->subid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_manager_order_condition_order_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::manager_order_condition_order*>(p_df_structure);

	p_table["order_id"] = reinterpret_cast<uint64_t>(&(df_structure->order_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["condition"] = reinterpret_cast<uint64_t>(&(df_structure->condition)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_training_assignment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::training_assignment*>(p_df_structure);

	p_table["animal_id"] = reinterpret_cast<uint64_t>(&(df_structure->animal_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trainer_id"] = reinterpret_cast<uint64_t>(&(df_structure->trainer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_language_translation_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::language_translation*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown1"] = reinterpret_cast<uint64_t>(&(df_structure->unknown1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown2"] = reinterpret_cast<uint64_t>(&(df_structure->unknown2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["words"] = reinterpret_cast<uint64_t>(&(df_structure->words)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_language_symbol_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::language_symbol*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown"] = reinterpret_cast<uint64_t>(&(df_structure->unknown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["words"] = reinterpret_cast<uint64_t>(&(df_structure->words)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_invasion_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::invasion_info*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active_size1"] = reinterpret_cast<uint64_t>(&(df_structure->active_size1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active_size2"] = reinterpret_cast<uint64_t>(&(df_structure->active_size2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["duration_counter"] = reinterpret_cast<uint64_t>(&(df_structure->duration_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4b"] = reinterpret_cast<uint64_t>(&(df_structure->unk4b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_machine_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::machine_info*>(p_df_structure);

	p_table["machine_id"] = reinterpret_cast<uint64_t>(&(df_structure->machine_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_power_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::power_info*>(p_df_structure);

	p_table["produced"] = reinterpret_cast<uint64_t>(&(df_structure->produced)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["consumed"] = reinterpret_cast<uint64_t>(&(df_structure->consumed)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_coord2d_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::coord2d*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_coord2d_path_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::coord2d_path*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_coord_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::coord*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_coord_path_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::coord_path*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_tile_bitmask_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::tile_bitmask*>(p_df_structure);

	p_table["bits"] = reinterpret_cast<uint64_t>(&(df_structure->bits)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_cave_column_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::cave_column*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_cave_column_rectangle_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::cave_column_rectangle*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_square_event_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event*>(p_df_structure);

}

void generate_block_square_event_grassst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event_grassst*>(p_df_structure);

	p_table["plant_index"] = reinterpret_cast<uint64_t>(&(df_structure->plant_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount"] = reinterpret_cast<uint64_t>(&(df_structure->amount)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_square_event_spoorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event_spoorst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_square_event_designation_priorityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event_designation_priorityst*>(p_df_structure);

	p_table["priority"] = reinterpret_cast<uint64_t>(&(df_structure->priority)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_alteration_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_alteration*>(p_df_structure);

}

void generate_feature_alteration_new_pop_maxst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_alteration_new_pop_maxst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_alteration_new_lava_fill_zst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_alteration_new_lava_fill_zst*>(p_df_structure);

	p_table["magma_fill_z"] = reinterpret_cast<uint64_t>(&(df_structure->magma_fill_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_flow_reuse_pool_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::flow_reuse_pool*>(p_df_structure);

	p_table["reuse_idx"] = reinterpret_cast<uint64_t>(&(df_structure->reuse_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_flow_guide_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::flow_guide*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_region_block_eventst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::region_block_eventst*>(p_df_structure);

}

void generate_region_block_event_sphere_fieldst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::region_block_event_sphere_fieldst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_material_vec_ref_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::material_vec_ref*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_stepst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_stepst*>(p_df_structure);

	p_table["next_step_idx"] = reinterpret_cast<uint64_t>(&(df_structure->next_step_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_setvarst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_setvarst*>(p_df_structure);

	p_table["dest_type"] = reinterpret_cast<uint64_t>(&(df_structure->dest_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dest_name"] = reinterpret_cast<uint64_t>(&(df_structure->dest_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["src_type"] = reinterpret_cast<uint64_t>(&(df_structure->src_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["src_name"] = reinterpret_cast<uint64_t>(&(df_structure->src_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_simpleactionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_simpleactionst*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_conditionalst__T_condition_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_conditionalst::T_condition*>(p_df_structure);

	p_table["var1_type"] = reinterpret_cast<uint64_t>(&(df_structure->var1_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["var1_name"] = reinterpret_cast<uint64_t>(&(df_structure->var1_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["comparison"] = reinterpret_cast<uint64_t>(&(df_structure->comparison)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["var2_type"] = reinterpret_cast<uint64_t>(&(df_structure->var2_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["var2_name"] = reinterpret_cast<uint64_t>(&(df_structure->var2_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_conditionalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_conditionalst*>(p_df_structure);

	p_table["condition"] = reinterpret_cast<uint64_t>(&(df_structure->condition)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["conditional_next_step_idx"] = reinterpret_cast<uint64_t>(&(df_structure->conditional_next_step_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_textviewerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_textviewerst*>(p_df_structure);

	p_table["filename"] = reinterpret_cast<uint64_t>(&(df_structure->filename)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["outvar_name"] = reinterpret_cast<uint64_t>(&(df_structure->outvar_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_diphistoryst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_diphistoryst*>(p_df_structure);

	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_discussst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_discussst*>(p_df_structure);

	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_topicdiscussionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_topicdiscussionst*>(p_df_structure);

}

void generate_script_step_constructtopiclistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_constructtopiclistst*>(p_df_structure);

}

void generate_script_step_eventst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_eventst*>(p_df_structure);

}

void generate_script_step_dipeventst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_dipeventst*>(p_df_structure);

	p_table["parm1"] = reinterpret_cast<uint64_t>(&(df_structure->parm1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parm2"] = reinterpret_cast<uint64_t>(&(df_structure->parm2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parm3"] = reinterpret_cast<uint64_t>(&(df_structure->parm3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parm4"] = reinterpret_cast<uint64_t>(&(df_structure->parm4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parm5"] = reinterpret_cast<uint64_t>(&(df_structure->parm5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_step_invasionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_step_invasionst*>(p_df_structure);

	p_table["parm"] = reinterpret_cast<uint64_t>(&(df_structure->parm)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_varst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_varst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_script_var_unitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_var_unitst*>(p_df_structure);

}

void generate_script_var_longst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::script_var_longst*>(p_df_structure);

}

void generate_active_script_varst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::active_script_varst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_active_script_var_longst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::active_script_var_longst*>(p_df_structure);

	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_participants_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_participants*>(p_df_structure);

	p_table["histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["free_histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->free_histfigs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["free_units"] = reinterpret_cast<uint64_t>(&(df_structure->free_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_id"] = reinterpret_cast<uint64_t>(&(df_structure->activity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_id"] = reinterpret_cast<uint64_t>(&(df_structure->event_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_schedule_slot_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::schedule_slot*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_time"] = reinterpret_cast<uint64_t>(&(df_structure->start_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_time"] = reinterpret_cast<uint64_t>(&(df_structure->end_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["processed"] = reinterpret_cast<uint64_t>(&(df_structure->processed)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order*>(p_df_structure);

	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_kill_listst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_kill_listst*>(p_df_structure);

	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_defend_burrowsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_defend_burrowsst*>(p_df_structure);

	p_table["burrows"] = reinterpret_cast<uint64_t>(&(df_structure->burrows)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_patrol_routest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_patrol_routest*>(p_df_structure);

	p_table["route_id"] = reinterpret_cast<uint64_t>(&(df_structure->route_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_trainst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_trainst*>(p_df_structure);

}

void generate_squad_order_drive_entity_off_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_drive_entity_off_sitest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_cause_trouble_for_entityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_cause_trouble_for_entityst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_kill_hfst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_kill_hfst*>(p_df_structure);

	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_drive_armies_from_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_drive_armies_from_sitest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub5_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub5*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub6_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub6*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub16_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub16*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub17_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub17*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub18_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub18*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub24_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub24*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plant_growth_print_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plant_growth_print*>(p_df_structure);

	p_table["priority"] = reinterpret_cast<uint64_t>(&(df_structure->priority)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_growth"] = reinterpret_cast<uint64_t>(&(df_structure->tile_growth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_item"] = reinterpret_cast<uint64_t>(&(df_structure->tile_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timing_start"] = reinterpret_cast<uint64_t>(&(df_structure->timing_start)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timing_end"] = reinterpret_cast<uint64_t>(&(df_structure->timing_end)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_category_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_category*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent"] = reinterpret_cast<uint64_t>(&(df_structure->parent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["key"] = reinterpret_cast<uint64_t>(&(df_structure->key)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["description"] = reinterpret_cast<uint64_t>(&(df_structure->description)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_product_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_product*>(p_df_structure);

	p_table["unk_v4201_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["product_to_container"] = reinterpret_cast<uint64_t>(&(df_structure->product_to_container)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref*>(p_df_structure);

}

void generate_general_ref_artifact_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_artifact*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_nemesis_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_nemesis*>(p_df_structure);

	p_table["nemesis_id"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_item*>(p_df_structure);

	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cached_index"] = reinterpret_cast<uint64_t>(&(df_structure->cached_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_coinbatch_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_coinbatch*>(p_df_structure);

	p_table["batch"] = reinterpret_cast<uint64_t>(&(df_structure->batch)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_entity_art_image_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_entity_art_image*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_projectile_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_projectile*>(p_df_structure);

	p_table["projectile_id"] = reinterpret_cast<uint64_t>(&(df_structure->projectile_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_unit_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cached_index"] = reinterpret_cast<uint64_t>(&(df_structure->cached_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_building_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building*>(p_df_structure);

	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_entity_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_entity*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_locationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_locationst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_interactionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_interactionst*>(p_df_structure);

	p_table["interaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_id"] = reinterpret_cast<uint64_t>(&(df_structure->source_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_08"] = reinterpret_cast<uint64_t>(&(df_structure->unk_08)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_0c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_abstract_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_abstract_buildingst*>(p_df_structure);

	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_historical_eventst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_historical_eventst*>(p_df_structure);

	p_table["event_id"] = reinterpret_cast<uint64_t>(&(df_structure->event_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_sitest*>(p_df_structure);

	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_subregionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_subregionst*>(p_df_structure);

	p_table["region_id"] = reinterpret_cast<uint64_t>(&(df_structure->region_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_feature_layerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_feature_layerst*>(p_df_structure);

	p_table["underground_region_id"] = reinterpret_cast<uint64_t>(&(df_structure->underground_region_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_historical_figurest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_historical_figurest*>(p_df_structure);

	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_entity_popst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_entity_popst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_creaturest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_creaturest*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_activity_eventst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_activity_eventst*>(p_df_structure);

	p_table["activity_id"] = reinterpret_cast<uint64_t>(&(df_structure->activity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_id"] = reinterpret_cast<uint64_t>(&(df_structure->event_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_languagest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_languagest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_written_contentst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_written_contentst*>(p_df_structure);

	p_table["written_content_id"] = reinterpret_cast<uint64_t>(&(df_structure->written_content_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_poetic_formst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_poetic_formst*>(p_df_structure);

	p_table["poetic_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->poetic_form_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_musical_formst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_musical_formst*>(p_df_structure);

	p_table["musical_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->musical_form_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_dance_formst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_dance_formst*>(p_df_structure);

	p_table["dance_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->dance_form_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_is_artifactst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_is_artifactst*>(p_df_structure);

}

void generate_general_ref_is_nemesisst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_is_nemesisst*>(p_df_structure);

}

void generate_general_ref_contains_unitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_contains_unitst*>(p_df_structure);

}

void generate_general_ref_contains_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_contains_itemst*>(p_df_structure);

}

void generate_general_ref_contained_in_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_contained_in_itemst*>(p_df_structure);

}

void generate_general_ref_unit_milkeest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_milkeest*>(p_df_structure);

}

void generate_general_ref_unit_traineest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_traineest*>(p_df_structure);

}

void generate_general_ref_unit_itemownerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_itemownerst*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_unit_tradebringerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_tradebringerst*>(p_df_structure);

}

void generate_general_ref_unit_holderst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_holderst*>(p_df_structure);

}

void generate_general_ref_unit_workerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_workerst*>(p_df_structure);

}

void generate_general_ref_unit_cageest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_cageest*>(p_df_structure);

}

void generate_general_ref_unit_beateest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_beateest*>(p_df_structure);

}

void generate_general_ref_unit_foodreceiverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_foodreceiverst*>(p_df_structure);

}

void generate_general_ref_unit_kidnapeest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_kidnapeest*>(p_df_structure);

}

void generate_general_ref_unit_patientst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_patientst*>(p_df_structure);

}

void generate_general_ref_unit_infantst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_infantst*>(p_df_structure);

}

void generate_general_ref_unit_slaughtereest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_slaughtereest*>(p_df_structure);

}

void generate_general_ref_unit_sheareest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_sheareest*>(p_df_structure);

}

void generate_general_ref_unit_suckeest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_suckeest*>(p_df_structure);

}

void generate_general_ref_unit_reporteest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_reporteest*>(p_df_structure);

}

void generate_general_ref_unit_riderst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_riderst*>(p_df_structure);

}

void generate_general_ref_unit_climberst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_climberst*>(p_df_structure);

}

void generate_general_ref_unit_geldeest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_geldeest*>(p_df_structure);

}

void generate_general_ref_unit_interrogateest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_unit_interrogateest*>(p_df_structure);

}

void generate_general_ref_building_civzone_assignedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_civzone_assignedst*>(p_df_structure);

}

void generate_general_ref_building_triggerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_triggerst*>(p_df_structure);

}

void generate_general_ref_building_triggertargetst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_triggertargetst*>(p_df_structure);

}

void generate_general_ref_building_chainst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_chainst*>(p_df_structure);

}

void generate_general_ref_building_cagedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_cagedst*>(p_df_structure);

}

void generate_general_ref_building_holderst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_holderst*>(p_df_structure);

}

void generate_general_ref_building_well_tag_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_well_tag*>(p_df_structure);

	p_table["direction"] = reinterpret_cast<uint64_t>(&(df_structure->direction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_building_use_target_1st_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_use_target_1st*>(p_df_structure);

}

void generate_general_ref_building_use_target_2st_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_use_target_2st*>(p_df_structure);

}

void generate_general_ref_building_destinationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_destinationst*>(p_df_structure);

}

void generate_general_ref_building_nest_boxst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_nest_boxst*>(p_df_structure);

}

void generate_general_ref_building_display_furniturest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_building_display_furniturest*>(p_df_structure);

}

void generate_general_ref_entity_stolenst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_entity_stolenst*>(p_df_structure);

}

void generate_general_ref_entity_offeredst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_entity_offeredst*>(p_df_structure);

}

void generate_general_ref_entity_itemownerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_entity_itemownerst*>(p_df_structure);

}

void generate_histfig_entity_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["link_strength"] = reinterpret_cast<uint64_t>(&(df_structure->link_strength)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_entity_link_memberst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_memberst*>(p_df_structure);

}

void generate_histfig_entity_link_former_memberst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_former_memberst*>(p_df_structure);

}

void generate_histfig_entity_link_mercenaryst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_mercenaryst*>(p_df_structure);

}

void generate_histfig_entity_link_former_mercenaryst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_former_mercenaryst*>(p_df_structure);

}

void generate_histfig_entity_link_slavest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_slavest*>(p_df_structure);

}

void generate_histfig_entity_link_former_slavest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_former_slavest*>(p_df_structure);

}

void generate_histfig_entity_link_prisonerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_prisonerst*>(p_df_structure);

}

void generate_histfig_entity_link_former_prisonerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_former_prisonerst*>(p_df_structure);

}

void generate_histfig_entity_link_enemyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_enemyst*>(p_df_structure);

}

void generate_histfig_entity_link_criminalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_criminalst*>(p_df_structure);

}

void generate_histfig_entity_link_positionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_positionst*>(p_df_structure);

	p_table["assignment_id"] = reinterpret_cast<uint64_t>(&(df_structure->assignment_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_entity_link_former_positionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_former_positionst*>(p_df_structure);

	p_table["assignment_id"] = reinterpret_cast<uint64_t>(&(df_structure->assignment_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year"] = reinterpret_cast<uint64_t>(&(df_structure->end_year)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_entity_link_position_claimst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_position_claimst*>(p_df_structure);

	p_table["assignment_id"] = reinterpret_cast<uint64_t>(&(df_structure->assignment_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_entity_link_squadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_squadst*>(p_df_structure);

	p_table["squad_id"] = reinterpret_cast<uint64_t>(&(df_structure->squad_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_position"] = reinterpret_cast<uint64_t>(&(df_structure->squad_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_entity_link_former_squadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_former_squadst*>(p_df_structure);

	p_table["squad_id"] = reinterpret_cast<uint64_t>(&(df_structure->squad_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year"] = reinterpret_cast<uint64_t>(&(df_structure->end_year)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_entity_link_occupationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_occupationst*>(p_df_structure);

	p_table["occupation_id"] = reinterpret_cast<uint64_t>(&(df_structure->occupation_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_entity_link_former_occupationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_entity_link_former_occupationst*>(p_df_structure);

	p_table["occupation_id"] = reinterpret_cast<uint64_t>(&(df_structure->occupation_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year"] = reinterpret_cast<uint64_t>(&(df_structure->end_year)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_site_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sub_id"] = reinterpret_cast<uint64_t>(&(df_structure->sub_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_site_link_occupationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_occupationst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_site_link_seat_of_powerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_seat_of_powerst*>(p_df_structure);

}

void generate_histfig_site_link_hangoutst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_hangoutst*>(p_df_structure);

}

void generate_histfig_site_link_home_site_abstract_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_home_site_abstract_buildingst*>(p_df_structure);

}

void generate_histfig_site_link_home_site_realization_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_home_site_realization_buildingst*>(p_df_structure);

}

void generate_histfig_site_link_lairst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_lairst*>(p_df_structure);

}

void generate_histfig_site_link_home_site_realization_sulst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_home_site_realization_sulst*>(p_df_structure);

}

void generate_histfig_site_link_home_site_saved_civzonest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_home_site_saved_civzonest*>(p_df_structure);

}

void generate_histfig_site_link_prison_abstract_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_prison_abstract_buildingst*>(p_df_structure);

}

void generate_histfig_site_link_prison_site_building_profilest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_site_link_prison_site_building_profilest*>(p_df_structure);

}

void generate_histfig_hf_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link*>(p_df_structure);

	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["link_strength"] = reinterpret_cast<uint64_t>(&(df_structure->link_strength)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_hf_link_motherst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_motherst*>(p_df_structure);

}

void generate_histfig_hf_link_fatherst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_fatherst*>(p_df_structure);

}

void generate_histfig_hf_link_spousest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_spousest*>(p_df_structure);

}

void generate_histfig_hf_link_childst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_childst*>(p_df_structure);

}

void generate_histfig_hf_link_deityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_deityst*>(p_df_structure);

}

void generate_histfig_hf_link_loverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_loverst*>(p_df_structure);

}

void generate_histfig_hf_link_prisonerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_prisonerst*>(p_df_structure);

}

void generate_histfig_hf_link_imprisonerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_imprisonerst*>(p_df_structure);

}

void generate_histfig_hf_link_masterst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_masterst*>(p_df_structure);

}

void generate_histfig_hf_link_apprenticest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_apprenticest*>(p_df_structure);

}

void generate_histfig_hf_link_companionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_companionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_histfig_hf_link_former_apprenticest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_former_apprenticest*>(p_df_structure);

}

void generate_histfig_hf_link_former_masterst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_former_masterst*>(p_df_structure);

}

void generate_histfig_hf_link_pet_ownerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_pet_ownerst*>(p_df_structure);

}

void generate_histfig_hf_link_former_spousest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_former_spousest*>(p_df_structure);

}

void generate_histfig_hf_link_deceased_spousest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::histfig_hf_link_deceased_spousest*>(p_df_structure);

}

void generate_resource_allotment_specifier_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_cropst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_cropst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_01"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_01)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_stonest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_stonest*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_metalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_metalst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_woodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_woodst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_armor_bodyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_armor_bodyst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_armor_pantsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_armor_pantsst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_armor_glovesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_armor_glovesst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_armor_bootsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_armor_bootsst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_armor_helmst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_armor_helmst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_clothing_bodyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_clothing_bodyst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_clothing_pantsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_clothing_pantsst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_clothing_glovesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_clothing_glovesst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_clothing_bootsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_clothing_bootsst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_clothing_helmst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_clothing_helmst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_weapon_meleest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_weapon_meleest*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_weapon_rangedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_weapon_rangedst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_ammost_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_ammost*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_anvilst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_anvilst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_gemsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_gemsst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_threadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_threadst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_clothst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_clothst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_leatherst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_leatherst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_quiverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_quiverst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_backpackst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_backpackst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_flaskst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_flaskst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_bagst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_bagst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_tablest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_tablest*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_cabinetst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_cabinetst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_chairst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_chairst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_boxst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_boxst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_bedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_bedst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_craftsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_craftsst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_meatst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_meatst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_bonest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_bonest*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_hornst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_hornst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_shellst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_shellst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_tallowst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_tallowst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_toothst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_toothst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_pearlst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_pearlst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_soapst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_soapst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_extractst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_extractst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type2"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index2"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_cheesest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_cheesest*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_skinst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_skinst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type2"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index2"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_specifier_powderst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_specifier_powderst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_route_stockpile_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::route_stockpile_link*>(p_df_structure);

	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_build_req_choicest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::build_req_choicest*>(p_df_structure);

	p_table["distance"] = reinterpret_cast<uint64_t>(&(df_structure->distance)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_burrow_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::burrow*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fg_color"] = reinterpret_cast<uint64_t>(&(df_structure->fg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bg_color"] = reinterpret_cast<uint64_t>(&(df_structure->bg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_x"] = reinterpret_cast<uint64_t>(&(df_structure->block_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_y"] = reinterpret_cast<uint64_t>(&(df_structure->block_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_z"] = reinterpret_cast<uint64_t>(&(df_structure->block_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["limit_workshops"] = reinterpret_cast<uint64_t>(&(df_structure->limit_workshops)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_hotkey_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_hotkey*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cmd"] = reinterpret_cast<uint64_t>(&(df_structure->cmd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_punishment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::punishment*>(p_df_structure);

	p_table["criminal"] = reinterpret_cast<uint64_t>(&(df_structure->criminal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["officer"] = reinterpret_cast<uint64_t>(&(df_structure->officer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["beating"] = reinterpret_cast<uint64_t>(&(df_structure->beating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hammer_strikes"] = reinterpret_cast<uint64_t>(&(df_structure->hammer_strikes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prison_counter"] = reinterpret_cast<uint64_t>(&(df_structure->prison_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chain"] = reinterpret_cast<uint64_t>(&(df_structure->chain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victims"] = reinterpret_cast<uint64_t>(&(df_structure->victims)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_map_viewport_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::map_viewport*>(p_df_structure);

	p_table["adv_mode"] = reinterpret_cast<uint64_t>(&(df_structure->adv_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_rotation"] = reinterpret_cast<uint64_t>(&(df_structure->map_rotation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_x"] = reinterpret_cast<uint64_t>(&(df_structure->min_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_y"] = reinterpret_cast<uint64_t>(&(df_structure->min_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_x"] = reinterpret_cast<uint64_t>(&(df_structure->max_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_y"] = reinterpret_cast<uint64_t>(&(df_structure->max_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["window_x"] = reinterpret_cast<uint64_t>(&(df_structure->window_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["window_y"] = reinterpret_cast<uint64_t>(&(df_structure->window_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["window_z"] = reinterpret_cast<uint64_t>(&(df_structure->window_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_genes_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_genes*>(p_df_structure);

	p_table["appearance"] = reinterpret_cast<uint64_t>(&(df_structure->appearance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colors"] = reinterpret_cast<uint64_t>(&(df_structure->colors)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_attribute_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_attribute*>(p_df_structure);

	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_value"] = reinterpret_cast<uint64_t>(&(df_structure->max_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["improve_counter"] = reinterpret_cast<uint64_t>(&(df_structure->improve_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unused_counter"] = reinterpret_cast<uint64_t>(&(df_structure->unused_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["soft_demotion"] = reinterpret_cast<uint64_t>(&(df_structure->soft_demotion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rust_counter"] = reinterpret_cast<uint64_t>(&(df_structure->rust_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["demotion_counter"] = reinterpret_cast<uint64_t>(&(df_structure->demotion_counter)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_curse_attr_change_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::curse_attr_change*>(p_df_structure);

	p_table["phys_att_perc"] = reinterpret_cast<uint64_t>(&(df_structure->phys_att_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["phys_att_add"] = reinterpret_cast<uint64_t>(&(df_structure->phys_att_add)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ment_att_perc"] = reinterpret_cast<uint64_t>(&(df_structure->ment_att_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ment_att_add"] = reinterpret_cast<uint64_t>(&(df_structure->ment_att_add)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_item_wrestle_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_item_wrestle*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["self_bp"] = reinterpret_cast<uint64_t>(&(df_structure->self_bp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_bp"] = reinterpret_cast<uint64_t>(&(df_structure->other_bp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item1"] = reinterpret_cast<uint64_t>(&(df_structure->item1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item2"] = reinterpret_cast<uint64_t>(&(df_structure->item2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_item_use_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_item_use*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time_in_use"] = reinterpret_cast<uint64_t>(&(df_structure->time_in_use)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_grown_attached"] = reinterpret_cast<uint64_t>(&(df_structure->has_grown_attached)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["affection_level"] = reinterpret_cast<uint64_t>(&(df_structure->affection_level)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_move_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_move*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer_init"] = reinterpret_cast<uint64_t>(&(df_structure->timer_init)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fatigue"] = reinterpret_cast<uint64_t>(&(df_structure->fatigue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_jump_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_jump*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z1"] = reinterpret_cast<uint64_t>(&(df_structure->z1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z2"] = reinterpret_cast<uint64_t>(&(df_structure->z2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_hold_terrain_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_hold_terrain*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z1"] = reinterpret_cast<uint64_t>(&(df_structure->z1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z2"] = reinterpret_cast<uint64_t>(&(df_structure->z2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x3"] = reinterpret_cast<uint64_t>(&(df_structure->x3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y3"] = reinterpret_cast<uint64_t>(&(df_structure->y3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z3"] = reinterpret_cast<uint64_t>(&(df_structure->z3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fatigue"] = reinterpret_cast<uint64_t>(&(df_structure->fatigue)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_release_terrain_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_release_terrain*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_climb_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_climb*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z1"] = reinterpret_cast<uint64_t>(&(df_structure->z1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z2"] = reinterpret_cast<uint64_t>(&(df_structure->z2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x3"] = reinterpret_cast<uint64_t>(&(df_structure->x3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y3"] = reinterpret_cast<uint64_t>(&(df_structure->y3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z3"] = reinterpret_cast<uint64_t>(&(df_structure->z3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer_init"] = reinterpret_cast<uint64_t>(&(df_structure->timer_init)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fatigue"] = reinterpret_cast<uint64_t>(&(df_structure->fatigue)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_job_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_job*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_unsteady_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_unsteady*>(p_df_structure);

	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_parry_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_parry*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_action"] = reinterpret_cast<uint64_t>(&(df_structure->target_action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parry_item_id"] = reinterpret_cast<uint64_t>(&(df_structure->parry_item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_block_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_block*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_action"] = reinterpret_cast<uint64_t>(&(df_structure->target_action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_item_id"] = reinterpret_cast<uint64_t>(&(df_structure->block_item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_dodge_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_dodge*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z1"] = reinterpret_cast<uint64_t>(&(df_structure->z1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z2"] = reinterpret_cast<uint64_t>(&(df_structure->z2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_recover_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_recover*>(p_df_structure);

	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_stand_up_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_stand_up*>(p_df_structure);

	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_lie_down_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_lie_down*>(p_df_structure);

	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_job2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_job2*>(p_df_structure);

	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_push_object_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_push_object*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z1"] = reinterpret_cast<uint64_t>(&(df_structure->z1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z2"] = reinterpret_cast<uint64_t>(&(df_structure->z2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x3"] = reinterpret_cast<uint64_t>(&(df_structure->x3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y3"] = reinterpret_cast<uint64_t>(&(df_structure->y3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z3"] = reinterpret_cast<uint64_t>(&(df_structure->z3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_suck_blood_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_suck_blood*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_hold_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_hold_item*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z1"] = reinterpret_cast<uint64_t>(&(df_structure->z1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z2"] = reinterpret_cast<uint64_t>(&(df_structure->z2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_release_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_release_item*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_unk_138_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_unk_138*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_coin_debt_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_coin_debt*>(p_df_structure);

	p_table["recipient"] = reinterpret_cast<uint64_t>(&(df_structure->recipient)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount"] = reinterpret_cast<uint64_t>(&(df_structure->amount)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_file_compressorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::file_compressorst*>(p_df_structure);

	p_table["compressed"] = reinterpret_cast<uint64_t>(&(df_structure->compressed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["f"] = reinterpret_cast<uint64_t>(&(df_structure->f)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_buffer"] = reinterpret_cast<uint64_t>(&(df_structure->in_buffer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_buffersize"] = reinterpret_cast<uint64_t>(&(df_structure->in_buffersize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_buffer_amount_loaded"] = reinterpret_cast<uint64_t>(&(df_structure->in_buffer_amount_loaded)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_buffer_position"] = reinterpret_cast<uint64_t>(&(df_structure->in_buffer_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["out_buffer"] = reinterpret_cast<uint64_t>(&(df_structure->out_buffer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["out_buffersize"] = reinterpret_cast<uint64_t>(&(df_structure->out_buffersize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["out_buffer_amount_written"] = reinterpret_cast<uint64_t>(&(df_structure->out_buffer_amount_written)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_layer_object_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::layer_object*>(p_df_structure);

	p_table["enabled"] = reinterpret_cast<uint64_t>(&(df_structure->enabled)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active"] = reinterpret_cast<uint64_t>(&(df_structure->active)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_layer_object_buttonst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::layer_object_buttonst*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_mouse_lclick"] = reinterpret_cast<uint64_t>(&(df_structure->has_mouse_lclick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_mouse_rclick"] = reinterpret_cast<uint64_t>(&(df_structure->has_mouse_rclick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_lclick_x"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_lclick_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_lclick_y"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_lclick_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_rclick_x"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_rclick_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_rclick_y"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_rclick_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_x"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_y"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_x_old"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_x_old)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_y_old"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_y_old)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["handle_mouselbtndown"] = reinterpret_cast<uint64_t>(&(df_structure->handle_mouselbtndown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["handle_mouserbtndown"] = reinterpret_cast<uint64_t>(&(df_structure->handle_mouserbtndown)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_widget_menu_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::widget_menu*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selection"] = reinterpret_cast<uint64_t>(&(df_structure->selection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_displayheight"] = reinterpret_cast<uint64_t>(&(df_structure->last_displayheight)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bleached"] = reinterpret_cast<uint64_t>(&(df_structure->bleached)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_widget_textbox_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::widget_textbox*>(p_df_structure);

	p_table["text"] = reinterpret_cast<uint64_t>(&(df_structure->text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["keep"] = reinterpret_cast<uint64_t>(&(df_structure->keep)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_log_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_log_item*>(p_df_structure);

	p_table["object"] = reinterpret_cast<uint64_t>(&(df_structure->object)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str1"] = reinterpret_cast<uint64_t>(&(df_structure->str1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str2"] = reinterpret_cast<uint64_t>(&(df_structure->str2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str3"] = reinterpret_cast<uint64_t>(&(df_structure->str3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["info"] = reinterpret_cast<uint64_t>(&(df_structure->info)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_gen_param_basest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_gen_param_basest*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_gen_param_seedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_gen_param_seedst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_gen_param_valuest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_gen_param_valuest*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_gen_param_charst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_gen_param_charst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_val"] = reinterpret_cast<uint64_t>(&(df_structure->min_val)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_val"] = reinterpret_cast<uint64_t>(&(df_structure->max_val)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["initial_val"] = reinterpret_cast<uint64_t>(&(df_structure->initial_val)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_gen_param_memberst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_gen_param_memberst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_val"] = reinterpret_cast<uint64_t>(&(df_structure->min_val)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_val"] = reinterpret_cast<uint64_t>(&(df_structure->max_val)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["initial_val"] = reinterpret_cast<uint64_t>(&(df_structure->initial_val)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_scribejob_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::scribejob*>(p_df_structure);

	p_table["idmaybe"] = reinterpret_cast<uint64_t>(&(df_structure->idmaybe)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["written_content_id"] = reinterpret_cast<uint64_t>(&(df_structure->written_content_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_entry_id"] = reinterpret_cast<uint64_t>(&(df_structure->activity_entry_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_reputation_report_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_reputation_report*>(p_df_structure);

	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tickmaybe"] = reinterpret_cast<uint64_t>(&(df_structure->tickmaybe)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_temple_deity_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::temple_deity_data*>(p_df_structure);

	p_table["Deity"] = reinterpret_cast<uint64_t>(&(df_structure->Deity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Religion"] = reinterpret_cast<uint64_t>(&(df_structure->Religion)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_property_ownership_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::property_ownership*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_concrete_property"] = reinterpret_cast<uint64_t>(&(df_structure->is_concrete_property)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["property_index"] = reinterpret_cast<uint64_t>(&(df_structure->property_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->unk_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owner_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->owner_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owner_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->owner_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_owner_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->unk_owner_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_inhabitant_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_inhabitant*>(p_df_structure);

	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["outcast_id"] = reinterpret_cast<uint64_t>(&(df_structure->outcast_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["founder_outcast_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->founder_outcast_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_infost_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_infost*>(p_df_structure);

}

void generate_site_realization_building_info_castle_courtyardst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_castle_courtyardst*>(p_df_structure);

}

void generate_creation_zone_pwg_alterationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creation_zone_pwg_alterationst*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creation_zone_pwg_alteration_campst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creation_zone_pwg_alteration_campst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creation_zone_pwg_alteration_srb_ruinedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creation_zone_pwg_alteration_srb_ruinedst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creation_zone_pwg_alteration_srp_ruinedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creation_zone_pwg_alteration_srp_ruinedst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident_hfid_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident_hfid*>(p_df_structure);

	p_table["hfid"] = reinterpret_cast<uint64_t>(&(df_structure->hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->unk_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_hfid2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_hfid2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mission_campaign_report_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mission_campaign_report*>(p_df_structure);

	p_table["travel_x"] = reinterpret_cast<uint64_t>(&(df_structure->travel_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_y"] = reinterpret_cast<uint64_t>(&(df_structure->travel_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_year"] = reinterpret_cast<uint64_t>(&(df_structure->travel_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->travel_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_count"] = reinterpret_cast<uint64_t>(&(df_structure->travel_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_id"] = reinterpret_cast<uint64_t>(&(df_structure->event_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_year"] = reinterpret_cast<uint64_t>(&(df_structure->event_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->event_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events_count"] = reinterpret_cast<uint64_t>(&(df_structure->events_count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_coord_rect_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::coord_rect*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_unk_a8_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_unk_a8*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_unk_b4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_unk_b4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ocean_wave_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ocean_wave*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_coin_batch__T_image_front_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::coin_batch::T_image_front*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subid"] = reinterpret_cast<uint64_t>(&(df_structure->subid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_coin_batch__T_image_back_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::coin_batch::T_image_back*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subid"] = reinterpret_cast<uint64_t>(&(df_structure->subid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_coin_batch_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::coin_batch*>(p_df_structure);

	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ruler"] = reinterpret_cast<uint64_t>(&(df_structure->ruler)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["image_front"] = reinterpret_cast<uint64_t>(&(df_structure->image_front)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["image_back"] = reinterpret_cast<uint64_t>(&(df_structure->image_back)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_divination_set_roll_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::divination_set_roll*>(p_df_structure);

	p_table["result"] = reinterpret_cast<uint64_t>(&(df_structure->result)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effect_type"] = reinterpret_cast<uint64_t>(&(df_structure->effect_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effect"] = reinterpret_cast<uint64_t>(&(df_structure->effect)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_unk26c678_unk38_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_unk26c678_unk38*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_conversation__T_speech_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::conversation::T_speech*>(p_df_structure);

	p_table["text"] = reinterpret_cast<uint64_t>(&(df_structure->text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speaker"] = reinterpret_cast<uint64_t>(&(df_structure->speaker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fg"] = reinterpret_cast<uint64_t>(&(df_structure->fg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bg"] = reinterpret_cast<uint64_t>(&(df_structure->bg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bright"] = reinterpret_cast<uint64_t>(&(df_structure->bright)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_conversation_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::conversation*>(p_df_structure);

	p_table["conv_title"] = reinterpret_cast<uint64_t>(&(df_structure->conv_title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state"] = reinterpret_cast<uint64_t>(&(df_structure->state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["talk_choices"] = reinterpret_cast<uint64_t>(&(df_structure->talk_choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_48"] = reinterpret_cast<uint64_t>(&(df_structure->unk_48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_54"] = reinterpret_cast<uint64_t>(&(df_structure->unk_54)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_64"] = reinterpret_cast<uint64_t>(&(df_structure->unk_64)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_74"] = reinterpret_cast<uint64_t>(&(df_structure->unk_74)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_78"] = reinterpret_cast<uint64_t>(&(df_structure->unk_78)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_80"] = reinterpret_cast<uint64_t>(&(df_structure->unk_80)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_84"] = reinterpret_cast<uint64_t>(&(df_structure->unk_84)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_94"] = reinterpret_cast<uint64_t>(&(df_structure->unk_94)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location"] = reinterpret_cast<uint64_t>(&(df_structure->location)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_b8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_b8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_bc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_bc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speech"] = reinterpret_cast<uint64_t>(&(df_structure->speech)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_talk_choice__T_unk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::talk_choice::T_unk*>(p_df_structure);

	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_talk_choice_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::talk_choice*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_environment_optionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_optionst*>(p_df_structure);

	p_table["target_pos"] = reinterpret_cast<uint64_t>(&(df_structure->target_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["player_pos"] = reinterpret_cast<uint64_t>(&(df_structure->player_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_environment_place_in_it_containerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_place_in_it_containerst*>(p_df_structure);

	p_table["container"] = reinterpret_cast<uint64_t>(&(df_structure->container)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_environment_ingest_from_containerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_ingest_from_containerst*>(p_df_structure);

	p_table["container"] = reinterpret_cast<uint64_t>(&(df_structure->container)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["food"] = reinterpret_cast<uint64_t>(&(df_structure->food)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_environment_pickup_ignite_vegst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_pickup_ignite_vegst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_environment_ingest_materialst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_ingest_materialst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->mat_state)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_environment_pickup_make_campfirest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_pickup_make_campfirest*>(p_df_structure);

}

void generate_adventure_environment_place_in_bld_containerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_place_in_bld_containerst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_environment_pickup_vermin_eventst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_pickup_vermin_eventst*>(p_df_structure);

	p_table["vermin_idx"] = reinterpret_cast<uint64_t>(&(df_structure->vermin_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_environment_pickup_chop_treest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_pickup_chop_treest*>(p_df_structure);

}

void generate_adventure_environment_unit_suck_bloodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_environment_unit_suck_bloodst*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_optionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_optionst*>(p_df_structure);

	p_table["dest"] = reinterpret_cast<uint64_t>(&(df_structure->dest)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_release_hold_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_release_hold_itemst*>(p_df_structure);

}

void generate_adventure_movement_release_hold_tilest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_release_hold_tilest*>(p_df_structure);

}

void generate_adventure_movement_attack_creaturest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_attack_creaturest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_hold_tilest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_hold_tilest*>(p_df_structure);

	p_table["grab"] = reinterpret_cast<uint64_t>(&(df_structure->grab)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_movest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_movest*>(p_df_structure);

	p_table["unit_path_flags"] = reinterpret_cast<uint64_t>(&(df_structure->unit_path_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_bitfield"] = reinterpret_cast<uint64_t>(&(df_structure->unk_bitfield)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_climbst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_climbst*>(p_df_structure);

	p_table["grab"] = reinterpret_cast<uint64_t>(&(df_structure->grab)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_hold_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_hold_itemst*>(p_df_structure);

	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_building_interactst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_building_interactst*>(p_df_structure);

	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_item_interactst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_item_interactst*>(p_df_structure);

	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_movement_item_interact_guidest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_item_interact_guidest*>(p_df_structure);

}

void generate_adventure_movement_item_interact_ridest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_item_interact_ridest*>(p_df_structure);

}

void generate_adventure_movement_item_interact_pushst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_movement_item_interact_pushst*>(p_df_structure);

}

void generate_adventure_item_interact_heat_from_tilest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_item_interact_heat_from_tilest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_item_interact_fill_from_containerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_item_interact_fill_from_containerst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_item_interact_fill_with_materialst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_item_interact_fill_with_materialst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_item_interact_give_namest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_item_interact_give_namest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_announcements_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::announcements*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unused"] = reinterpret_cast<uint64_t>(&(df_structure->unused)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_report_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::report*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["text"] = reinterpret_cast<uint64_t>(&(df_structure->text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bright"] = reinterpret_cast<uint64_t>(&(df_structure->bright)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["duration"] = reinterpret_cast<uint64_t>(&(df_structure->duration)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["repeat_count"] = reinterpret_cast<uint64_t>(&(df_structure->repeat_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4410_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4410_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4410_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4410_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_pos"] = reinterpret_cast<uint64_t>(&(df_structure->unit_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time"] = reinterpret_cast<uint64_t>(&(df_structure->time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speaker_id"] = reinterpret_cast<uint64_t>(&(df_structure->speaker_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_element_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_element_itemst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_property_transitive_verbst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_property_transitive_verbst*>(p_df_structure);

	p_table["subject"] = reinterpret_cast<uint64_t>(&(df_structure->subject)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["object"] = reinterpret_cast<uint64_t>(&(df_structure->object)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb"] = reinterpret_cast<uint64_t>(&(df_structure->verb)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_property_intransitive_verbst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_property_intransitive_verbst*>(p_df_structure);

	p_table["subject"] = reinterpret_cast<uint64_t>(&(df_structure->subject)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb"] = reinterpret_cast<uint64_t>(&(df_structure->verb)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_chunk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image_chunk*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["images"] = reinterpret_cast<uint64_t>(&(df_structure->images)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_poetic_form_subject_target__T_Histfig_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::poetic_form_subject_target::T_Histfig*>(p_df_structure);

	p_table["subject_histfig"] = reinterpret_cast<uint64_t>(&(df_structure->subject_histfig)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_poetic_form_subject_target__T_Concept_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::poetic_form_subject_target::T_Concept*>(p_df_structure);

	p_table["subject_topic"] = reinterpret_cast<uint64_t>(&(df_structure->subject_topic)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_poetic_form_subject_target_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::poetic_form_subject_target*>(p_df_structure);

	p_table["Histfig"] = reinterpret_cast<uint64_t>(&(df_structure->Histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Concept"] = reinterpret_cast<uint64_t>(&(df_structure->Concept)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_poetic_form_part_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::poetic_form_part*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_min"] = reinterpret_cast<uint64_t>(&(df_structure->count_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_max"] = reinterpret_cast<uint64_t>(&(df_structure->count_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_endings"] = reinterpret_cast<uint64_t>(&(df_structure->line_endings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_feet"] = reinterpret_cast<uint64_t>(&(df_structure->line_feet)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_patterns"] = reinterpret_cast<uint64_t>(&(df_structure->line_patterns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_caesura_positions"] = reinterpret_cast<uint64_t>(&(df_structure->line_caesura_positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_features"] = reinterpret_cast<uint64_t>(&(df_structure->line_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["additional_features"] = reinterpret_cast<uint64_t>(&(df_structure->additional_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["additional_targets"] = reinterpret_cast<uint64_t>(&(df_structure->additional_targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["additional_lines"] = reinterpret_cast<uint64_t>(&(df_structure->additional_lines)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_mood"] = reinterpret_cast<uint64_t>(&(df_structure->line_mood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_subject"] = reinterpret_cast<uint64_t>(&(df_structure->line_subject)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_subject_target"] = reinterpret_cast<uint64_t>(&(df_structure->line_subject_target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["line_action"] = reinterpret_cast<uint64_t>(&(df_structure->line_action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["some_lines_syllables"] = reinterpret_cast<uint64_t>(&(df_structure->some_lines_syllables)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["some_lines_pattern"] = reinterpret_cast<uint64_t>(&(df_structure->some_lines_pattern)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["each_line_caesura_position"] = reinterpret_cast<uint64_t>(&(df_structure->each_line_caesura_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["certain_lines_additional_features"] = reinterpret_cast<uint64_t>(&(df_structure->certain_lines_additional_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mood"] = reinterpret_cast<uint64_t>(&(df_structure->mood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["action"] = reinterpret_cast<uint64_t>(&(df_structure->action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_musical_form_vocals_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::musical_form_vocals*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vocal_components"] = reinterpret_cast<uint64_t>(&(df_structure->vocal_components)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["phrase_lengths"] = reinterpret_cast<uint64_t>(&(df_structure->phrase_lengths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_23"] = reinterpret_cast<uint64_t>(&(df_structure->anon_23)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_musical_form_instruments_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::musical_form_instruments*>(p_df_structure);

	p_table["instrument_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->instrument_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["substitutions"] = reinterpret_cast<uint64_t>(&(df_structure->substitutions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["features"] = reinterpret_cast<uint64_t>(&(df_structure->features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["minimum_required"] = reinterpret_cast<uint64_t>(&(df_structure->minimum_required)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maximum_permitted"] = reinterpret_cast<uint64_t>(&(df_structure->maximum_permitted)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dynamic_style"] = reinterpret_cast<uint64_t>(&(df_structure->dynamic_style)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["overall_style"] = reinterpret_cast<uint64_t>(&(df_structure->overall_style)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_musical_form_melodies_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::musical_form_melodies*>(p_df_structure);

	p_table["style"] = reinterpret_cast<uint64_t>(&(df_structure->style)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["frequency"] = reinterpret_cast<uint64_t>(&(df_structure->frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intervals"] = reinterpret_cast<uint64_t>(&(df_structure->intervals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["features"] = reinterpret_cast<uint64_t>(&(df_structure->features)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_scale__T_unk1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::scale::T_unk1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_scale_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::scale*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_rhythm_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::rhythm*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_rhythm_sub1__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::rhythm_sub1::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["length"] = reinterpret_cast<uint64_t>(&(df_structure->length)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_rhythm_sub1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::rhythm_sub1*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_occupation_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::occupation*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_id"] = reinterpret_cast<uint64_t>(&(df_structure->group_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_def_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_def*>(p_df_structure);

	p_table["code"] = reinterpret_cast<uint64_t>(&(df_structure->code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_type"] = reinterpret_cast<uint64_t>(&(df_structure->building_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->building_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_color"] = reinterpret_cast<uint64_t>(&(df_structure->name_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_color"] = reinterpret_cast<uint64_t>(&(df_structure->tile_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_block"] = reinterpret_cast<uint64_t>(&(df_structure->tile_block)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["build_key"] = reinterpret_cast<uint64_t>(&(df_structure->build_key)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["needs_magma"] = reinterpret_cast<uint64_t>(&(df_structure->needs_magma)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["build_items"] = reinterpret_cast<uint64_t>(&(df_structure->build_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dim_x"] = reinterpret_cast<uint64_t>(&(df_structure->dim_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dim_y"] = reinterpret_cast<uint64_t>(&(df_structure->dim_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workloc_x"] = reinterpret_cast<uint64_t>(&(df_structure->workloc_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workloc_y"] = reinterpret_cast<uint64_t>(&(df_structure->workloc_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["build_labors"] = reinterpret_cast<uint64_t>(&(df_structure->build_labors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["labor_description"] = reinterpret_cast<uint64_t>(&(df_structure->labor_description)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["build_stages"] = reinterpret_cast<uint64_t>(&(df_structure->build_stages)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_def_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_def_item*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_class"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_material_reaction_product"] = reinterpret_cast<uint64_t>(&(df_structure->has_material_reaction_product)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags1"] = reinterpret_cast<uint64_t>(&(df_structure->flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags3"] = reinterpret_cast<uint64_t>(&(df_structure->flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags4"] = reinterpret_cast<uint64_t>(&(df_structure->flags4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags5"] = reinterpret_cast<uint64_t>(&(df_structure->flags5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metal_ore"] = reinterpret_cast<uint64_t>(&(df_structure->metal_ore)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_dimension"] = reinterpret_cast<uint64_t>(&(df_structure->min_dimension)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quantity"] = reinterpret_cast<uint64_t>(&(df_structure->quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_tool_use"] = reinterpret_cast<uint64_t>(&(df_structure->has_tool_use)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_str"] = reinterpret_cast<uint64_t>(&(df_structure->item_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_str"] = reinterpret_cast<uint64_t>(&(df_structure->material_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metal_ore_str"] = reinterpret_cast<uint64_t>(&(df_structure->metal_ore_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_def_workshopst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_def_workshopst*>(p_df_structure);

}

void generate_building_def_furnacest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_def_furnacest*>(p_df_structure);

}

void generate_building__T_job_claim_suppress_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building::T_job_claim_suppress*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building__T_activities_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building::T_activities*>(p_df_structure);

	p_table["activity_id"] = reinterpret_cast<uint64_t>(&(df_structure->activity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_id"] = reinterpret_cast<uint64_t>(&(df_structure->event_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building*>(p_df_structure);

	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["centerx"] = reinterpret_cast<uint64_t>(&(df_structure->centerx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["centery"] = reinterpret_cast<uint64_t>(&(df_structure->centery)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["room"] = reinterpret_cast<uint64_t>(&(df_structure->room)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["age"] = reinterpret_cast<uint64_t>(&(df_structure->age)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jobs"] = reinterpret_cast<uint64_t>(&(df_structure->jobs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_refs"] = reinterpret_cast<uint64_t>(&(df_structure->specific_refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["general_refs"] = reinterpret_cast<uint64_t>(&(df_structure->general_refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_room"] = reinterpret_cast<uint64_t>(&(df_structure->is_room)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["children"] = reinterpret_cast<uint64_t>(&(df_structure->children)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parents"] = reinterpret_cast<uint64_t>(&(df_structure->parents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owner_id"] = reinterpret_cast<uint64_t>(&(df_structure->owner_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owner"] = reinterpret_cast<uint64_t>(&(df_structure->owner)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job_claim_suppress"] = reinterpret_cast<uint64_t>(&(df_structure->job_claim_suppress)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activities"] = reinterpret_cast<uint64_t>(&(df_structure->activities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_data_id"] = reinterpret_cast<uint64_t>(&(df_structure->world_data_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_data_subid"] = reinterpret_cast<uint64_t>(&(df_structure->world_data_subid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_links_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_links*>(p_df_structure);

	p_table["give_to_pile"] = reinterpret_cast<uint64_t>(&(df_structure->give_to_pile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["take_from_pile"] = reinterpret_cast<uint64_t>(&(df_structure->take_from_pile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["give_to_workshop"] = reinterpret_cast<uint64_t>(&(df_structure->give_to_workshop)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["take_from_workshop"] = reinterpret_cast<uint64_t>(&(df_structure->take_from_workshop)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_civzonest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_civzonest*>(p_df_structure);

	p_table["assigned_units"] = reinterpret_cast<uint64_t>(&(df_structure->assigned_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assigned_items"] = reinterpret_cast<uint64_t>(&(df_structure->assigned_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["zone_flags"] = reinterpret_cast<uint64_t>(&(df_structure->zone_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["zone_num"] = reinterpret_cast<uint64_t>(&(df_structure->zone_num)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pit_flags"] = reinterpret_cast<uint64_t>(&(df_structure->pit_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fill_timer"] = reinterpret_cast<uint64_t>(&(df_structure->fill_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hospital"] = reinterpret_cast<uint64_t>(&(df_structure->hospital)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gather_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gather_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4014_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4014_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_actual__T_contained_items_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_actual::T_contained_items*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_mode"] = reinterpret_cast<uint64_t>(&(df_structure->use_mode)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_actual_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_actual*>(p_df_structure);

	p_table["construction_stage"] = reinterpret_cast<uint64_t>(&(df_structure->construction_stage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contained_items"] = reinterpret_cast<uint64_t>(&(df_structure->contained_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["design"] = reinterpret_cast<uint64_t>(&(df_structure->design)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_design_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_design*>(p_df_structure);

	p_table["architect"] = reinterpret_cast<uint64_t>(&(df_structure->architect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["design_skill"] = reinterpret_cast<uint64_t>(&(df_structure->design_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["builder1"] = reinterpret_cast<uint64_t>(&(df_structure->builder1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["build_skill"] = reinterpret_cast<uint64_t>(&(df_structure->build_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["build_timer1"] = reinterpret_cast<uint64_t>(&(df_structure->build_timer1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["builder2"] = reinterpret_cast<uint64_t>(&(df_structure->builder2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["build_timer2"] = reinterpret_cast<uint64_t>(&(df_structure->build_timer2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality1"] = reinterpret_cast<uint64_t>(&(df_structure->quality1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality2"] = reinterpret_cast<uint64_t>(&(df_structure->quality2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hitpoints"] = reinterpret_cast<uint64_t>(&(df_structure->hitpoints)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_hitpoints"] = reinterpret_cast<uint64_t>(&(df_structure->max_hitpoints)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_workshop_profile_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::workshop_profile*>(p_df_structure);

	p_table["permitted_workers"] = reinterpret_cast<uint64_t>(&(df_structure->permitted_workers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_level"] = reinterpret_cast<uint64_t>(&(df_structure->min_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_level"] = reinterpret_cast<uint64_t>(&(df_structure->max_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["links"] = reinterpret_cast<uint64_t>(&(df_structure->links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_general_orders"] = reinterpret_cast<uint64_t>(&(df_structure->max_general_orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_general_orders"] = reinterpret_cast<uint64_t>(&(df_structure->block_general_orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blocked_labors"] = reinterpret_cast<uint64_t>(&(df_structure->blocked_labors)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_furnacest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_furnacest*>(p_df_structure);

	p_table["melt_remainder"] = reinterpret_cast<uint64_t>(&(df_structure->melt_remainder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_108"] = reinterpret_cast<uint64_t>(&(df_structure->unk_108)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profile"] = reinterpret_cast<uint64_t>(&(df_structure->profile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_type"] = reinterpret_cast<uint64_t>(&(df_structure->custom_type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_workshopst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_workshopst*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profile"] = reinterpret_cast<uint64_t>(&(df_structure->profile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["machine"] = reinterpret_cast<uint64_t>(&(df_structure->machine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_type"] = reinterpret_cast<uint64_t>(&(df_structure->custom_type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_animaltrapst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_animaltrapst*>(p_df_structure);

	p_table["bait_type"] = reinterpret_cast<uint64_t>(&(df_structure->bait_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fill_timer"] = reinterpret_cast<uint64_t>(&(df_structure->fill_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_archerytargetst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_archerytargetst*>(p_df_structure);

	p_table["archery_direction"] = reinterpret_cast<uint64_t>(&(df_structure->archery_direction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_armorstandst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_armorstandst*>(p_df_structure);

	p_table["unk_c0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_squad"] = reinterpret_cast<uint64_t>(&(df_structure->specific_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_position"] = reinterpret_cast<uint64_t>(&(df_structure->specific_position)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_bars_verticalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_bars_verticalst*>(p_df_structure);

	p_table["gate_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gate_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_bars_floorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_bars_floorst*>(p_df_structure);

	p_table["gate_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gate_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_bedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_bedst*>(p_df_structure);

	p_table["bed_flags"] = reinterpret_cast<uint64_t>(&(df_structure->bed_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_squad"] = reinterpret_cast<uint64_t>(&(df_structure->specific_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_position"] = reinterpret_cast<uint64_t>(&(df_structure->specific_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["users"] = reinterpret_cast<uint64_t>(&(df_structure->users)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_bookcasest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_bookcasest*>(p_df_structure);

}

void generate_building_boxst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_boxst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_squad"] = reinterpret_cast<uint64_t>(&(df_structure->specific_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_position"] = reinterpret_cast<uint64_t>(&(df_structure->specific_position)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_bridgest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_bridgest*>(p_df_structure);

	p_table["gate_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gate_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["direction"] = reinterpret_cast<uint64_t>(&(df_structure->direction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_amount"] = reinterpret_cast<uint64_t>(&(df_structure->material_amount)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_cabinetst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_cabinetst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_squad"] = reinterpret_cast<uint64_t>(&(df_structure->specific_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_position"] = reinterpret_cast<uint64_t>(&(df_structure->specific_position)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_cagest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_cagest*>(p_df_structure);

	p_table["assigned_units"] = reinterpret_cast<uint64_t>(&(df_structure->assigned_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assigned_items"] = reinterpret_cast<uint64_t>(&(df_structure->assigned_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cage_flags"] = reinterpret_cast<uint64_t>(&(df_structure->cage_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fill_timer"] = reinterpret_cast<uint64_t>(&(df_structure->fill_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_chainst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_chainst*>(p_df_structure);

	p_table["assigned"] = reinterpret_cast<uint64_t>(&(df_structure->assigned)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chained"] = reinterpret_cast<uint64_t>(&(df_structure->chained)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chain_flags"] = reinterpret_cast<uint64_t>(&(df_structure->chain_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_chairst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_chairst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["users"] = reinterpret_cast<uint64_t>(&(df_structure->users)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_coffinst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_coffinst*>(p_df_structure);

	p_table["burial_mode"] = reinterpret_cast<uint64_t>(&(df_structure->burial_mode)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_constructionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_constructionst*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_display_furniturest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_display_furniturest*>(p_df_structure);

	p_table["displayed_items"] = reinterpret_cast<uint64_t>(&(df_structure->displayed_items)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_doorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_doorst*>(p_df_structure);

	p_table["door_flags"] = reinterpret_cast<uint64_t>(&(df_structure->door_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["close_timer"] = reinterpret_cast<uint64_t>(&(df_structure->close_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_farmplotst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_farmplotst*>(p_df_structure);

	p_table["plant_id"] = reinterpret_cast<uint64_t>(&(df_structure->plant_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_amount"] = reinterpret_cast<uint64_t>(&(df_structure->material_amount)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seasonal_fertilize"] = reinterpret_cast<uint64_t>(&(df_structure->seasonal_fertilize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["current_fertilization"] = reinterpret_cast<uint64_t>(&(df_structure->current_fertilization)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_fertilization"] = reinterpret_cast<uint64_t>(&(df_structure->max_fertilization)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["terrain_purge_timer"] = reinterpret_cast<uint64_t>(&(df_structure->terrain_purge_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_floodgatest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_floodgatest*>(p_df_structure);

	p_table["gate_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gate_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_grate_floorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_grate_floorst*>(p_df_structure);

	p_table["gate_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gate_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_grate_wallst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_grate_wallst*>(p_df_structure);

	p_table["gate_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gate_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_hatchst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_hatchst*>(p_df_structure);

	p_table["door_flags"] = reinterpret_cast<uint64_t>(&(df_structure->door_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["close_timer"] = reinterpret_cast<uint64_t>(&(df_structure->close_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_hivest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_hivest*>(p_df_structure);

	p_table["hive_flags"] = reinterpret_cast<uint64_t>(&(df_structure->hive_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["split_timer"] = reinterpret_cast<uint64_t>(&(df_structure->split_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_timer"] = reinterpret_cast<uint64_t>(&(df_structure->activity_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["install_timer"] = reinterpret_cast<uint64_t>(&(df_structure->install_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gather_timer"] = reinterpret_cast<uint64_t>(&(df_structure->gather_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_instrumentst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_instrumentst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_nestst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_nestst*>(p_df_structure);

}

void generate_building_nest_boxst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_nest_boxst*>(p_df_structure);

	p_table["claimed_by"] = reinterpret_cast<uint64_t>(&(df_structure->claimed_by)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_offering_placest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_offering_placest*>(p_df_structure);

}

void generate_building_roadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_roadst*>(p_df_structure);

}

void generate_building_road_dirtst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_road_dirtst*>(p_df_structure);

	p_table["material_amount"] = reinterpret_cast<uint64_t>(&(df_structure->material_amount)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_road_pavedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_road_pavedst*>(p_df_structure);

	p_table["material_amount"] = reinterpret_cast<uint64_t>(&(df_structure->material_amount)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["terrain_purge_timer"] = reinterpret_cast<uint64_t>(&(df_structure->terrain_purge_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_shopst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_shopst*>(p_df_structure);

	p_table["owner"] = reinterpret_cast<uint64_t>(&(df_structure->owner)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shop_flags"] = reinterpret_cast<uint64_t>(&(df_structure->shop_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_siegeenginest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_siegeenginest*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["facing"] = reinterpret_cast<uint64_t>(&(df_structure->facing)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["action"] = reinterpret_cast<uint64_t>(&(df_structure->action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fire_timer"] = reinterpret_cast<uint64_t>(&(df_structure->fire_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fill_timer"] = reinterpret_cast<uint64_t>(&(df_structure->fill_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_slabst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_slabst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_statuest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_statuest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_supportst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_supportst*>(p_df_structure);

	p_table["support_flags"] = reinterpret_cast<uint64_t>(&(df_structure->support_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_tablest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_tablest*>(p_df_structure);

	p_table["table_flags"] = reinterpret_cast<uint64_t>(&(df_structure->table_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["users"] = reinterpret_cast<uint64_t>(&(df_structure->users)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_traction_benchst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_traction_benchst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["users"] = reinterpret_cast<uint64_t>(&(df_structure->users)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_tradedepotst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_tradedepotst*>(p_df_structure);

	p_table["trade_flags"] = reinterpret_cast<uint64_t>(&(df_structure->trade_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accessible"] = reinterpret_cast<uint64_t>(&(df_structure->accessible)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_trapst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_trapst*>(p_df_structure);

	p_table["trap_type"] = reinterpret_cast<uint64_t>(&(df_structure->trap_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state"] = reinterpret_cast<uint64_t>(&(df_structure->state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ready_timeout"] = reinterpret_cast<uint64_t>(&(df_structure->ready_timeout)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fill_timer"] = reinterpret_cast<uint64_t>(&(df_structure->fill_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stop_flags"] = reinterpret_cast<uint64_t>(&(df_structure->stop_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["linked_mechanisms"] = reinterpret_cast<uint64_t>(&(df_structure->linked_mechanisms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["observed_by_civs"] = reinterpret_cast<uint64_t>(&(df_structure->observed_by_civs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profile"] = reinterpret_cast<uint64_t>(&(df_structure->profile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plate_info"] = reinterpret_cast<uint64_t>(&(df_structure->plate_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["friction"] = reinterpret_cast<uint64_t>(&(df_structure->friction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_dump"] = reinterpret_cast<uint64_t>(&(df_structure->use_dump)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dump_x_shift"] = reinterpret_cast<uint64_t>(&(df_structure->dump_x_shift)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dump_y_shift"] = reinterpret_cast<uint64_t>(&(df_structure->dump_y_shift)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stop_trigger_timer"] = reinterpret_cast<uint64_t>(&(df_structure->stop_trigger_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_wagonst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_wagonst*>(p_df_structure);

}

void generate_building_weaponst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_weaponst*>(p_df_structure);

	p_table["gate_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gate_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_squad_use_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_squad_use*>(p_df_structure);

	p_table["squad_id"] = reinterpret_cast<uint64_t>(&(df_structure->squad_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_weaponrackst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_weaponrackst*>(p_df_structure);

	p_table["unk_c0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_squad"] = reinterpret_cast<uint64_t>(&(df_structure->specific_squad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_wellst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_wellst*>(p_df_structure);

	p_table["well_flags"] = reinterpret_cast<uint64_t>(&(df_structure->well_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bucket_z"] = reinterpret_cast<uint64_t>(&(df_structure->bucket_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bucket_timer"] = reinterpret_cast<uint64_t>(&(df_structure->bucket_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["check_water_timer"] = reinterpret_cast<uint64_t>(&(df_structure->check_water_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_windowst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_windowst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_window_glassst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_window_glassst*>(p_df_structure);

}

void generate_building_window_gemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_window_gemst*>(p_df_structure);

}

void generate_body_part_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::body_part_raw*>(p_df_structure);

	p_table["token"] = reinterpret_cast<uint64_t>(&(df_structure->token)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category"] = reinterpret_cast<uint64_t>(&(df_structure->category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["con_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->con_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layers"] = reinterpret_cast<uint64_t>(&(df_structure->layers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_total"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_base"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_base)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_fat"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_fat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_muscle"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_muscle)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relsize"] = reinterpret_cast<uint64_t>(&(df_structure->relsize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number"] = reinterpret_cast<uint64_t>(&(df_structure->number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7b"] = reinterpret_cast<uint64_t>(&(df_structure->unk7b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_singular"] = reinterpret_cast<uint64_t>(&(df_structure->name_singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_code"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_relation_coverage"] = reinterpret_cast<uint64_t>(&(df_structure->bp_relation_coverage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_temp"] = reinterpret_cast<uint64_t>(&(df_structure->min_temp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_temp"] = reinterpret_cast<uint64_t>(&(df_structure->max_temp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temp_factor"] = reinterpret_cast<uint64_t>(&(df_structure->temp_factor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["numbered_idx"] = reinterpret_cast<uint64_t>(&(df_structure->numbered_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["insulation_fat"] = reinterpret_cast<uint64_t>(&(df_structure->insulation_fat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["insulation_muscle"] = reinterpret_cast<uint64_t>(&(df_structure->insulation_muscle)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["insulation_base"] = reinterpret_cast<uint64_t>(&(df_structure->insulation_base)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["clothing_item_id"] = reinterpret_cast<uint64_t>(&(df_structure->clothing_item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_body_appearance_modifier_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::body_appearance_modifier*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ranges"] = reinterpret_cast<uint64_t>(&(df_structure->ranges)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desc_range"] = reinterpret_cast<uint64_t>(&(df_structure->desc_range)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_rate"] = reinterpret_cast<uint64_t>(&(df_structure->growth_rate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_interval"] = reinterpret_cast<uint64_t>(&(df_structure->growth_interval)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_min"] = reinterpret_cast<uint64_t>(&(df_structure->growth_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_max"] = reinterpret_cast<uint64_t>(&(df_structure->growth_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_start"] = reinterpret_cast<uint64_t>(&(df_structure->growth_start)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_end"] = reinterpret_cast<uint64_t>(&(df_structure->growth_end)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["importance"] = reinterpret_cast<uint64_t>(&(df_structure->importance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noun"] = reinterpret_cast<uint64_t>(&(df_structure->noun)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id2"] = reinterpret_cast<uint64_t>(&(df_structure->id2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_bp_appearance_modifier_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::bp_appearance_modifier*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ranges"] = reinterpret_cast<uint64_t>(&(df_structure->ranges)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desc_range"] = reinterpret_cast<uint64_t>(&(df_structure->desc_range)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_rate"] = reinterpret_cast<uint64_t>(&(df_structure->growth_rate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_interval"] = reinterpret_cast<uint64_t>(&(df_structure->growth_interval)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_min"] = reinterpret_cast<uint64_t>(&(df_structure->growth_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_max"] = reinterpret_cast<uint64_t>(&(df_structure->growth_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_start"] = reinterpret_cast<uint64_t>(&(df_structure->growth_start)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growth_end"] = reinterpret_cast<uint64_t>(&(df_structure->growth_end)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["importance"] = reinterpret_cast<uint64_t>(&(df_structure->importance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noun"] = reinterpret_cast<uint64_t>(&(df_structure->noun)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["single_plural"] = reinterpret_cast<uint64_t>(&(df_structure->single_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id1"] = reinterpret_cast<uint64_t>(&(df_structure->id1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_parts"] = reinterpret_cast<uint64_t>(&(df_structure->body_parts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_layer"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_clothing_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_clothing_item*>(p_df_structure);

	p_table["body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["permit"] = reinterpret_cast<uint64_t>(&(df_structure->permit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_attack_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_attack*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_3rd"] = reinterpret_cast<uint64_t>(&(df_structure->verb_3rd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_2nd"] = reinterpret_cast<uint64_t>(&(df_structure->verb_2nd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_type"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_temp_mat"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_temp_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_min"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_max"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contact_perc"] = reinterpret_cast<uint64_t>(&(df_structure->contact_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["penetration_perc"] = reinterpret_cast<uint64_t>(&(df_structure->penetration_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_idx"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill"] = reinterpret_cast<uint64_t>(&(df_structure->skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["velocity_modifier"] = reinterpret_cast<uint64_t>(&(df_structure->velocity_modifier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_interaction_tmp_name"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_interaction_tmp_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specialattack_interaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->specialattack_interaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction*>(p_df_structure);

	p_table["bp_required_type"] = reinterpret_cast<uint64_t>(&(df_structure->bp_required_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_required_name"] = reinterpret_cast<uint64_t>(&(df_structure->bp_required_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_str0"] = reinterpret_cast<uint64_t>(&(df_structure->material_str0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_str1"] = reinterpret_cast<uint64_t>(&(df_structure->material_str1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_str2"] = reinterpret_cast<uint64_t>(&(df_structure->material_str2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_breath"] = reinterpret_cast<uint64_t>(&(df_structure->material_breath)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_2nd"] = reinterpret_cast<uint64_t>(&(df_structure->verb_2nd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_3rd"] = reinterpret_cast<uint64_t>(&(df_structure->verb_3rd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_mutual"] = reinterpret_cast<uint64_t>(&(df_structure->verb_mutual)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_reverse_2nd"] = reinterpret_cast<uint64_t>(&(df_structure->verb_reverse_2nd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb_reverse_3rd"] = reinterpret_cast<uint64_t>(&(df_structure->verb_reverse_3rd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_verb_2nd"] = reinterpret_cast<uint64_t>(&(df_structure->target_verb_2nd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_verb_3rd"] = reinterpret_cast<uint64_t>(&(df_structure->target_verb_3rd)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_type"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_id"] = reinterpret_cast<uint64_t>(&(df_structure->type_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["usage_hint"] = reinterpret_cast<uint64_t>(&(df_structure->usage_hint)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_hint"] = reinterpret_cast<uint64_t>(&(df_structure->location_hint)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_flags"] = reinterpret_cast<uint64_t>(&(df_structure->target_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_ranges"] = reinterpret_cast<uint64_t>(&(df_structure->target_ranges)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_target_numbers"] = reinterpret_cast<uint64_t>(&(df_structure->max_target_numbers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verbal_speeches"] = reinterpret_cast<uint64_t>(&(df_structure->verbal_speeches)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adv_name"] = reinterpret_cast<uint64_t>(&(df_structure->adv_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wait_period"] = reinterpret_cast<uint64_t>(&(df_structure->wait_period)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_body_info__T_interactions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_body_info::T_interactions*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction"] = reinterpret_cast<uint64_t>(&(df_structure->interaction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_body_info__T_extra_butcher_objects_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_body_info::T_extra_butcher_objects*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_body_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_body_info*>(p_df_structure);

	p_table["body_parts"] = reinterpret_cast<uint64_t>(&(df_structure->body_parts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacks"] = reinterpret_cast<uint64_t>(&(df_structure->attacks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interactions"] = reinterpret_cast<uint64_t>(&(df_structure->interactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extra_butcher_objects"] = reinterpret_cast<uint64_t>(&(df_structure->extra_butcher_objects)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_relsize"] = reinterpret_cast<uint64_t>(&(df_structure->total_relsize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_part"] = reinterpret_cast<uint64_t>(&(df_structure->layer_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["numbered_masks"] = reinterpret_cast<uint64_t>(&(df_structure->numbered_masks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_nonsolid"] = reinterpret_cast<uint64_t>(&(df_structure->layer_nonsolid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nonsolid_layers"] = reinterpret_cast<uint64_t>(&(df_structure->nonsolid_layers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gait_info"] = reinterpret_cast<uint64_t>(&(df_structure->gait_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["materials"] = reinterpret_cast<uint64_t>(&(df_structure->materials)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_total"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_base"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_base)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_fat"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_fat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_muscle"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_muscle)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_misc_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_misc*>(p_df_structure);

	p_table["litter_size_min"] = reinterpret_cast<uint64_t>(&(df_structure->litter_size_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["litter_size_max"] = reinterpret_cast<uint64_t>(&(df_structure->litter_size_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["penetratepower"] = reinterpret_cast<uint64_t>(&(df_structure->penetratepower)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vermin_bite_chance"] = reinterpret_cast<uint64_t>(&(df_structure->vermin_bite_chance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grasstrample"] = reinterpret_cast<uint64_t>(&(df_structure->grasstrample)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildingdestroyer"] = reinterpret_cast<uint64_t>(&(df_structure->buildingdestroyer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["itemcorpse_itemtype"] = reinterpret_cast<uint64_t>(&(df_structure->itemcorpse_itemtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["itemcorpse_itemsubtype"] = reinterpret_cast<uint64_t>(&(df_structure->itemcorpse_itemsubtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["itemcorpse_materialtype"] = reinterpret_cast<uint64_t>(&(df_structure->itemcorpse_materialtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["itemcorpse_materialindex"] = reinterpret_cast<uint64_t>(&(df_structure->itemcorpse_materialindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["itemcorpse_quality"] = reinterpret_cast<uint64_t>(&(df_structure->itemcorpse_quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["remains_color"] = reinterpret_cast<uint64_t>(&(df_structure->remains_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["difficulty"] = reinterpret_cast<uint64_t>(&(df_structure->difficulty)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_glowcolor"] = reinterpret_cast<uint64_t>(&(df_structure->caste_glowcolor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["beach_frequency"] = reinterpret_cast<uint64_t>(&(df_structure->beach_frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["clutch_size_min"] = reinterpret_cast<uint64_t>(&(df_structure->clutch_size_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["clutch_size_max"] = reinterpret_cast<uint64_t>(&(df_structure->clutch_size_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vision_arc_min"] = reinterpret_cast<uint64_t>(&(df_structure->vision_arc_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vision_arc_max"] = reinterpret_cast<uint64_t>(&(df_structure->vision_arc_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed"] = reinterpret_cast<uint64_t>(&(df_structure->speed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["modvalue"] = reinterpret_cast<uint64_t>(&(df_structure->modvalue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["petvalue"] = reinterpret_cast<uint64_t>(&(df_structure->petvalue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["milkable"] = reinterpret_cast<uint64_t>(&(df_structure->milkable)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["viewrange"] = reinterpret_cast<uint64_t>(&(df_structure->viewrange)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maxage_min"] = reinterpret_cast<uint64_t>(&(df_structure->maxage_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maxage_max"] = reinterpret_cast<uint64_t>(&(df_structure->maxage_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["baby_age"] = reinterpret_cast<uint64_t>(&(df_structure->baby_age)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["child_age"] = reinterpret_cast<uint64_t>(&(df_structure->child_age)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["swim_speed"] = reinterpret_cast<uint64_t>(&(df_structure->swim_speed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trade_capacity"] = reinterpret_cast<uint64_t>(&(df_structure->trade_capacity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pop_ratio"] = reinterpret_cast<uint64_t>(&(df_structure->pop_ratio)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adult_size"] = reinterpret_cast<uint64_t>(&(df_structure->adult_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bone_mat"] = reinterpret_cast<uint64_t>(&(df_structure->bone_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bone_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->bone_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fish_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->fish_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->egg_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_trigger"] = reinterpret_cast<uint64_t>(&(df_structure->attack_trigger)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_size"] = reinterpret_cast<uint64_t>(&(df_structure->egg_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grazer"] = reinterpret_cast<uint64_t>(&(df_structure->grazer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["petvalue_divisor"] = reinterpret_cast<uint64_t>(&(df_structure->petvalue_divisor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prone_to_rage"] = reinterpret_cast<uint64_t>(&(df_structure->prone_to_rage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_personality_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_personality*>(p_df_structure);

	p_table["a"] = reinterpret_cast<uint64_t>(&(df_structure->a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["b"] = reinterpret_cast<uint64_t>(&(df_structure->b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["c"] = reinterpret_cast<uint64_t>(&(df_structure->c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_attributes_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_attributes*>(p_df_structure);

	p_table["phys_att_range"] = reinterpret_cast<uint64_t>(&(df_structure->phys_att_range)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ment_att_range"] = reinterpret_cast<uint64_t>(&(df_structure->ment_att_range)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["phys_att_rates"] = reinterpret_cast<uint64_t>(&(df_structure->phys_att_rates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ment_att_rates"] = reinterpret_cast<uint64_t>(&(df_structure->ment_att_rates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["phys_att_cap_perc"] = reinterpret_cast<uint64_t>(&(df_structure->phys_att_cap_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ment_att_cap_perc"] = reinterpret_cast<uint64_t>(&(df_structure->ment_att_cap_perc)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_bp_appearance_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_bp_appearance*>(p_df_structure);

	p_table["modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["modifier_idx"] = reinterpret_cast<uint64_t>(&(df_structure->modifier_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["part_idx"] = reinterpret_cast<uint64_t>(&(df_structure->part_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["style_part_idx"] = reinterpret_cast<uint64_t>(&(df_structure->style_part_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["style_layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->style_layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["style_list_idx"] = reinterpret_cast<uint64_t>(&(df_structure->style_list_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_shearable_tissue_layer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_shearable_tissue_layer*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["length"] = reinterpret_cast<uint64_t>(&(df_structure->length)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["part_idx"] = reinterpret_cast<uint64_t>(&(df_structure->part_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_modifiers_idx"] = reinterpret_cast<uint64_t>(&(df_structure->bp_modifiers_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_caste_profession_name_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_caste_profession_name*>(p_df_structure);

	p_table["singular"] = reinterpret_cast<uint64_t>(&(df_structure->singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plural"] = reinterpret_cast<uint64_t>(&(df_structure->plural)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_extracts_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_extracts*>(p_df_structure);

	p_table["extract_mat"] = reinterpret_cast<uint64_t>(&(df_structure->extract_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extract_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->extract_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extract_str"] = reinterpret_cast<uint64_t>(&(df_structure->extract_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["milkable_mat"] = reinterpret_cast<uint64_t>(&(df_structure->milkable_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["milkable_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->milkable_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["milkable_str"] = reinterpret_cast<uint64_t>(&(df_structure->milkable_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["webber_mat"] = reinterpret_cast<uint64_t>(&(df_structure->webber_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["webber_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->webber_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["webber_str"] = reinterpret_cast<uint64_t>(&(df_structure->webber_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vermin_bite_mat"] = reinterpret_cast<uint64_t>(&(df_structure->vermin_bite_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vermin_bite_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->vermin_bite_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vermin_bite_chance"] = reinterpret_cast<uint64_t>(&(df_structure->vermin_bite_chance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vermin_bite_str"] = reinterpret_cast<uint64_t>(&(df_structure->vermin_bite_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tendons_mat"] = reinterpret_cast<uint64_t>(&(df_structure->tendons_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tendons_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->tendons_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tendons_str"] = reinterpret_cast<uint64_t>(&(df_structure->tendons_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tendons_heal"] = reinterpret_cast<uint64_t>(&(df_structure->tendons_heal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ligaments_mat"] = reinterpret_cast<uint64_t>(&(df_structure->ligaments_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ligaments_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->ligaments_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ligaments_str"] = reinterpret_cast<uint64_t>(&(df_structure->ligaments_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ligaments_heal"] = reinterpret_cast<uint64_t>(&(df_structure->ligaments_heal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blood_state"] = reinterpret_cast<uint64_t>(&(df_structure->blood_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blood_mat"] = reinterpret_cast<uint64_t>(&(df_structure->blood_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blood_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->blood_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blood_str"] = reinterpret_cast<uint64_t>(&(df_structure->blood_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pus_state"] = reinterpret_cast<uint64_t>(&(df_structure->pus_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pus_mat"] = reinterpret_cast<uint64_t>(&(df_structure->pus_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pus_matidx"] = reinterpret_cast<uint64_t>(&(df_structure->pus_matidx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pus_str"] = reinterpret_cast<uint64_t>(&(df_structure->pus_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_material_mattype"] = reinterpret_cast<uint64_t>(&(df_structure->egg_material_mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_material_matindex"] = reinterpret_cast<uint64_t>(&(df_structure->egg_material_matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_material_str"] = reinterpret_cast<uint64_t>(&(df_structure->egg_material_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lays_unusual_eggs_itemtype"] = reinterpret_cast<uint64_t>(&(df_structure->lays_unusual_eggs_itemtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lays_unusual_eggs_itemsubtype"] = reinterpret_cast<uint64_t>(&(df_structure->lays_unusual_eggs_itemsubtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lays_unusual_eggs_mattype"] = reinterpret_cast<uint64_t>(&(df_structure->lays_unusual_eggs_mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lays_unusual_eggs_matindex"] = reinterpret_cast<uint64_t>(&(df_structure->lays_unusual_eggs_matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lays_unusual_eggs_str"] = reinterpret_cast<uint64_t>(&(df_structure->lays_unusual_eggs_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_secretion_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_secretion*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type_str"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index_str"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_id"] = reinterpret_cast<uint64_t>(&(df_structure->layer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cause"] = reinterpret_cast<uint64_t>(&(df_structure->cause)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_unknown2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_unknown2*>(p_df_structure);

	p_table["unk_v4201_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4201_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gobble_vermin_class"] = reinterpret_cast<uint64_t>(&(df_structure->gobble_vermin_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gobble_vermin_creature_1"] = reinterpret_cast<uint64_t>(&(df_structure->gobble_vermin_creature_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gobble_vermin_creature_2"] = reinterpret_cast<uint64_t>(&(df_structure->gobble_vermin_creature_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["infect_all"] = reinterpret_cast<uint64_t>(&(df_structure->infect_all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["infect_local"] = reinterpret_cast<uint64_t>(&(df_structure->infect_local)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk23f"] = reinterpret_cast<uint64_t>(&(df_structure->unk23f)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk23g"] = reinterpret_cast<uint64_t>(&(df_structure->unk23g)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk24_flags"] = reinterpret_cast<uint64_t>(&(df_structure->unk24_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk25_flags"] = reinterpret_cast<uint64_t>(&(df_structure->unk25_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_sizes"] = reinterpret_cast<uint64_t>(&(df_structure->armor_sizes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_sizes"] = reinterpret_cast<uint64_t>(&(df_structure->pants_sizes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_size"] = reinterpret_cast<uint64_t>(&(df_structure->helm_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shield_sizes"] = reinterpret_cast<uint64_t>(&(df_structure->shield_sizes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_sizes"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_sizes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_sizes"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_sizes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["materials"] = reinterpret_cast<uint64_t>(&(df_structure->materials)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2f20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2f20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2f30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2f30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2f40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2f40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2f50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2f50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_lair_hunter_speech_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_lair_hunter_speech*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_unk29_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_unk29*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_sound_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_sound*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caption"] = reinterpret_cast<uint64_t>(&(df_structure->caption)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caste_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caste_raw*>(p_df_structure);

	p_table["caste_id"] = reinterpret_cast<uint64_t>(&(df_structure->caste_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_name"] = reinterpret_cast<uint64_t>(&(df_structure->caste_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vermin_bite_txt"] = reinterpret_cast<uint64_t>(&(df_structure->vermin_bite_txt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gnawer_txt"] = reinterpret_cast<uint64_t>(&(df_structure->gnawer_txt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["baby_name"] = reinterpret_cast<uint64_t>(&(df_structure->baby_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["child_name"] = reinterpret_cast<uint64_t>(&(df_structure->child_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["itemcorpse_str"] = reinterpret_cast<uint64_t>(&(df_structure->itemcorpse_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["remains"] = reinterpret_cast<uint64_t>(&(df_structure->remains)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["description"] = reinterpret_cast<uint64_t>(&(df_structure->description)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mannerisms"] = reinterpret_cast<uint64_t>(&(df_structure->mannerisms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_tile"] = reinterpret_cast<uint64_t>(&(df_structure->caste_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_soldier_tile"] = reinterpret_cast<uint64_t>(&(df_structure->caste_soldier_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_alttile"] = reinterpret_cast<uint64_t>(&(df_structure->caste_alttile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_soldier_alttile"] = reinterpret_cast<uint64_t>(&(df_structure->caste_soldier_alttile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_glowtile"] = reinterpret_cast<uint64_t>(&(df_structure->caste_glowtile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["homeotherm"] = reinterpret_cast<uint64_t>(&(df_structure->homeotherm)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_temp"] = reinterpret_cast<uint64_t>(&(df_structure->min_temp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_temp"] = reinterpret_cast<uint64_t>(&(df_structure->max_temp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fixed_temp"] = reinterpret_cast<uint64_t>(&(df_structure->fixed_temp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_color"] = reinterpret_cast<uint64_t>(&(df_structure->caste_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["misc"] = reinterpret_cast<uint64_t>(&(df_structure->misc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["personality"] = reinterpret_cast<uint64_t>(&(df_structure->personality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_info"] = reinterpret_cast<uint64_t>(&(df_structure->body_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_speech_1"] = reinterpret_cast<uint64_t>(&(df_structure->caste_speech_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_speech_2"] = reinterpret_cast<uint64_t>(&(df_structure->caste_speech_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_rates"] = reinterpret_cast<uint64_t>(&(df_structure->skill_rates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attributes"] = reinterpret_cast<uint64_t>(&(df_structure->attributes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gender"] = reinterpret_cast<uint64_t>(&(df_structure->gender)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orientation_male"] = reinterpret_cast<uint64_t>(&(df_structure->orientation_male)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orientation_female"] = reinterpret_cast<uint64_t>(&(df_structure->orientation_female)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_size_1"] = reinterpret_cast<uint64_t>(&(df_structure->body_size_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_size_2"] = reinterpret_cast<uint64_t>(&(df_structure->body_size_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_appearance_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->body_appearance_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_appearance"] = reinterpret_cast<uint64_t>(&(df_structure->bp_appearance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->color_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_styles"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_styles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shearable_tissue_layer"] = reinterpret_cast<uint64_t>(&(df_structure->shearable_tissue_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk16a"] = reinterpret_cast<uint64_t>(&(df_structure->unk16a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk16b"] = reinterpret_cast<uint64_t>(&(df_structure->unk16b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appearance_gene_count"] = reinterpret_cast<uint64_t>(&(df_structure->appearance_gene_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color_gene_count"] = reinterpret_cast<uint64_t>(&(df_structure->color_gene_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["natural_skill_id"] = reinterpret_cast<uint64_t>(&(df_structure->natural_skill_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["natural_skill_exp"] = reinterpret_cast<uint64_t>(&(df_structure->natural_skill_exp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["natural_skill_lvl"] = reinterpret_cast<uint64_t>(&(df_structure->natural_skill_lvl)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_profession_name"] = reinterpret_cast<uint64_t>(&(df_structure->caste_profession_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extracts"] = reinterpret_cast<uint64_t>(&(df_structure->extracts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["secretion"] = reinterpret_cast<uint64_t>(&(df_structure->secretion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_class"] = reinterpret_cast<uint64_t>(&(df_structure->creature_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown2"] = reinterpret_cast<uint64_t>(&(df_structure->unknown2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["habit_num"] = reinterpret_cast<uint64_t>(&(df_structure->habit_num)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["habit_1"] = reinterpret_cast<uint64_t>(&(df_structure->habit_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["habit_2"] = reinterpret_cast<uint64_t>(&(df_structure->habit_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lair_1"] = reinterpret_cast<uint64_t>(&(df_structure->lair_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lair_2"] = reinterpret_cast<uint64_t>(&(df_structure->lair_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lair_characteristic_1"] = reinterpret_cast<uint64_t>(&(df_structure->lair_characteristic_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lair_characteristic_2"] = reinterpret_cast<uint64_t>(&(df_structure->lair_characteristic_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lair_hunter_speech"] = reinterpret_cast<uint64_t>(&(df_structure->lair_hunter_speech)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk29"] = reinterpret_cast<uint64_t>(&(df_structure->unk29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_food"] = reinterpret_cast<uint64_t>(&(df_structure->specific_food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sound"] = reinterpret_cast<uint64_t>(&(df_structure->sound)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sound_alert"] = reinterpret_cast<uint64_t>(&(df_structure->sound_alert)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sound_peaceful_intermittent"] = reinterpret_cast<uint64_t>(&(df_structure->sound_peaceful_intermittent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["smell_trigger"] = reinterpret_cast<uint64_t>(&(df_structure->smell_trigger)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["odor_level"] = reinterpret_cast<uint64_t>(&(df_structure->odor_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["odor_string"] = reinterpret_cast<uint64_t>(&(df_structure->odor_string)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["low_light_vision"] = reinterpret_cast<uint64_t>(&(df_structure->low_light_vision)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sense_creature_class_1"] = reinterpret_cast<uint64_t>(&(df_structure->sense_creature_class_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sense_creature_class_2"] = reinterpret_cast<uint64_t>(&(df_structure->sense_creature_class_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sense_creature_class_3"] = reinterpret_cast<uint64_t>(&(df_structure->sense_creature_class_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sense_creature_class_4"] = reinterpret_cast<uint64_t>(&(df_structure->sense_creature_class_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sense_creature_class_5"] = reinterpret_cast<uint64_t>(&(df_structure->sense_creature_class_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_tissue_style_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::tissue_style_raw*>(p_df_structure);

	p_table["token"] = reinterpret_cast<uint64_t>(&(df_structure->token)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["part_idx"] = reinterpret_cast<uint64_t>(&(df_structure->part_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["styles"] = reinterpret_cast<uint64_t>(&(df_structure->styles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_idx"] = reinterpret_cast<uint64_t>(&(df_structure->list_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noun"] = reinterpret_cast<uint64_t>(&(df_structure->noun)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["word_type"] = reinterpret_cast<uint64_t>(&(df_structure->word_type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_raw__T_graphics_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_raw::T_graphics*>(p_df_structure);

	p_table["texpos"] = reinterpret_cast<uint64_t>(&(df_structure->texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["texpos_gs"] = reinterpret_cast<uint64_t>(&(df_structure->texpos_gs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_link_texpos"] = reinterpret_cast<uint64_t>(&(df_structure->entity_link_texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_link_texpos_gs"] = reinterpret_cast<uint64_t>(&(df_structure->entity_link_texpos_gs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_link_texpos"] = reinterpret_cast<uint64_t>(&(df_structure->site_link_texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_link_texpos_gs"] = reinterpret_cast<uint64_t>(&(df_structure->site_link_texpos_gs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession_texpos"] = reinterpret_cast<uint64_t>(&(df_structure->profession_texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession_texpos_gs"] = reinterpret_cast<uint64_t>(&(df_structure->profession_texpos_gs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_color"] = reinterpret_cast<uint64_t>(&(df_structure->add_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_link_add_color"] = reinterpret_cast<uint64_t>(&(df_structure->entity_link_add_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_link_add_color"] = reinterpret_cast<uint64_t>(&(df_structure->site_link_add_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession_add_color"] = reinterpret_cast<uint64_t>(&(df_structure->profession_add_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appointments"] = reinterpret_cast<uint64_t>(&(df_structure->appointments)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_raw__T_profession_name_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_raw::T_profession_name*>(p_df_structure);

	p_table["singular"] = reinterpret_cast<uint64_t>(&(df_structure->singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plural"] = reinterpret_cast<uint64_t>(&(df_structure->plural)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_raw__T_hive_product_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_raw::T_hive_product*>(p_df_structure);

	p_table["number"] = reinterpret_cast<uint64_t>(&(df_structure->number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time"] = reinterpret_cast<uint64_t>(&(df_structure->time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tmpstr"] = reinterpret_cast<uint64_t>(&(df_structure->tmpstr)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_raw*>(p_df_structure);

	p_table["creature_id"] = reinterpret_cast<uint64_t>(&(df_structure->creature_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["general_baby_name"] = reinterpret_cast<uint64_t>(&(df_structure->general_baby_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["general_child_name"] = reinterpret_cast<uint64_t>(&(df_structure->general_child_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_tile"] = reinterpret_cast<uint64_t>(&(df_structure->creature_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_soldier_tile"] = reinterpret_cast<uint64_t>(&(df_structure->creature_soldier_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["alttile"] = reinterpret_cast<uint64_t>(&(df_structure->alttile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["soldier_alttile"] = reinterpret_cast<uint64_t>(&(df_structure->soldier_alttile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glowtile"] = reinterpret_cast<uint64_t>(&(df_structure->glowtile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature1"] = reinterpret_cast<uint64_t>(&(df_structure->temperature1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature2"] = reinterpret_cast<uint64_t>(&(df_structure->temperature2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["frequency"] = reinterpret_cast<uint64_t>(&(df_structure->frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population_number"] = reinterpret_cast<uint64_t>(&(df_structure->population_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cluster_number"] = reinterpret_cast<uint64_t>(&(df_structure->cluster_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["triggerable_group"] = reinterpret_cast<uint64_t>(&(df_structure->triggerable_group)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glowcolor"] = reinterpret_cast<uint64_t>(&(df_structure->glowcolor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adultsize"] = reinterpret_cast<uint64_t>(&(df_structure->adultsize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prefstring"] = reinterpret_cast<uint64_t>(&(df_structure->prefstring)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sphere"] = reinterpret_cast<uint64_t>(&(df_structure->sphere)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pop_ratio"] = reinterpret_cast<uint64_t>(&(df_structure->pop_ratio)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["graphics"] = reinterpret_cast<uint64_t>(&(df_structure->graphics)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speech1"] = reinterpret_cast<uint64_t>(&(df_structure->speech1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speech2"] = reinterpret_cast<uint64_t>(&(df_structure->speech2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speech3"] = reinterpret_cast<uint64_t>(&(df_structure->speech3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue"] = reinterpret_cast<uint64_t>(&(df_structure->tissue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession_name"] = reinterpret_cast<uint64_t>(&(df_structure->profession_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["underground_layer_min"] = reinterpret_cast<uint64_t>(&(df_structure->underground_layer_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["underground_layer_max"] = reinterpret_cast<uint64_t>(&(df_structure->underground_layer_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["modifier_class"] = reinterpret_cast<uint64_t>(&(df_structure->modifier_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["modifier_num_patterns"] = reinterpret_cast<uint64_t>(&(df_structure->modifier_num_patterns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hive_product"] = reinterpret_cast<uint64_t>(&(df_structure->hive_product)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->source_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4201_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_modifier_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_modifier_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["raws"] = reinterpret_cast<uint64_t>(&(df_structure->raws)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_variation_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_variation*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cv_convert_tag"] = reinterpret_cast<uint64_t>(&(df_structure->cv_convert_tag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cv_new_tag"] = reinterpret_cast<uint64_t>(&(df_structure->cv_new_tag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cv_new_unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->cv_new_unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cv_new_unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->cv_new_unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cv_remove_tag"] = reinterpret_cast<uint64_t>(&(df_structure->cv_remove_tag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cv_remove_unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->cv_remove_unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cv_remove_unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->cv_remove_unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_body_part_template_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::body_part_template*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["con"] = reinterpret_cast<uint64_t>(&(df_structure->con)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category"] = reinterpret_cast<uint64_t>(&(df_structure->category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["con_cat"] = reinterpret_cast<uint64_t>(&(df_structure->con_cat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contype"] = reinterpret_cast<uint64_t>(&(df_structure->contype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["default_relsize"] = reinterpret_cast<uint64_t>(&(df_structure->default_relsize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number"] = reinterpret_cast<uint64_t>(&(df_structure->number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_singular"] = reinterpret_cast<uint64_t>(&(df_structure->name_singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_body_template_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::body_template*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parts"] = reinterpret_cast<uint64_t>(&(df_structure->parts)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_tissue_template_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::tissue_template*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_name_singular"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_name_singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_material_str"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_material_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relative_thickness"] = reinterpret_cast<uint64_t>(&(df_structure->relative_thickness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["healing_rate"] = reinterpret_cast<uint64_t>(&(df_structure->healing_rate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vascular"] = reinterpret_cast<uint64_t>(&(df_structure->vascular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pain_receptors"] = reinterpret_cast<uint64_t>(&(df_structure->pain_receptors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_shape"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_shape)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["insulation"] = reinterpret_cast<uint64_t>(&(df_structure->insulation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subordinate_to_tissue"] = reinterpret_cast<uint64_t>(&(df_structure->subordinate_to_tissue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_shape_str"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_shape_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_tissue_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::tissue*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_name_singular"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_name_singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_material_str"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_material_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relative_thickness"] = reinterpret_cast<uint64_t>(&(df_structure->relative_thickness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["healing_rate"] = reinterpret_cast<uint64_t>(&(df_structure->healing_rate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vascular"] = reinterpret_cast<uint64_t>(&(df_structure->vascular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pain_receptors"] = reinterpret_cast<uint64_t>(&(df_structure->pain_receptors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_shape"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_shape)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["insulation"] = reinterpret_cast<uint64_t>(&(df_structure->insulation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subordinate_to_tissue"] = reinterpret_cast<uint64_t>(&(df_structure->subordinate_to_tissue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_tissue"] = reinterpret_cast<uint64_t>(&(df_structure->parent_tissue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["heatdam_point"] = reinterpret_cast<uint64_t>(&(df_structure->heatdam_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colddam_point"] = reinterpret_cast<uint64_t>(&(df_structure->colddam_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ignite_point"] = reinterpret_cast<uint64_t>(&(df_structure->ignite_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["melting_point"] = reinterpret_cast<uint64_t>(&(df_structure->melting_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["boiling_point"] = reinterpret_cast<uint64_t>(&(df_structure->boiling_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spec_heat"] = reinterpret_cast<uint64_t>(&(df_structure->spec_heat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_shape_str"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_shape_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_d_init__T_wound_color_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::d_init::T_wound_color*>(p_df_structure);

	p_table["none"] = reinterpret_cast<uint64_t>(&(df_structure->none)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["minor"] = reinterpret_cast<uint64_t>(&(df_structure->minor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inhibited"] = reinterpret_cast<uint64_t>(&(df_structure->inhibited)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["function_loss"] = reinterpret_cast<uint64_t>(&(df_structure->function_loss)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["broken"] = reinterpret_cast<uint64_t>(&(df_structure->broken)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["missing"] = reinterpret_cast<uint64_t>(&(df_structure->missing)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_d_init__T_store_dist_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::d_init::T_store_dist*>(p_df_structure);

	p_table["item_decrease"] = reinterpret_cast<uint64_t>(&(df_structure->item_decrease)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed_combine"] = reinterpret_cast<uint64_t>(&(df_structure->seed_combine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bucket_combine"] = reinterpret_cast<uint64_t>(&(df_structure->bucket_combine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["barrel_combine"] = reinterpret_cast<uint64_t>(&(df_structure->barrel_combine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bin_combine"] = reinterpret_cast<uint64_t>(&(df_structure->bin_combine)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_d_init_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::d_init*>(p_df_structure);

	p_table["flags1"] = reinterpret_cast<uint64_t>(&(df_structure->flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nickname"] = reinterpret_cast<uint64_t>(&(df_structure->nickname)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sky_tile"] = reinterpret_cast<uint64_t>(&(df_structure->sky_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sky_color"] = reinterpret_cast<uint64_t>(&(df_structure->sky_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chasm_tile"] = reinterpret_cast<uint64_t>(&(df_structure->chasm_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pillar_tile"] = reinterpret_cast<uint64_t>(&(df_structure->pillar_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["track_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->track_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["track_tile_invert"] = reinterpret_cast<uint64_t>(&(df_structure->track_tile_invert)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["track_ramp_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->track_ramp_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["track_ramp_invert"] = reinterpret_cast<uint64_t>(&(df_structure->track_ramp_invert)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->tree_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chasm_color"] = reinterpret_cast<uint64_t>(&(df_structure->chasm_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wound_color"] = reinterpret_cast<uint64_t>(&(df_structure->wound_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idlers"] = reinterpret_cast<uint64_t>(&(df_structure->idlers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_embark_tunnel"] = reinterpret_cast<uint64_t>(&(df_structure->show_embark_tunnel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["display_length"] = reinterpret_cast<uint64_t>(&(df_structure->display_length)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adventurer_z_view"] = reinterpret_cast<uint64_t>(&(df_structure->adventurer_z_view)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adventurer_z_view_size"] = reinterpret_cast<uint64_t>(&(df_structure->adventurer_z_view_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags3"] = reinterpret_cast<uint64_t>(&(df_structure->flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population_cap"] = reinterpret_cast<uint64_t>(&(df_structure->population_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strict_population_cap"] = reinterpret_cast<uint64_t>(&(df_structure->strict_population_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["baby_cap_absolute"] = reinterpret_cast<uint64_t>(&(df_structure->baby_cap_absolute)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["baby_cap_percent"] = reinterpret_cast<uint64_t>(&(df_structure->baby_cap_percent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["visitor_cap"] = reinterpret_cast<uint64_t>(&(df_structure->visitor_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_seed_cap"] = reinterpret_cast<uint64_t>(&(df_structure->specific_seed_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fortress_seed_cap"] = reinterpret_cast<uint64_t>(&(df_structure->fortress_seed_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["invasion_soldier_cap"] = reinterpret_cast<uint64_t>(&(df_structure->invasion_soldier_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["invasion_monster_cap"] = reinterpret_cast<uint64_t>(&(df_structure->invasion_monster_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["path_cost"] = reinterpret_cast<uint64_t>(&(df_structure->path_cost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_rect"] = reinterpret_cast<uint64_t>(&(df_structure->embark_rect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["store_dist"] = reinterpret_cast<uint64_t>(&(df_structure->store_dist)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["set_labor_lists"] = reinterpret_cast<uint64_t>(&(df_structure->set_labor_lists)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["graze_coefficient"] = reinterpret_cast<uint64_t>(&(df_structure->graze_coefficient)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temple_value_levels"] = reinterpret_cast<uint64_t>(&(df_structure->temple_value_levels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["priesthood_unit_counts"] = reinterpret_cast<uint64_t>(&(df_structure->priesthood_unit_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guildhall_value_levels"] = reinterpret_cast<uint64_t>(&(df_structure->guildhall_value_levels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guild_unit_counts"] = reinterpret_cast<uint64_t>(&(df_structure->guild_unit_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags4"] = reinterpret_cast<uint64_t>(&(df_structure->flags4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["post_prepare_embark_confirmation"] = reinterpret_cast<uint64_t>(&(df_structure->post_prepare_embark_confirmation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["announcements"] = reinterpret_cast<uint64_t>(&(df_structure->announcements)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_descriptor_pattern_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::descriptor_pattern*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colors"] = reinterpret_cast<uint64_t>(&(df_structure->colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pattern"] = reinterpret_cast<uint64_t>(&(df_structure->pattern)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cp_color"] = reinterpret_cast<uint64_t>(&(df_structure->cp_color)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_occasion_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_occasion_info*>(p_df_structure);

	p_table["occasions"] = reinterpret_cast<uint64_t>(&(df_structure->occasions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_occasion_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_occasion_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_occasion_schedule_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_occasion_schedule*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reference"] = reinterpret_cast<uint64_t>(&(df_structure->reference)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reference2"] = reinterpret_cast<uint64_t>(&(df_structure->reference2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["features"] = reinterpret_cast<uint64_t>(&(df_structure->features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->start_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->end_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_occasion_schedule_feature_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_occasion_schedule_feature*>(p_df_structure);

	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reference"] = reinterpret_cast<uint64_t>(&(df_structure->reference)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_caravan_state_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::caravan_state*>(p_df_structure);

	p_table["total_capacity"] = reinterpret_cast<uint64_t>(&(df_structure->total_capacity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trade_state"] = reinterpret_cast<uint64_t>(&(df_structure->trade_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["depot_notified"] = reinterpret_cast<uint64_t>(&(df_structure->depot_notified)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time_remaining"] = reinterpret_cast<uint64_t>(&(df_structure->time_remaining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_stats"] = reinterpret_cast<uint64_t>(&(df_structure->activity_stats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["import_value"] = reinterpret_cast<uint64_t>(&(df_structure->import_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["export_value_total"] = reinterpret_cast<uint64_t>(&(df_structure->export_value_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["export_value_personal"] = reinterpret_cast<uint64_t>(&(df_structure->export_value_personal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["offer_value"] = reinterpret_cast<uint64_t>(&(df_structure->offer_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animals"] = reinterpret_cast<uint64_t>(&(df_structure->animals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sell_prices"] = reinterpret_cast<uint64_t>(&(df_structure->sell_prices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buy_prices"] = reinterpret_cast<uint64_t>(&(df_structure->buy_prices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["goods"] = reinterpret_cast<uint64_t>(&(df_structure->goods)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_buy_prices_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_buy_prices*>(p_df_structure);

	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["price"] = reinterpret_cast<uint64_t>(&(df_structure->price)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_buy_requests_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_buy_requests*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_types"] = reinterpret_cast<uint64_t>(&(df_structure->mat_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_indices"] = reinterpret_cast<uint64_t>(&(df_structure->mat_indices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_cats"] = reinterpret_cast<uint64_t>(&(df_structure->mat_cats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["priority"] = reinterpret_cast<uint64_t>(&(df_structure->priority)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_sell_prices_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_sell_prices*>(p_df_structure);

	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["price"] = reinterpret_cast<uint64_t>(&(df_structure->price)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_recipe_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_recipe*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_types"] = reinterpret_cast<uint64_t>(&(df_structure->item_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtypes"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtypes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_types"] = reinterpret_cast<uint64_t>(&(df_structure->mat_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_indices"] = reinterpret_cast<uint64_t>(&(df_structure->mat_indices)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_honors_type_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::honors_type*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["precedence_awarded"] = reinterpret_cast<uint64_t>(&(df_structure->precedence_awarded)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_skill"] = reinterpret_cast<uint64_t>(&(df_structure->required_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_skill_type"] = reinterpret_cast<uint64_t>(&(df_structure->required_skill_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_skill_points"] = reinterpret_cast<uint64_t>(&(df_structure->required_skill_points)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_kills"] = reinterpret_cast<uint64_t>(&(df_structure->required_kills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_battles"] = reinterpret_cast<uint64_t>(&(df_structure->required_battles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_years_of_membership"] = reinterpret_cast<uint64_t>(&(df_structure->required_years_of_membership)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["honored"] = reinterpret_cast<uint64_t>(&(df_structure->honored)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_position"] = reinterpret_cast<uint64_t>(&(df_structure->required_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_former_position"] = reinterpret_cast<uint64_t>(&(df_structure->required_former_position)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_artifact_claim_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::artifact_claim*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["claim_type"] = reinterpret_cast<uint64_t>(&(df_structure->claim_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["symbol_claim_id"] = reinterpret_cast<uint64_t>(&(df_structure->symbol_claim_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["claim_year"] = reinterpret_cast<uint64_t>(&(df_structure->claim_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["claim_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->claim_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure_local"] = reinterpret_cast<uint64_t>(&(df_structure->structure_local)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["holder_hf"] = reinterpret_cast<uint64_t>(&(df_structure->holder_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion"] = reinterpret_cast<uint64_t>(&(df_structure->subregion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_layer_id"] = reinterpret_cast<uint64_t>(&(df_structure->feature_layer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_year"] = reinterpret_cast<uint64_t>(&(df_structure->unk_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_uniform_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_uniform_item*>(p_df_structure);

	p_table["random_dye"] = reinterpret_cast<uint64_t>(&(df_structure->random_dye)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorlevel"] = reinterpret_cast<uint64_t>(&(df_structure->armorlevel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_color"] = reinterpret_cast<uint64_t>(&(df_structure->item_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_image_id"] = reinterpret_cast<uint64_t>(&(df_structure->art_image_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_image_subid"] = reinterpret_cast<uint64_t>(&(df_structure->art_image_subid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["image_thread_color"] = reinterpret_cast<uint64_t>(&(df_structure->image_thread_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["image_material_class"] = reinterpret_cast<uint64_t>(&(df_structure->image_material_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maker_race"] = reinterpret_cast<uint64_t>(&(df_structure->maker_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["indiv_choice"] = reinterpret_cast<uint64_t>(&(df_structure->indiv_choice)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_class"] = reinterpret_cast<uint64_t>(&(df_structure->material_class)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_uniform_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_uniform*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform_item_types"] = reinterpret_cast<uint64_t>(&(df_structure->uniform_item_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform_item_subtypes"] = reinterpret_cast<uint64_t>(&(df_structure->uniform_item_subtypes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform_item_info"] = reinterpret_cast<uint64_t>(&(df_structure->uniform_item_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_invasion_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_invasion*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_leader_hf"] = reinterpret_cast<uint64_t>(&(df_structure->attack_leader_hf)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_abduction_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_abduction*>(p_df_structure);

	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abductor_id"] = reinterpret_cast<uint64_t>(&(df_structure->abductor_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_incident_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_incident*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["incident_id"] = reinterpret_cast<uint64_t>(&(df_structure->incident_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_occupation_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_occupation*>(p_df_structure);

	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_beast_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_beast*>(p_df_structure);

	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_id"] = reinterpret_cast<uint64_t>(&(df_structure->region_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_group_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_group*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_harass_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_harass*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_flee_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_flee*>(p_df_structure);

	p_table["refugee_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->refugee_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["from_site_id"] = reinterpret_cast<uint64_t>(&(df_structure->from_site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->army_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_leader_hf_id"] = reinterpret_cast<uint64_t>(&(df_structure->army_leader_hf_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_abandon_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_abandon*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->parent_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_reclaimed_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_reclaimed*>(p_df_structure);

	p_table["behalf_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->behalf_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reclaimer_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->reclaimer_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leader_hf"] = reinterpret_cast<uint64_t>(&(df_structure->leader_hf)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_founded_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_founded*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->parent_entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_reclaiming_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_reclaiming*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["first_settler_hf"] = reinterpret_cast<uint64_t>(&(df_structure->first_settler_hf)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_founding_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_founding*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_id"] = reinterpret_cast<uint64_t>(&(df_structure->region_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_leave_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_leave*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_insurrection_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_insurrection*>(p_df_structure);

	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_insurrection_end_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_insurrection_end*>(p_df_structure);

	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["result"] = reinterpret_cast<uint64_t>(&(df_structure->result)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_succession_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_succession*>(p_df_structure);

	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["former_histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->former_histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_assignment_id"] = reinterpret_cast<uint64_t>(&(df_structure->position_assignment_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_claim_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_claim*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_accept_tribute_offer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_accept_tribute_offer*>(p_df_structure);

	p_table["entity1_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig1_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity2_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity2_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_refuse_tribute_offer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_refuse_tribute_offer*>(p_df_structure);

	p_table["entity1_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig1_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity2_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity2_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_accept_tribute_demand_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_accept_tribute_demand*>(p_df_structure);

	p_table["entity1_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig1_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity2_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity2_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_refuse_tribute_demand_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_refuse_tribute_demand*>(p_df_structure);

	p_table["entity1_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig1_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity2_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity2_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_accept_peace_offer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_accept_peace_offer*>(p_df_structure);

	p_table["entity1_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig1_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity2_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity2_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_refuse_peace_offer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_refuse_peace_offer*>(p_df_structure);

	p_table["entity1_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig1_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity2_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity2_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_cease_tribute_offer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_cease_tribute_offer*>(p_df_structure);

	p_table["entity1_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig1_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig1_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity2_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity2_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_in_site_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_in_site*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure_id"] = reinterpret_cast<uint64_t>(&(df_structure->structure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_in_subregion_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_in_subregion*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion_id"] = reinterpret_cast<uint64_t>(&(df_structure->subregion_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_in_feature_layer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_in_feature_layer*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_layer_id"] = reinterpret_cast<uint64_t>(&(df_structure->feature_layer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_in_inventory_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_in_inventory*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_not_in_site_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_not_in_site*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure_id"] = reinterpret_cast<uint64_t>(&(df_structure->structure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_not_in_subregion_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_not_in_subregion*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion_id"] = reinterpret_cast<uint64_t>(&(df_structure->subregion_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_not_in_feature_layer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_not_in_feature_layer*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_layer_id"] = reinterpret_cast<uint64_t>(&(df_structure->feature_layer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_not_in_inventory_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_not_in_inventory*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data__T_artifact_destroyed_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data::T_artifact_destroyed*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event__T_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event::T_data*>(p_df_structure);

	p_table["invasion"] = reinterpret_cast<uint64_t>(&(df_structure->invasion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abduction"] = reinterpret_cast<uint64_t>(&(df_structure->abduction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["incident"] = reinterpret_cast<uint64_t>(&(df_structure->incident)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occupation"] = reinterpret_cast<uint64_t>(&(df_structure->occupation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["beast"] = reinterpret_cast<uint64_t>(&(df_structure->beast)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group"] = reinterpret_cast<uint64_t>(&(df_structure->group)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["harass"] = reinterpret_cast<uint64_t>(&(df_structure->harass)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flee"] = reinterpret_cast<uint64_t>(&(df_structure->flee)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abandon"] = reinterpret_cast<uint64_t>(&(df_structure->abandon)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reclaimed"] = reinterpret_cast<uint64_t>(&(df_structure->reclaimed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["founded"] = reinterpret_cast<uint64_t>(&(df_structure->founded)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reclaiming"] = reinterpret_cast<uint64_t>(&(df_structure->reclaiming)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["founding"] = reinterpret_cast<uint64_t>(&(df_structure->founding)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leave"] = reinterpret_cast<uint64_t>(&(df_structure->leave)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["insurrection"] = reinterpret_cast<uint64_t>(&(df_structure->insurrection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["insurrection_end"] = reinterpret_cast<uint64_t>(&(df_structure->insurrection_end)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["succession"] = reinterpret_cast<uint64_t>(&(df_structure->succession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["claim"] = reinterpret_cast<uint64_t>(&(df_structure->claim)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accept_tribute_offer"] = reinterpret_cast<uint64_t>(&(df_structure->accept_tribute_offer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["refuse_tribute_offer"] = reinterpret_cast<uint64_t>(&(df_structure->refuse_tribute_offer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accept_tribute_demand"] = reinterpret_cast<uint64_t>(&(df_structure->accept_tribute_demand)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["refuse_tribute_demand"] = reinterpret_cast<uint64_t>(&(df_structure->refuse_tribute_demand)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accept_peace_offer"] = reinterpret_cast<uint64_t>(&(df_structure->accept_peace_offer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["refuse_peace_offer"] = reinterpret_cast<uint64_t>(&(df_structure->refuse_peace_offer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cease_tribute_offer"] = reinterpret_cast<uint64_t>(&(df_structure->cease_tribute_offer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_in_site"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_in_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_in_subregion"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_in_subregion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_in_feature_layer"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_in_feature_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_in_inventory"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_in_inventory)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_not_in_site"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_not_in_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_not_in_subregion"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_not_in_subregion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_not_in_feature_layer"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_not_in_feature_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_not_in_inventory"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_not_in_inventory)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_destroyed"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_destroyed)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_event_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_event*>(p_df_structure);

	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_year"] = reinterpret_cast<uint64_t>(&(df_structure->unk_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->unk_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parties"] = reinterpret_cast<uint64_t>(&(df_structure->parties)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_party_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_party_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["details"] = reinterpret_cast<uint64_t>(&(df_structure->details)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_details_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_details_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_party__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_party::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_party_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_party*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_ids"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_ids"] = reinterpret_cast<uint64_t>(&(df_structure->entity_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details__T_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details::T_data*>(p_df_structure);

	p_table["JoinParty"] = reinterpret_cast<uint64_t>(&(df_structure->JoinParty)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["DemonicBinding"] = reinterpret_cast<uint64_t>(&(df_structure->DemonicBinding)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Residency"] = reinterpret_cast<uint64_t>(&(df_structure->Residency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Citizenship"] = reinterpret_cast<uint64_t>(&(df_structure->Citizenship)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Parley"] = reinterpret_cast<uint64_t>(&(df_structure->Parley)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PositionCorruption"] = reinterpret_cast<uint64_t>(&(df_structure->PositionCorruption)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PlotStealArtifact"] = reinterpret_cast<uint64_t>(&(df_structure->PlotStealArtifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PromisePosition"] = reinterpret_cast<uint64_t>(&(df_structure->PromisePosition)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PlotAssassination"] = reinterpret_cast<uint64_t>(&(df_structure->PlotAssassination)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PlotAbduct"] = reinterpret_cast<uint64_t>(&(df_structure->PlotAbduct)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk10"] = reinterpret_cast<uint64_t>(&(df_structure->unk10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PlotConviction"] = reinterpret_cast<uint64_t>(&(df_structure->PlotConviction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Location"] = reinterpret_cast<uint64_t>(&(df_structure->Location)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PlotInfiltrationCoup"] = reinterpret_cast<uint64_t>(&(df_structure->PlotInfiltrationCoup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PlotFrameTreason"] = reinterpret_cast<uint64_t>(&(df_structure->PlotFrameTreason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["PlotInduceWar"] = reinterpret_cast<uint64_t>(&(df_structure->PlotInduceWar)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_join_party_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_join_party*>(p_df_structure);

	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["member"] = reinterpret_cast<uint64_t>(&(df_structure->member)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["party"] = reinterpret_cast<uint64_t>(&(df_structure->party)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["figure"] = reinterpret_cast<uint64_t>(&(df_structure->figure)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_demonic_binding_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_demonic_binding*>(p_df_structure);

	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["demon"] = reinterpret_cast<uint64_t>(&(df_structure->demon)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["summoner"] = reinterpret_cast<uint64_t>(&(df_structure->summoner)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sphere"] = reinterpret_cast<uint64_t>(&(df_structure->sphere)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_residency_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_residency*>(p_df_structure);

	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["applicant"] = reinterpret_cast<uint64_t>(&(df_structure->applicant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["government"] = reinterpret_cast<uint64_t>(&(df_structure->government)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_plot_conviction_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_plot_conviction*>(p_df_structure);

	p_table["criminal_indices"] = reinterpret_cast<uint64_t>(&(df_structure->criminal_indices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crime"] = reinterpret_cast<uint64_t>(&(df_structure->crime)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_agreement_details_data_location_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::agreement_details_data_location*>(p_df_structure);

	p_table["applicant"] = reinterpret_cast<uint64_t>(&(df_structure->applicant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["government"] = reinterpret_cast<uint64_t>(&(df_structure->government)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deity_type"] = reinterpret_cast<uint64_t>(&(df_structure->deity_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deity_data"] = reinterpret_cast<uint64_t>(&(df_structure->deity_data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tier"] = reinterpret_cast<uint64_t>(&(df_structure->tier)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_position_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_position_raw*>(p_df_structure);

	p_table["code"] = reinterpret_cast<uint64_t>(&(df_structure->code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allowed_creature_str"] = reinterpret_cast<uint64_t>(&(df_structure->allowed_creature_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allowed_creature"] = reinterpret_cast<uint64_t>(&(df_structure->allowed_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allowed_class"] = reinterpret_cast<uint64_t>(&(df_structure->allowed_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rejected_creature_str"] = reinterpret_cast<uint64_t>(&(df_structure->rejected_creature_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rejected_creature"] = reinterpret_cast<uint64_t>(&(df_structure->rejected_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rejected_class"] = reinterpret_cast<uint64_t>(&(df_structure->rejected_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_female"] = reinterpret_cast<uint64_t>(&(df_structure->name_female)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_male"] = reinterpret_cast<uint64_t>(&(df_structure->name_male)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spouse"] = reinterpret_cast<uint64_t>(&(df_structure->spouse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spouse_female"] = reinterpret_cast<uint64_t>(&(df_structure->spouse_female)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spouse_male"] = reinterpret_cast<uint64_t>(&(df_structure->spouse_male)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad"] = reinterpret_cast<uint64_t>(&(df_structure->squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["land_name"] = reinterpret_cast<uint64_t>(&(df_structure->land_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_size"] = reinterpret_cast<uint64_t>(&(df_structure->squad_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["commander_str"] = reinterpret_cast<uint64_t>(&(df_structure->commander_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["commander_id"] = reinterpret_cast<uint64_t>(&(df_structure->commander_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["commander_types"] = reinterpret_cast<uint64_t>(&(df_structure->commander_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["land_holder"] = reinterpret_cast<uint64_t>(&(df_structure->land_holder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number"] = reinterpret_cast<uint64_t>(&(df_structure->number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["requires_population"] = reinterpret_cast<uint64_t>(&(df_structure->requires_population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["execution_skill"] = reinterpret_cast<uint64_t>(&(df_structure->execution_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["precedence"] = reinterpret_cast<uint64_t>(&(df_structure->precedence)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["replaced_by_str"] = reinterpret_cast<uint64_t>(&(df_structure->replaced_by_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["replaced_by"] = reinterpret_cast<uint64_t>(&(df_structure->replaced_by)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appointed_by_str"] = reinterpret_cast<uint64_t>(&(df_structure->appointed_by_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appointed_by"] = reinterpret_cast<uint64_t>(&(df_structure->appointed_by)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["succession_by_position_str"] = reinterpret_cast<uint64_t>(&(df_structure->succession_by_position_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["succession_by_position"] = reinterpret_cast<uint64_t>(&(df_structure->succession_by_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["responsibilities"] = reinterpret_cast<uint64_t>(&(df_structure->responsibilities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_boxes"] = reinterpret_cast<uint64_t>(&(df_structure->required_boxes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_cabinets"] = reinterpret_cast<uint64_t>(&(df_structure->required_cabinets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_racks"] = reinterpret_cast<uint64_t>(&(df_structure->required_racks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_stands"] = reinterpret_cast<uint64_t>(&(df_structure->required_stands)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_office"] = reinterpret_cast<uint64_t>(&(df_structure->required_office)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_bedroom"] = reinterpret_cast<uint64_t>(&(df_structure->required_bedroom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_dining"] = reinterpret_cast<uint64_t>(&(df_structure->required_dining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_tomb"] = reinterpret_cast<uint64_t>(&(df_structure->required_tomb)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mandate_max"] = reinterpret_cast<uint64_t>(&(df_structure->mandate_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["demand_max"] = reinterpret_cast<uint64_t>(&(df_structure->demand_max)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_graphic_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::graphic*>(p_df_structure);

	p_table["screenx"] = reinterpret_cast<uint64_t>(&(df_structure->screenx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screeny"] = reinterpret_cast<uint64_t>(&(df_structure->screeny)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screenf"] = reinterpret_cast<uint64_t>(&(df_structure->screenf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screenb"] = reinterpret_cast<uint64_t>(&(df_structure->screenb)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screenbright"] = reinterpret_cast<uint64_t>(&(df_structure->screenbright)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screen"] = reinterpret_cast<uint64_t>(&(df_structure->screen)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_addcolor"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_addcolor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_grayscale"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_grayscale)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_cf"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_cf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screentexpos_cbr"] = reinterpret_cast<uint64_t>(&(df_structure->screentexpos_cbr)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["clipx"] = reinterpret_cast<uint64_t>(&(df_structure->clipx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["clipy"] = reinterpret_cast<uint64_t>(&(df_structure->clipy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tex_pos"] = reinterpret_cast<uint64_t>(&(df_structure->tex_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rect_id"] = reinterpret_cast<uint64_t>(&(df_structure->rect_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["print_time"] = reinterpret_cast<uint64_t>(&(df_structure->print_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["print_index"] = reinterpret_cast<uint64_t>(&(df_structure->print_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["display_frames"] = reinterpret_cast<uint64_t>(&(df_structure->display_frames)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["force_full_display_count"] = reinterpret_cast<uint64_t>(&(df_structure->force_full_display_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_rect"] = reinterpret_cast<uint64_t>(&(df_structure->original_rect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dimx"] = reinterpret_cast<uint64_t>(&(df_structure->dimx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dimy"] = reinterpret_cast<uint64_t>(&(df_structure->dimy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_x"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_y"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screen_limit"] = reinterpret_cast<uint64_t>(&(df_structure->screen_limit)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_kills_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_kills*>(p_df_structure);

	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killed_race"] = reinterpret_cast<uint64_t>(&(df_structure->killed_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killed_caste"] = reinterpret_cast<uint64_t>(&(df_structure->killed_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killed_underground_region"] = reinterpret_cast<uint64_t>(&(df_structure->killed_underground_region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killed_region"] = reinterpret_cast<uint64_t>(&(df_structure->killed_region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killed_site"] = reinterpret_cast<uint64_t>(&(df_structure->killed_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killed_undead"] = reinterpret_cast<uint64_t>(&(df_structure->killed_undead)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killed_count"] = reinterpret_cast<uint64_t>(&(df_structure->killed_count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_hit_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_hit_item*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shooter_item"] = reinterpret_cast<uint64_t>(&(df_structure->shooter_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shooter_item_type"] = reinterpret_cast<uint64_t>(&(df_structure->shooter_item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shooter_item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->shooter_item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shooter_mattype"] = reinterpret_cast<uint64_t>(&(df_structure->shooter_mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shooter_matindex"] = reinterpret_cast<uint64_t>(&(df_structure->shooter_matindex)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plot_agreement_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plot_agreement*>(p_df_structure);

	p_table["actor_id"] = reinterpret_cast<uint64_t>(&(df_structure->actor_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plot_role"] = reinterpret_cast<uint64_t>(&(df_structure->plot_role)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_id"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_has_messenger"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_has_messenger)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_reason_info__T_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_reason_info::T_data*>(p_df_structure);

	p_table["glorify_hf"] = reinterpret_cast<uint64_t>(&(df_structure->glorify_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_is_heirloom_of_family_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_is_heirloom_of_family_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_is_symbol_of_entity_position"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_is_symbol_of_entity_position)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_reason_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_reason_info*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_circumstance_info__T_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_circumstance_info::T_data*>(p_df_structure);

	p_table["Death"] = reinterpret_cast<uint64_t>(&(df_structure->Death)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Prayer"] = reinterpret_cast<uint64_t>(&(df_structure->Prayer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["DreamAbout"] = reinterpret_cast<uint64_t>(&(df_structure->DreamAbout)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Defeated"] = reinterpret_cast<uint64_t>(&(df_structure->Defeated)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Murdered"] = reinterpret_cast<uint64_t>(&(df_structure->Murdered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["HistEventCollection"] = reinterpret_cast<uint64_t>(&(df_structure->HistEventCollection)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_circumstance_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_circumstance_info*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_context__T_unk_10_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_context::T_unk_10*>(p_df_structure);

	p_table["unk_00"] = reinterpret_cast<uint64_t>(&(df_structure->unk_00)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_04"] = reinterpret_cast<uint64_t>(&(df_structure->unk_04)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interrogator_id"] = reinterpret_cast<uint64_t>(&(df_structure->interrogator_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subject_id"] = reinterpret_cast<uint64_t>(&(df_structure->subject_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_context_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_context*>(p_df_structure);

	p_table["unk_00"] = reinterpret_cast<uint64_t>(&(df_structure->unk_00)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_08"] = reinterpret_cast<uint64_t>(&(df_structure->unk_08)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id_talker"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id_talker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id_listener"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id_listener)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_48"] = reinterpret_cast<uint64_t>(&(df_structure->unk_48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_54"] = reinterpret_cast<uint64_t>(&(df_structure->unk_54)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_56"] = reinterpret_cast<uint64_t>(&(df_structure->unk_56)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_58"] = reinterpret_cast<uint64_t>(&(df_structure->unk_58)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_60"] = reinterpret_cast<uint64_t>(&(df_structure->unk_60)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_64"] = reinterpret_cast<uint64_t>(&(df_structure->unk_64)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_68"] = reinterpret_cast<uint64_t>(&(df_structure->unk_68)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_70"] = reinterpret_cast<uint64_t>(&(df_structure->unk_70)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_74"] = reinterpret_cast<uint64_t>(&(df_structure->unk_74)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_78"] = reinterpret_cast<uint64_t>(&(df_structure->unk_78)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_80"] = reinterpret_cast<uint64_t>(&(df_structure->unk_80)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_84"] = reinterpret_cast<uint64_t>(&(df_structure->unk_84)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_88"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_90"] = reinterpret_cast<uint64_t>(&(df_structure->unk_90)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_94"] = reinterpret_cast<uint64_t>(&(df_structure->unk_94)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_98"] = reinterpret_cast<uint64_t>(&(df_structure->unk_98)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_ac"] = reinterpret_cast<uint64_t>(&(df_structure->unk_ac)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_b0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_b0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_b4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_b4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_b8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_b8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_bc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_bc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_diedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_diedst*>(p_df_structure);

	p_table["victim_hf"] = reinterpret_cast<uint64_t>(&(df_structure->victim_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slayer_hf"] = reinterpret_cast<uint64_t>(&(df_structure->slayer_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slayer_race"] = reinterpret_cast<uint64_t>(&(df_structure->slayer_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slayer_caste"] = reinterpret_cast<uint64_t>(&(df_structure->slayer_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapon"] = reinterpret_cast<uint64_t>(&(df_structure->weapon)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion"] = reinterpret_cast<uint64_t>(&(df_structure->subregion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_layer"] = reinterpret_cast<uint64_t>(&(df_structure->feature_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_cause"] = reinterpret_cast<uint64_t>(&(df_structure->death_cause)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_add_hf_entity_linkst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_add_hf_entity_linkst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["link_type"] = reinterpret_cast<uint64_t>(&(df_structure->link_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_id"] = reinterpret_cast<uint64_t>(&(df_structure->position_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appointer_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->appointer_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["promise_to_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->promise_to_hfid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_remove_hf_entity_linkst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_remove_hf_entity_linkst*>(p_df_structure);

	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["link_type"] = reinterpret_cast<uint64_t>(&(df_structure->link_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_id"] = reinterpret_cast<uint64_t>(&(df_structure->position_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_topicagreement_concludedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_topicagreement_concludedst*>(p_df_structure);

	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destination"] = reinterpret_cast<uint64_t>(&(df_structure->destination)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["result"] = reinterpret_cast<uint64_t>(&(df_structure->result)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_topicagreement_rejectedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_topicagreement_rejectedst*>(p_df_structure);

	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destination"] = reinterpret_cast<uint64_t>(&(df_structure->destination)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_topicagreement_madest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_topicagreement_madest*>(p_df_structure);

	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destination"] = reinterpret_cast<uint64_t>(&(df_structure->destination)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_peace_acceptedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_peace_acceptedst*>(p_df_structure);

	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destination"] = reinterpret_cast<uint64_t>(&(df_structure->destination)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_peace_rejectedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_peace_rejectedst*>(p_df_structure);

	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source"] = reinterpret_cast<uint64_t>(&(df_structure->source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destination"] = reinterpret_cast<uint64_t>(&(df_structure->destination)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_possessedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_possessedst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion_id"] = reinterpret_cast<uint64_t>(&(df_structure->subregion_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_layer_id"] = reinterpret_cast<uint64_t>(&(df_structure->feature_layer_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_createdst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_createdst*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creator_unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->creator_unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creator_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->creator_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_actionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_actionst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["action"] = reinterpret_cast<uint64_t>(&(df_structure->action)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_add_hf_site_linkst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_add_hf_site_linkst*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_remove_hf_site_linkst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_remove_hf_site_linkst*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_add_hf_hf_linkst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_add_hf_hf_linkst*>(p_df_structure);

	p_table["hf"] = reinterpret_cast<uint64_t>(&(df_structure->hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hf_target"] = reinterpret_cast<uint64_t>(&(df_structure->hf_target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_remove_hf_hf_linkst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_remove_hf_hf_linkst*>(p_df_structure);

	p_table["hf"] = reinterpret_cast<uint64_t>(&(df_structure->hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hf_target"] = reinterpret_cast<uint64_t>(&(df_structure->hf_target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_created_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_created_itemst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_created_dye_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_created_dye_itemst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dye_mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->dye_mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dye_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->dye_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_created_item_improvementst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_created_item_improvementst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["improvement_type"] = reinterpret_cast<uint64_t>(&(df_structure->improvement_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["improvement_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->improvement_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["imp_mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->imp_mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["imp_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->imp_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_id"] = reinterpret_cast<uint64_t>(&(df_structure->art_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_subid"] = reinterpret_cast<uint64_t>(&(df_structure->art_subid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_created_engravingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_created_engravingst*>(p_df_structure);

	p_table["skill_rating"] = reinterpret_cast<uint64_t>(&(df_structure->skill_rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_id"] = reinterpret_cast<uint64_t>(&(df_structure->art_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_subid"] = reinterpret_cast<uint64_t>(&(df_structure->art_subid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_masterpiece_lostst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_masterpiece_lostst*>(p_df_structure);

	p_table["creation_event"] = reinterpret_cast<uint64_t>(&(df_structure->creation_event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["method"] = reinterpret_cast<uint64_t>(&(df_structure->method)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_change_hf_statest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_change_hf_statest*>(p_df_structure);

	p_table["hfid"] = reinterpret_cast<uint64_t>(&(df_structure->hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state"] = reinterpret_cast<uint64_t>(&(df_structure->state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_change_hf_jobst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_change_hf_jobst*>(p_df_structure);

	p_table["hfid"] = reinterpret_cast<uint64_t>(&(df_structure->hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_job"] = reinterpret_cast<uint64_t>(&(df_structure->new_job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_job"] = reinterpret_cast<uint64_t>(&(df_structure->old_job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_war_field_battlest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_war_field_battlest*>(p_df_structure);

	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_general_hf"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_general_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_general_hf"] = reinterpret_cast<uint64_t>(&(df_structure->defender_general_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_merc_enid"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_merc_enid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_merc_enid"] = reinterpret_cast<uint64_t>(&(df_structure->defender_merc_enid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_support_merc_enid_toggle"] = reinterpret_cast<uint64_t>(&(df_structure->a_support_merc_enid_toggle)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_body_abusedst__T_abuse_data__T_Impaled_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_body_abusedst::T_abuse_data::T_Impaled*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_body_abusedst__T_abuse_data__T_Piled_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_body_abusedst::T_abuse_data::T_Piled*>(p_df_structure);

	p_table["pile_type"] = reinterpret_cast<uint64_t>(&(df_structure->pile_type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_body_abusedst__T_abuse_data__T_Flayed_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_body_abusedst::T_abuse_data::T_Flayed*>(p_df_structure);

	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_body_abusedst__T_abuse_data__T_Hung_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_body_abusedst::T_abuse_data::T_Hung*>(p_df_structure);

	p_table["tree"] = reinterpret_cast<uint64_t>(&(df_structure->tree)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_body_abusedst__T_abuse_data__T_Animated_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_body_abusedst::T_abuse_data::T_Animated*>(p_df_structure);

	p_table["interaction"] = reinterpret_cast<uint64_t>(&(df_structure->interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_body_abusedst__T_abuse_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_body_abusedst::T_abuse_data*>(p_df_structure);

	p_table["Impaled"] = reinterpret_cast<uint64_t>(&(df_structure->Impaled)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Piled"] = reinterpret_cast<uint64_t>(&(df_structure->Piled)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Flayed"] = reinterpret_cast<uint64_t>(&(df_structure->Flayed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Hung"] = reinterpret_cast<uint64_t>(&(df_structure->Hung)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Animated"] = reinterpret_cast<uint64_t>(&(df_structure->Animated)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_body_abusedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_body_abusedst*>(p_df_structure);

	p_table["bodies"] = reinterpret_cast<uint64_t>(&(df_structure->bodies)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_entity"] = reinterpret_cast<uint64_t>(&(df_structure->victim_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abuse_type"] = reinterpret_cast<uint64_t>(&(df_structure->abuse_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abuse_data"] = reinterpret_cast<uint64_t>(&(df_structure->abuse_data)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_item_stolenst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_item_stolenst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_simple_battle_eventst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_simple_battle_eventst*>(p_df_structure);

	p_table["group1"] = reinterpret_cast<uint64_t>(&(df_structure->group1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group2"] = reinterpret_cast<uint64_t>(&(df_structure->group2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_reach_summitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_reach_summitst*>(p_df_structure);

	p_table["group"] = reinterpret_cast<uint64_t>(&(df_structure->group)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_travelst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_travelst*>(p_df_structure);

	p_table["group"] = reinterpret_cast<uint64_t>(&(df_structure->group)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_new_petst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_new_petst*>(p_df_structure);

	p_table["group"] = reinterpret_cast<uint64_t>(&(df_structure->group)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pets"] = reinterpret_cast<uint64_t>(&(df_structure->pets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hist_figure_revivedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hist_figure_revivedst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ghost_type"] = reinterpret_cast<uint64_t>(&(df_structure->ghost_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["actor_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->actor_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction"] = reinterpret_cast<uint64_t>(&(df_structure->interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_change_hf_body_statest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_change_hf_body_statest*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_state"] = reinterpret_cast<uint64_t>(&(df_structure->body_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_confrontedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_confrontedst*>(p_df_structure);

	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accuser"] = reinterpret_cast<uint64_t>(&(df_structure->accuser)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reasons"] = reinterpret_cast<uint64_t>(&(df_structure->reasons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_gains_secret_goalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_gains_secret_goalst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["goal"] = reinterpret_cast<uint64_t>(&(df_structure->goal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_site_disputest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_site_disputest*>(p_df_structure);

	p_table["dispute_type"] = reinterpret_cast<uint64_t>(&(df_structure->dispute_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_1"] = reinterpret_cast<uint64_t>(&(df_structure->entity_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_2"] = reinterpret_cast<uint64_t>(&(df_structure->entity_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_1"] = reinterpret_cast<uint64_t>(&(df_structure->site_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_2"] = reinterpret_cast<uint64_t>(&(df_structure->site_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_agreement_concludedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_agreement_concludedst*>(p_df_structure);

	p_table["agreement_id"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subject_id"] = reinterpret_cast<uint64_t>(&(df_structure->subject_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["concluder_hf"] = reinterpret_cast<uint64_t>(&(df_structure->concluder_hf)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_insurrection_endedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_insurrection_endedst*>(p_df_structure);

	p_table["target_civ"] = reinterpret_cast<uint64_t>(&(df_structure->target_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["outcome"] = reinterpret_cast<uint64_t>(&(df_structure->outcome)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_relationship_deniedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_relationship_deniedst*>(p_df_structure);

	p_table["seeker_hf"] = reinterpret_cast<uint64_t>(&(df_structure->seeker_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason_id"] = reinterpret_cast<uint64_t>(&(df_structure->reason_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_poetic_form_createdst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_poetic_form_createdst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["form"] = reinterpret_cast<uint64_t>(&(df_structure->form)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_musical_form_createdst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_musical_form_createdst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["form"] = reinterpret_cast<uint64_t>(&(df_structure->form)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_dance_form_createdst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_dance_form_createdst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["form"] = reinterpret_cast<uint64_t>(&(df_structure->form)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_written_content_composedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_written_content_composedst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["content"] = reinterpret_cast<uint64_t>(&(df_structure->content)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_change_hf_moodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_change_hf_moodst*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mood"] = reinterpret_cast<uint64_t>(&(df_structure->mood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_claim_formedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_claim_formedst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_profile"] = reinterpret_cast<uint64_t>(&(df_structure->position_profile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["claim_type"] = reinterpret_cast<uint64_t>(&(df_structure->claim_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_artifact_givenst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_artifact_givenst*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["giver_hf"] = reinterpret_cast<uint64_t>(&(df_structure->giver_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["giver_entity"] = reinterpret_cast<uint64_t>(&(df_structure->giver_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["receiver_hf"] = reinterpret_cast<uint64_t>(&(df_structure->receiver_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["receiver_entity"] = reinterpret_cast<uint64_t>(&(df_structure->receiver_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inherited"] = reinterpret_cast<uint64_t>(&(df_structure->inherited)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hf_recruited_unit_type_for_entityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hf_recruited_unit_type_for_entityst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_hfs_formed_reputation_relationshipst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_hfs_formed_reputation_relationshipst*>(p_df_structure);

	p_table["histfig1"] = reinterpret_cast<uint64_t>(&(df_structure->histfig1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["identity1"] = reinterpret_cast<uint64_t>(&(df_structure->identity1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["identity2"] = reinterpret_cast<uint64_t>(&(df_structure->identity2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rep1"] = reinterpret_cast<uint64_t>(&(df_structure->rep1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rep2"] = reinterpret_cast<uint64_t>(&(df_structure->rep2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_tactical_situationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_tactical_situationst*>(p_df_structure);

	p_table["a_tactician_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->a_tactician_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_tactician_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->d_tactician_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["a_tactics_roll"] = reinterpret_cast<uint64_t>(&(df_structure->a_tactics_roll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["d_tactics_roll"] = reinterpret_cast<uint64_t>(&(df_structure->d_tactics_roll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["situation"] = reinterpret_cast<uint64_t>(&(df_structure->situation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure"] = reinterpret_cast<uint64_t>(&(df_structure->structure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion"] = reinterpret_cast<uint64_t>(&(df_structure->subregion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_layer"] = reinterpret_cast<uint64_t>(&(df_structure->feature_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tactics_flags"] = reinterpret_cast<uint64_t>(&(df_structure->tactics_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_add_entity_site_profile_flagst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_add_entity_site_profile_flagst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["added_flags"] = reinterpret_cast<uint64_t>(&(df_structure->added_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_entity_dissolvedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_entity_dissolvedst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["circumstance"] = reinterpret_cast<uint64_t>(&(df_structure->circumstance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reason"] = reinterpret_cast<uint64_t>(&(df_structure->reason)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_duelst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_duelst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_hf"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_hf"] = reinterpret_cast<uint64_t>(&(df_structure->defender_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_abductionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_abductionst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["snatcher_hf"] = reinterpret_cast<uint64_t>(&(df_structure->snatcher_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_hf"] = reinterpret_cast<uint64_t>(&(df_structure->victim_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_theftst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_theftst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thief_civ"] = reinterpret_cast<uint64_t>(&(df_structure->thief_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_civ"] = reinterpret_cast<uint64_t>(&(df_structure->victim_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thief_hf"] = reinterpret_cast<uint64_t>(&(df_structure->thief_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stolen_item_types"] = reinterpret_cast<uint64_t>(&(df_structure->stolen_item_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stolen_item_subtypes"] = reinterpret_cast<uint64_t>(&(df_structure->stolen_item_subtypes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stolen_mat_types"] = reinterpret_cast<uint64_t>(&(df_structure->stolen_mat_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stolen_mat_indices"] = reinterpret_cast<uint64_t>(&(df_structure->stolen_mat_indices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stolen_item_ids"] = reinterpret_cast<uint64_t>(&(df_structure->stolen_item_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_beast_attackst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_beast_attackst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_hf"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_raidst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_raidst*>(p_df_structure);

	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thieves"] = reinterpret_cast<uint64_t>(&(df_structure->thieves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_era__T_title_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_era::T_title*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_1"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_2"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ordinal"] = reinterpret_cast<uint64_t>(&(df_structure->ordinal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["percent"] = reinterpret_cast<uint64_t>(&(df_structure->percent)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_era__T_details_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_era::T_details*>(p_df_structure);

	p_table["living_powers"] = reinterpret_cast<uint64_t>(&(df_structure->living_powers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["living_megabeasts"] = reinterpret_cast<uint64_t>(&(df_structure->living_megabeasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["living_semimegabeasts"] = reinterpret_cast<uint64_t>(&(df_structure->living_semimegabeasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["power_hf1"] = reinterpret_cast<uint64_t>(&(df_structure->power_hf1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["power_hf2"] = reinterpret_cast<uint64_t>(&(df_structure->power_hf2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["power_hf3"] = reinterpret_cast<uint64_t>(&(df_structure->power_hf3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civilized_races"] = reinterpret_cast<uint64_t>(&(df_structure->civilized_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civilized_total"] = reinterpret_cast<uint64_t>(&(df_structure->civilized_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civilized_mundane"] = reinterpret_cast<uint64_t>(&(df_structure->civilized_mundane)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_era_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_era*>(p_df_structure);

	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["details"] = reinterpret_cast<uint64_t>(&(df_structure->details)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_relationship_event_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::relationship_event*>(p_df_structure);

	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationship"] = reinterpret_cast<uint64_t>(&(df_structure->relationship)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_hf"] = reinterpret_cast<uint64_t>(&(df_structure->source_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_hf"] = reinterpret_cast<uint64_t>(&(df_structure->target_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_element"] = reinterpret_cast<uint64_t>(&(df_structure->next_element)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_relationship_event_supplement_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::relationship_event_supplement*>(p_df_structure);

	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occasion_type"] = reinterpret_cast<uint64_t>(&(df_structure->occasion_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_init_display_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::init_display*>(p_df_structure);

	p_table["flag"] = reinterpret_cast<uint64_t>(&(df_structure->flag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["windowed"] = reinterpret_cast<uint64_t>(&(df_structure->windowed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grid_x"] = reinterpret_cast<uint64_t>(&(df_structure->grid_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grid_y"] = reinterpret_cast<uint64_t>(&(df_structure->grid_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_fullscreen_width"] = reinterpret_cast<uint64_t>(&(df_structure->desired_fullscreen_width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_fullscreen_height"] = reinterpret_cast<uint64_t>(&(df_structure->desired_fullscreen_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_windowed_width"] = reinterpret_cast<uint64_t>(&(df_structure->desired_windowed_width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_windowed_height"] = reinterpret_cast<uint64_t>(&(df_structure->desired_windowed_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["partial_print_count"] = reinterpret_cast<uint64_t>(&(df_structure->partial_print_count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_init_font_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::init_font*>(p_df_structure);

	p_table["small_font_texpos"] = reinterpret_cast<uint64_t>(&(df_structure->small_font_texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["large_font_texpos"] = reinterpret_cast<uint64_t>(&(df_structure->large_font_texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["small_font_datapos"] = reinterpret_cast<uint64_t>(&(df_structure->small_font_datapos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["large_font_datapos"] = reinterpret_cast<uint64_t>(&(df_structure->large_font_datapos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["small_font_adjx"] = reinterpret_cast<uint64_t>(&(df_structure->small_font_adjx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["small_font_adjy"] = reinterpret_cast<uint64_t>(&(df_structure->small_font_adjy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["large_font_adjx"] = reinterpret_cast<uint64_t>(&(df_structure->large_font_adjx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["large_font_adjy"] = reinterpret_cast<uint64_t>(&(df_structure->large_font_adjy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["small_font_dispx"] = reinterpret_cast<uint64_t>(&(df_structure->small_font_dispx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["small_font_dispy"] = reinterpret_cast<uint64_t>(&(df_structure->small_font_dispy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["large_font_dispx"] = reinterpret_cast<uint64_t>(&(df_structure->large_font_dispx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["large_font_dispy"] = reinterpret_cast<uint64_t>(&(df_structure->large_font_dispy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_ttf"] = reinterpret_cast<uint64_t>(&(df_structure->use_ttf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ttf_limit"] = reinterpret_cast<uint64_t>(&(df_structure->ttf_limit)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_init_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::init*>(p_df_structure);

	p_table["display"] = reinterpret_cast<uint64_t>(&(df_structure->display)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["media"] = reinterpret_cast<uint64_t>(&(df_structure->media)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["input"] = reinterpret_cast<uint64_t>(&(df_structure->input)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["font"] = reinterpret_cast<uint64_t>(&(df_structure->font)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["window"] = reinterpret_cast<uint64_t>(&(df_structure->window)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_texture_handler_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::texture_handler*>(p_df_structure);

	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["texpos"] = reinterpret_cast<uint64_t>(&(df_structure->texpos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["datapos"] = reinterpret_cast<uint64_t>(&(df_structure->datapos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sources"] = reinterpret_cast<uint64_t>(&(df_structure->sources)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["targets"] = reinterpret_cast<uint64_t>(&(df_structure->targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effects"] = reinterpret_cast<uint64_t>(&(df_structure->effects)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->source_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_enid"] = reinterpret_cast<uint64_t>(&(df_structure->source_enid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["targets"] = reinterpret_cast<uint64_t>(&(df_structure->targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["targets_index"] = reinterpret_cast<uint64_t>(&(df_structure->targets_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intermittent"] = reinterpret_cast<uint64_t>(&(df_structure->intermittent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["locations"] = reinterpret_cast<uint64_t>(&(df_structure->locations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["arena_name"] = reinterpret_cast<uint64_t>(&(df_structure->arena_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_animatest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_animatest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syndrome"] = reinterpret_cast<uint64_t>(&(df_structure->syndrome)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_add_syndromest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_add_syndromest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syndrome"] = reinterpret_cast<uint64_t>(&(df_structure->syndrome)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_resurrectst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_resurrectst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syndrome"] = reinterpret_cast<uint64_t>(&(df_structure->syndrome)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_cleanst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_cleanst*>(p_df_structure);

	p_table["grime_level"] = reinterpret_cast<uint64_t>(&(df_structure->grime_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syndrome_tag"] = reinterpret_cast<uint64_t>(&(df_structure->syndrome_tag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_contactst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_contactst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_material_emissionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_material_emissionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_hidest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_hidest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_change_item_qualityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_change_item_qualityst*>(p_df_structure);

	p_table["quality_added"] = reinterpret_cast<uint64_t>(&(df_structure->quality_added)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_set"] = reinterpret_cast<uint64_t>(&(df_structure->quality_set)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_change_weatherst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_change_weatherst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_create_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_create_itemst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["probability"] = reinterpret_cast<uint64_t>(&(df_structure->probability)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quantity"] = reinterpret_cast<uint64_t>(&(df_structure->quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_min"] = reinterpret_cast<uint64_t>(&(df_structure->quality_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_max"] = reinterpret_cast<uint64_t>(&(df_structure->quality_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["create_artifact"] = reinterpret_cast<uint64_t>(&(df_structure->create_artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_propel_unitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_propel_unitst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["propel_force"] = reinterpret_cast<uint64_t>(&(df_structure->propel_force)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_effect_summon_unitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_effect_summon_unitst*>(p_df_structure);

	p_table["make_pet"] = reinterpret_cast<uint64_t>(&(df_structure->make_pet)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race_str"] = reinterpret_cast<uint64_t>(&(df_structure->race_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_str"] = reinterpret_cast<uint64_t>(&(df_structure->caste_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_creature_flags"] = reinterpret_cast<uint64_t>(&(df_structure->required_creature_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden_creature_flags"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden_creature_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_caste_flags"] = reinterpret_cast<uint64_t>(&(df_structure->required_caste_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden_caste_flags"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden_caste_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time_range_min"] = reinterpret_cast<uint64_t>(&(df_structure->time_range_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time_range_max"] = reinterpret_cast<uint64_t>(&(df_structure->time_range_max)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_secretst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_secretst*>(p_df_structure);

	p_table["learn_flags"] = reinterpret_cast<uint64_t>(&(df_structure->learn_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spheres"] = reinterpret_cast<uint64_t>(&(df_structure->spheres)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["goals"] = reinterpret_cast<uint64_t>(&(df_structure->goals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["book_title_filename"] = reinterpret_cast<uint64_t>(&(df_structure->book_title_filename)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["book_name_filename"] = reinterpret_cast<uint64_t>(&(df_structure->book_name_filename)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_source_deityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_source_deityst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["usage_hint"] = reinterpret_cast<uint64_t>(&(df_structure->usage_hint)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_target_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_target*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["manual_input"] = reinterpret_cast<uint64_t>(&(df_structure->manual_input)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location"] = reinterpret_cast<uint64_t>(&(df_structure->location)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reference_name"] = reinterpret_cast<uint64_t>(&(df_structure->reference_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reference_distance"] = reinterpret_cast<uint64_t>(&(df_structure->reference_distance)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_target_corpsest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_target_corpsest*>(p_df_structure);

	p_table["target_info"] = reinterpret_cast<uint64_t>(&(df_structure->target_info)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_target_creaturest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_target_creaturest*>(p_df_structure);

	p_table["target_info"] = reinterpret_cast<uint64_t>(&(df_structure->target_info)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_target_materialst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_target_materialst*>(p_df_structure);

	p_table["material_str"] = reinterpret_cast<uint64_t>(&(df_structure->material_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_interaction_index"] = reinterpret_cast<uint64_t>(&(df_structure->parent_interaction_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["breath_attack_type"] = reinterpret_cast<uint64_t>(&(df_structure->breath_attack_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["restrictions"] = reinterpret_cast<uint64_t>(&(df_structure->restrictions)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interaction_target_locationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interaction_target_locationst*>(p_df_structure);

}

void generate_itemdef_ammost_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_ammost*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_class"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacks"] = reinterpret_cast<uint64_t>(&(df_structure->attacks)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_armorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_armorst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_preplural"] = reinterpret_cast<uint64_t>(&(df_structure->name_preplural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_placeholder"] = reinterpret_cast<uint64_t>(&(df_structure->material_placeholder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorlevel"] = reinterpret_cast<uint64_t>(&(df_structure->armorlevel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ubstep"] = reinterpret_cast<uint64_t>(&(df_structure->ubstep)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lbstep"] = reinterpret_cast<uint64_t>(&(df_structure->lbstep)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["props"] = reinterpret_cast<uint64_t>(&(df_structure->props)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_glovesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_glovesst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorlevel"] = reinterpret_cast<uint64_t>(&(df_structure->armorlevel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["upstep"] = reinterpret_cast<uint64_t>(&(df_structure->upstep)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["props"] = reinterpret_cast<uint64_t>(&(df_structure->props)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_helmst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_helmst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorlevel"] = reinterpret_cast<uint64_t>(&(df_structure->armorlevel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["props"] = reinterpret_cast<uint64_t>(&(df_structure->props)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_instrumentst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_instrumentst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["music_skill"] = reinterpret_cast<uint64_t>(&(df_structure->music_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pieces"] = reinterpret_cast<uint64_t>(&(df_structure->pieces)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dominant_instrument_piece"] = reinterpret_cast<uint64_t>(&(df_structure->dominant_instrument_piece)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pitch_range_min"] = reinterpret_cast<uint64_t>(&(df_structure->pitch_range_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pitch_range_max"] = reinterpret_cast<uint64_t>(&(df_structure->pitch_range_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volume_mb_min"] = reinterpret_cast<uint64_t>(&(df_structure->volume_mb_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volume_mb_max"] = reinterpret_cast<uint64_t>(&(df_structure->volume_mb_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sound_production"] = reinterpret_cast<uint64_t>(&(df_structure->sound_production)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sound_production_parm1"] = reinterpret_cast<uint64_t>(&(df_structure->sound_production_parm1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sound_production_parm2"] = reinterpret_cast<uint64_t>(&(df_structure->sound_production_parm2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_100"] = reinterpret_cast<uint64_t>(&(df_structure->unk_100)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_110"] = reinterpret_cast<uint64_t>(&(df_structure->unk_110)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pitch_choice"] = reinterpret_cast<uint64_t>(&(df_structure->pitch_choice)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pitch_choice_parm1"] = reinterpret_cast<uint64_t>(&(df_structure->pitch_choice_parm1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pitch_choice_parm2"] = reinterpret_cast<uint64_t>(&(df_structure->pitch_choice_parm2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_150"] = reinterpret_cast<uint64_t>(&(df_structure->unk_150)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_160"] = reinterpret_cast<uint64_t>(&(df_structure->unk_160)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tuning"] = reinterpret_cast<uint64_t>(&(df_structure->tuning)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tuning_parm"] = reinterpret_cast<uint64_t>(&(df_structure->tuning_parm)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_190"] = reinterpret_cast<uint64_t>(&(df_structure->unk_190)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["registers"] = reinterpret_cast<uint64_t>(&(df_structure->registers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timbre"] = reinterpret_cast<uint64_t>(&(df_structure->timbre)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["description"] = reinterpret_cast<uint64_t>(&(df_structure->description)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_instrument_register_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::instrument_register*>(p_df_structure);

	p_table["pitch_range_min"] = reinterpret_cast<uint64_t>(&(df_structure->pitch_range_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pitch_range_max"] = reinterpret_cast<uint64_t>(&(df_structure->pitch_range_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timbres"] = reinterpret_cast<uint64_t>(&(df_structure->timbres)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_pantsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_pantsst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_preplural"] = reinterpret_cast<uint64_t>(&(df_structure->name_preplural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_placeholder"] = reinterpret_cast<uint64_t>(&(df_structure->material_placeholder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorlevel"] = reinterpret_cast<uint64_t>(&(df_structure->armorlevel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lbstep"] = reinterpret_cast<uint64_t>(&(df_structure->lbstep)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["props"] = reinterpret_cast<uint64_t>(&(df_structure->props)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_shoesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_shoesst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorlevel"] = reinterpret_cast<uint64_t>(&(df_structure->armorlevel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["upstep"] = reinterpret_cast<uint64_t>(&(df_structure->upstep)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["props"] = reinterpret_cast<uint64_t>(&(df_structure->props)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_toolst__T_default_improvements_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_toolst::T_default_improvements*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_type"] = reinterpret_cast<uint64_t>(&(df_structure->specific_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["instrument_part"] = reinterpret_cast<uint64_t>(&(df_structure->instrument_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["restriction"] = reinterpret_cast<uint64_t>(&(df_structure->restriction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_toolst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_toolst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tool_use"] = reinterpret_cast<uint64_t>(&(df_structure->tool_use)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_melee"] = reinterpret_cast<uint64_t>(&(df_structure->skill_melee)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_ranged"] = reinterpret_cast<uint64_t>(&(df_structure->skill_ranged)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ranged_ammo"] = reinterpret_cast<uint64_t>(&(df_structure->ranged_ammo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["two_handed"] = reinterpret_cast<uint64_t>(&(df_structure->two_handed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["minimum_size"] = reinterpret_cast<uint64_t>(&(df_structure->minimum_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacks"] = reinterpret_cast<uint64_t>(&(df_structure->attacks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoot_force"] = reinterpret_cast<uint64_t>(&(df_structure->shoot_force)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoot_maxvel"] = reinterpret_cast<uint64_t>(&(df_structure->shoot_maxvel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["container_capacity"] = reinterpret_cast<uint64_t>(&(df_structure->container_capacity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shape_category_str"] = reinterpret_cast<uint64_t>(&(df_structure->shape_category_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shape_category"] = reinterpret_cast<uint64_t>(&(df_structure->shape_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["description"] = reinterpret_cast<uint64_t>(&(df_structure->description)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["default_improvements"] = reinterpret_cast<uint64_t>(&(df_structure->default_improvements)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_trapcompst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_trapcompst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hits"] = reinterpret_cast<uint64_t>(&(df_structure->hits)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacks"] = reinterpret_cast<uint64_t>(&(df_structure->attacks)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemdef_weaponst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemdef_weaponst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_melee"] = reinterpret_cast<uint64_t>(&(df_structure->skill_melee)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_ranged"] = reinterpret_cast<uint64_t>(&(df_structure->skill_ranged)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ranged_ammo"] = reinterpret_cast<uint64_t>(&(df_structure->ranged_ammo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["two_handed"] = reinterpret_cast<uint64_t>(&(df_structure->two_handed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["minimum_size"] = reinterpret_cast<uint64_t>(&(df_structure->minimum_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_size"] = reinterpret_cast<uint64_t>(&(df_structure->material_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacks"] = reinterpret_cast<uint64_t>(&(df_structure->attacks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoot_force"] = reinterpret_cast<uint64_t>(&(df_structure->shoot_force)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoot_maxvel"] = reinterpret_cast<uint64_t>(&(df_structure->shoot_maxvel)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_dye_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::dye_info*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dyer"] = reinterpret_cast<uint64_t>(&(df_structure->dyer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality"] = reinterpret_cast<uint64_t>(&(df_structure->quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_rating"] = reinterpret_cast<uint64_t>(&(df_structure->skill_rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maker"] = reinterpret_cast<uint64_t>(&(df_structure->maker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["masterpiece_event"] = reinterpret_cast<uint64_t>(&(df_structure->masterpiece_event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality"] = reinterpret_cast<uint64_t>(&(df_structure->quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_rating"] = reinterpret_cast<uint64_t>(&(df_structure->skill_rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_art_imagest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_art_imagest*>(p_df_structure);

	p_table["image"] = reinterpret_cast<uint64_t>(&(df_structure->image)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_coveredst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_coveredst*>(p_df_structure);

	p_table["cover_flags"] = reinterpret_cast<uint64_t>(&(df_structure->cover_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shape"] = reinterpret_cast<uint64_t>(&(df_structure->shape)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_rings_hangingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_rings_hangingst*>(p_df_structure);

}

void generate_itemimprovement_bandsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_bandsst*>(p_df_structure);

	p_table["shape"] = reinterpret_cast<uint64_t>(&(df_structure->shape)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_spikesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_spikesst*>(p_df_structure);

}

void generate_itemimprovement_itemspecificst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_itemspecificst*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_threadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_threadst*>(p_df_structure);

	p_table["dye"] = reinterpret_cast<uint64_t>(&(df_structure->dye)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_clothst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_clothst*>(p_df_structure);

}

void generate_itemimprovement_sewn_imagest__T_cloth_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_sewn_imagest::T_cloth*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality"] = reinterpret_cast<uint64_t>(&(df_structure->quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_sewn_imagest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_sewn_imagest*>(p_df_structure);

	p_table["image"] = reinterpret_cast<uint64_t>(&(df_structure->image)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cloth"] = reinterpret_cast<uint64_t>(&(df_structure->cloth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dye"] = reinterpret_cast<uint64_t>(&(df_structure->dye)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_pagesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_pagesst*>(p_df_structure);

	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contents"] = reinterpret_cast<uint64_t>(&(df_structure->contents)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_illustrationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_illustrationst*>(p_df_structure);

	p_table["image"] = reinterpret_cast<uint64_t>(&(df_structure->image)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_instrument_piecest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_instrument_piecest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_itemimprovement_writingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::itemimprovement_writingst*>(p_df_structure);

	p_table["contents"] = reinterpret_cast<uint64_t>(&(df_structure->contents)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_written_content_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::written_content*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_start"] = reinterpret_cast<uint64_t>(&(df_structure->page_start)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_end"] = reinterpret_cast<uint64_t>(&(df_structure->page_end)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["refs"] = reinterpret_cast<uint64_t>(&(df_structure->refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ref_aux"] = reinterpret_cast<uint64_t>(&(df_structure->ref_aux)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["poetic_form"] = reinterpret_cast<uint64_t>(&(df_structure->poetic_form)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["styles"] = reinterpret_cast<uint64_t>(&(df_structure->styles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["style_strength"] = reinterpret_cast<uint64_t>(&(df_structure->style_strength)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["author"] = reinterpret_cast<uint64_t>(&(df_structure->author)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["author_roll"] = reinterpret_cast<uint64_t>(&(df_structure->author_roll)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_engraving_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::engraving*>(p_df_structure);

	p_table["artist"] = reinterpret_cast<uint64_t>(&(df_structure->artist)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["masterpiece_event"] = reinterpret_cast<uint64_t>(&(df_structure->masterpiece_event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_rating"] = reinterpret_cast<uint64_t>(&(df_structure->skill_rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_id"] = reinterpret_cast<uint64_t>(&(df_structure->art_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_subid"] = reinterpret_cast<uint64_t>(&(df_structure->art_subid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality"] = reinterpret_cast<uint64_t>(&(df_structure->quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_magicness_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_magicness*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_spatter_common_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::spatter_common*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature"] = reinterpret_cast<uint64_t>(&(df_structure->temperature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["base_flags"] = reinterpret_cast<uint64_t>(&(df_structure->base_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_option_eat_unit_contaminantst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_option_eat_unit_contaminantst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatter"] = reinterpret_cast<uint64_t>(&(df_structure->spatter)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_option_eat_item_contaminantst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_option_eat_item_contaminantst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inv_item"] = reinterpret_cast<uint64_t>(&(df_structure->inv_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatter"] = reinterpret_cast<uint64_t>(&(df_structure->spatter)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_adventure_option_view_contaminantst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::adventure_option_view_contaminantst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatter"] = reinterpret_cast<uint64_t>(&(df_structure->spatter)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_spatter_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::spatter*>(p_df_structure);

	p_table["body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item*>(p_df_structure);

	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["age"] = reinterpret_cast<uint64_t>(&(df_structure->age)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_refs"] = reinterpret_cast<uint64_t>(&(df_structure->specific_refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["general_refs"] = reinterpret_cast<uint64_t>(&(df_structure->general_refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_data_id"] = reinterpret_cast<uint64_t>(&(df_structure->world_data_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_data_subid"] = reinterpret_cast<uint64_t>(&(df_structure->world_data_subid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpile_countdown"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile_countdown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpile_delay"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile_delay)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["base_uniform_score"] = reinterpret_cast<uint64_t>(&(df_structure->base_uniform_score)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["walkable_id"] = reinterpret_cast<uint64_t>(&(df_structure->walkable_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spec_heat"] = reinterpret_cast<uint64_t>(&(df_structure->spec_heat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ignite_point"] = reinterpret_cast<uint64_t>(&(df_structure->ignite_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["heatdam_point"] = reinterpret_cast<uint64_t>(&(df_structure->heatdam_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colddam_point"] = reinterpret_cast<uint64_t>(&(df_structure->colddam_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["boiling_point"] = reinterpret_cast<uint64_t>(&(df_structure->boiling_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["melting_point"] = reinterpret_cast<uint64_t>(&(df_structure->melting_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fixed_temp"] = reinterpret_cast<uint64_t>(&(df_structure->fixed_temp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weight"] = reinterpret_cast<uint64_t>(&(df_structure->weight)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weight_fraction"] = reinterpret_cast<uint64_t>(&(df_structure->weight_fraction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_kill_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_kill_info*>(p_df_structure);

	p_table["targets"] = reinterpret_cast<uint64_t>(&(df_structure->targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slayers"] = reinterpret_cast<uint64_t>(&(df_structure->slayers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slayer_kill_counts"] = reinterpret_cast<uint64_t>(&(df_structure->slayer_kill_counts)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_history_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_history_info*>(p_df_structure);

	p_table["kills"] = reinterpret_cast<uint64_t>(&(df_structure->kills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_counter"] = reinterpret_cast<uint64_t>(&(df_structure->attack_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defence_counter"] = reinterpret_cast<uint64_t>(&(df_structure->defence_counter)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_actual_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_actual*>(p_df_structure);

	p_table["stack_size"] = reinterpret_cast<uint64_t>(&(df_structure->stack_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["history_info"] = reinterpret_cast<uint64_t>(&(df_structure->history_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["magic"] = reinterpret_cast<uint64_t>(&(df_structure->magic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contaminants"] = reinterpret_cast<uint64_t>(&(df_structure->contaminants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature"] = reinterpret_cast<uint64_t>(&(df_structure->temperature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wear"] = reinterpret_cast<uint64_t>(&(df_structure->wear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wear_timer"] = reinterpret_cast<uint64_t>(&(df_structure->wear_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temp_updated_frame"] = reinterpret_cast<uint64_t>(&(df_structure->temp_updated_frame)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_crafted_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_crafted*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maker_race"] = reinterpret_cast<uint64_t>(&(df_structure->maker_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality"] = reinterpret_cast<uint64_t>(&(df_structure->quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_used"] = reinterpret_cast<uint64_t>(&(df_structure->skill_used)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maker"] = reinterpret_cast<uint64_t>(&(df_structure->maker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["masterpiece_event"] = reinterpret_cast<uint64_t>(&(df_structure->masterpiece_event)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_constructed_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_constructed*>(p_df_structure);

	p_table["improvements"] = reinterpret_cast<uint64_t>(&(df_structure->improvements)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_body_component_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::body_component_info*>(p_df_structure);

	p_table["body_part_status"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["numbered_masks"] = reinterpret_cast<uint64_t>(&(df_structure->numbered_masks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nonsolid_remaining"] = reinterpret_cast<uint64_t>(&(df_structure->nonsolid_remaining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_status"] = reinterpret_cast<uint64_t>(&(df_structure->layer_status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_wound_area"] = reinterpret_cast<uint64_t>(&(df_structure->layer_wound_area)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_cut_fraction"] = reinterpret_cast<uint64_t>(&(df_structure->layer_cut_fraction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_dent_fraction"] = reinterpret_cast<uint64_t>(&(df_structure->layer_dent_fraction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_effect_fraction"] = reinterpret_cast<uint64_t>(&(df_structure->layer_effect_fraction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_body_component__T_body_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_body_component::T_body*>(p_df_structure);

	p_table["wounds"] = reinterpret_cast<uint64_t>(&(df_structure->wounds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_100"] = reinterpret_cast<uint64_t>(&(df_structure->unk_100)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["components"] = reinterpret_cast<uint64_t>(&(df_structure->components)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["physical_attr_value"] = reinterpret_cast<uint64_t>(&(df_structure->physical_attr_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["physical_attr_unk2"] = reinterpret_cast<uint64_t>(&(df_structure->physical_attr_unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size_info"] = reinterpret_cast<uint64_t>(&(df_structure->size_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_relsize"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_relsize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->body_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->bp_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size_modifier"] = reinterpret_cast<uint64_t>(&(df_structure->size_modifier)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_body_component__T_appearance_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_body_component::T_appearance*>(p_df_structure);

	p_table["colors"] = reinterpret_cast<uint64_t>(&(df_structure->colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1f8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1f8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_208"] = reinterpret_cast<uint64_t>(&(df_structure->unk_208)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_218"] = reinterpret_cast<uint64_t>(&(df_structure->unk_218)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_body_component__T_bone1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_body_component::T_bone1*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_body_component__T_bone2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_body_component::T_bone2*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_body_component_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_body_component*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sex"] = reinterpret_cast<uint64_t>(&(df_structure->sex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race2"] = reinterpret_cast<uint64_t>(&(df_structure->race2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste2"] = reinterpret_cast<uint64_t>(&(df_structure->caste2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body"] = reinterpret_cast<uint64_t>(&(df_structure->body)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_year"] = reinterpret_cast<uint64_t>(&(df_structure->birth_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_time"] = reinterpret_cast<uint64_t>(&(df_structure->birth_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse_year"] = reinterpret_cast<uint64_t>(&(df_structure->curse_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse_time"] = reinterpret_cast<uint64_t>(&(df_structure->curse_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_year_bias"] = reinterpret_cast<uint64_t>(&(df_structure->birth_year_bias)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_time_bias"] = reinterpret_cast<uint64_t>(&(df_structure->birth_time_bias)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_year"] = reinterpret_cast<uint64_t>(&(df_structure->death_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_time"] = reinterpret_cast<uint64_t>(&(df_structure->death_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appearance"] = reinterpret_cast<uint64_t>(&(df_structure->appearance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blood_count"] = reinterpret_cast<uint64_t>(&(df_structure->blood_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stored_fat"] = reinterpret_cast<uint64_t>(&(df_structure->stored_fat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id2"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["corpse_flags"] = reinterpret_cast<uint64_t>(&(df_structure->corpse_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id2"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3401"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3401)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_amount"] = reinterpret_cast<uint64_t>(&(df_structure->material_amount)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bone1"] = reinterpret_cast<uint64_t>(&(df_structure->bone1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bone2"] = reinterpret_cast<uint64_t>(&(df_structure->bone2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_corpsest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_corpsest*>(p_df_structure);

}

void generate_item_corpsepiecest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_corpsepiecest*>(p_df_structure);

}

void generate_item_liquipowder_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_liquipowder*>(p_df_structure);

	p_table["mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dimension"] = reinterpret_cast<uint64_t>(&(df_structure->dimension)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_liquid_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_liquid*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_powder_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_powder*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_barst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_barst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dimension"] = reinterpret_cast<uint64_t>(&(df_structure->dimension)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_smallgemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_smallgemst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shape"] = reinterpret_cast<uint64_t>(&(df_structure->shape)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_blocksst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_blocksst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_roughst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_roughst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_boulderst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_boulderst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_woodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_woodst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_branchst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_branchst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_rockst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_rockst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sharpness"] = reinterpret_cast<uint64_t>(&(df_structure->sharpness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_84"] = reinterpret_cast<uint64_t>(&(df_structure->unk_84)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_seedsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_seedsst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grow_counter"] = reinterpret_cast<uint64_t>(&(df_structure->grow_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["planting_skill"] = reinterpret_cast<uint64_t>(&(df_structure->planting_skill)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_skin_tannedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_skin_tannedst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_80"] = reinterpret_cast<uint64_t>(&(df_structure->unk_80)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_meatst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_meatst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_plantst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_plantst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_plant_growthst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_plant_growthst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_cheesest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_cheesest*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_globst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_globst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dimension"] = reinterpret_cast<uint64_t>(&(df_structure->dimension)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_remainsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_remainsst*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_fishst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_fishst*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_fish_rawst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_fish_rawst*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_foodst__T_ingredients_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_foodst::T_ingredients*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maker"] = reinterpret_cast<uint64_t>(&(df_structure->maker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality"] = reinterpret_cast<uint64_t>(&(df_structure->quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_foodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_foodst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recipe_id"] = reinterpret_cast<uint64_t>(&(df_structure->recipe_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ingredients"] = reinterpret_cast<uint64_t>(&(df_structure->ingredients)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rot_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rot_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_drinkst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_drinkst*>(p_df_structure);

}

void generate_item_powder_miscst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_powder_miscst*>(p_df_structure);

}

void generate_item_liquid_miscst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_liquid_miscst*>(p_df_structure);

	p_table["unk_88"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_threadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_threadst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dye_mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->dye_mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dye_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->dye_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_88"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dye_quality"] = reinterpret_cast<uint64_t>(&(df_structure->dye_quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_92"] = reinterpret_cast<uint64_t>(&(df_structure->unk_92)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_94"] = reinterpret_cast<uint64_t>(&(df_structure->unk_94)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_98"] = reinterpret_cast<uint64_t>(&(df_structure->unk_98)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dimension"] = reinterpret_cast<uint64_t>(&(df_structure->dimension)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_doorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_doorst*>(p_df_structure);

}

void generate_item_floodgatest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_floodgatest*>(p_df_structure);

}

void generate_item_bedst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_bedst*>(p_df_structure);

}

void generate_item_chairst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_chairst*>(p_df_structure);

}

void generate_item_chainst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_chainst*>(p_df_structure);

}

void generate_item_flaskst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_flaskst*>(p_df_structure);

}

void generate_item_gobletst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_gobletst*>(p_df_structure);

}

void generate_item_windowst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_windowst*>(p_df_structure);

}

void generate_item_cagest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_cagest*>(p_df_structure);

}

void generate_item_bucketst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_bucketst*>(p_df_structure);

}

void generate_item_animaltrapst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_animaltrapst*>(p_df_structure);

}

void generate_item_tablest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_tablest*>(p_df_structure);

}

void generate_item_coffinst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_coffinst*>(p_df_structure);

}

void generate_item_boxst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_boxst*>(p_df_structure);

}

void generate_item_armorstandst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_armorstandst*>(p_df_structure);

}

void generate_item_weaponrackst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_weaponrackst*>(p_df_structure);

}

void generate_item_cabinetst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_cabinetst*>(p_df_structure);

}

void generate_item_amuletst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_amuletst*>(p_df_structure);

}

void generate_item_scepterst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_scepterst*>(p_df_structure);

}

void generate_item_crownst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_crownst*>(p_df_structure);

}

void generate_item_ringst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_ringst*>(p_df_structure);

}

void generate_item_earringst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_earringst*>(p_df_structure);

}

void generate_item_braceletst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_braceletst*>(p_df_structure);

}

void generate_item_anvilst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_anvilst*>(p_df_structure);

}

void generate_item_backpackst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_backpackst*>(p_df_structure);

}

void generate_item_quiverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_quiverst*>(p_df_structure);

}

void generate_item_catapultpartsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_catapultpartsst*>(p_df_structure);

}

void generate_item_ballistapartsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_ballistapartsst*>(p_df_structure);

}

void generate_item_trappartsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_trappartsst*>(p_df_structure);

}

void generate_item_pipe_sectionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_pipe_sectionst*>(p_df_structure);

}

void generate_item_hatch_coverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_hatch_coverst*>(p_df_structure);

}

void generate_item_gratest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_gratest*>(p_df_structure);

}

void generate_item_quernst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_quernst*>(p_df_structure);

}

void generate_item_millstonest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_millstonest*>(p_df_structure);

}

void generate_item_splintst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_splintst*>(p_df_structure);

}

void generate_item_crutchst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_crutchst*>(p_df_structure);

}

void generate_item_traction_benchst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_traction_benchst*>(p_df_structure);

}

void generate_item_instrumentst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_instrumentst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_toyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_toyst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_armorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_armorst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_shoesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_shoesst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_shieldst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_shieldst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_helmst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_helmst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_glovesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_glovesst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["handedness"] = reinterpret_cast<uint64_t>(&(df_structure->handedness)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_pantsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_pantsst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_siegeammost_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_siegeammost*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sharpness"] = reinterpret_cast<uint64_t>(&(df_structure->sharpness)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_weaponst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_weaponst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sharpness"] = reinterpret_cast<uint64_t>(&(df_structure->sharpness)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_ammost_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_ammost*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sharpness"] = reinterpret_cast<uint64_t>(&(df_structure->sharpness)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_trapcompst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_trapcompst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sharpness"] = reinterpret_cast<uint64_t>(&(df_structure->sharpness)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_toolst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_toolst*>(p_df_structure);

	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sharpness"] = reinterpret_cast<uint64_t>(&(df_structure->sharpness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpile"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vehicle_id"] = reinterpret_cast<uint64_t>(&(df_structure->vehicle_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_barrelst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_barrelst*>(p_df_structure);

	p_table["stockpile"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_binst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_binst*>(p_df_structure);

	p_table["stockpile"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_gemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_gemst*>(p_df_structure);

	p_table["shape"] = reinterpret_cast<uint64_t>(&(df_structure->shape)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_statuest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_statuest*>(p_df_structure);

	p_table["image"] = reinterpret_cast<uint64_t>(&(df_structure->image)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["description"] = reinterpret_cast<uint64_t>(&(df_structure->description)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_figurinest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_figurinest*>(p_df_structure);

	p_table["image"] = reinterpret_cast<uint64_t>(&(df_structure->image)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["description"] = reinterpret_cast<uint64_t>(&(df_structure->description)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_slabst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_slabst*>(p_df_structure);

	p_table["description"] = reinterpret_cast<uint64_t>(&(df_structure->description)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["engraving_type"] = reinterpret_cast<uint64_t>(&(df_structure->engraving_type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_orthopedic_castst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_orthopedic_castst*>(p_df_structure);

	p_table["body_part"] = reinterpret_cast<uint64_t>(&(df_structure->body_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_coinst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_coinst*>(p_df_structure);

	p_table["coin_batch"] = reinterpret_cast<uint64_t>(&(df_structure->coin_batch)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_totemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_totemst*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_idx"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_clothst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_clothst*>(p_df_structure);

	p_table["dimension"] = reinterpret_cast<uint64_t>(&(df_structure->dimension)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_bookst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_bookst*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_ballistaarrowheadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_ballistaarrowheadst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sharpness"] = reinterpret_cast<uint64_t>(&(df_structure->sharpness)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_sheetst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_sheetst*>(p_df_structure);

	p_table["dimension"] = reinterpret_cast<uint64_t>(&(df_structure->dimension)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_list_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job_list_link*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prev"] = reinterpret_cast<uint64_t>(&(df_structure->prev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next"] = reinterpret_cast<uint64_t>(&(df_structure->next)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_link"] = reinterpret_cast<uint64_t>(&(df_structure->list_link)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["posting_index"] = reinterpret_cast<uint64_t>(&(df_structure->posting_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job_type"] = reinterpret_cast<uint64_t>(&(df_structure->job_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->job_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["completion_timer"] = reinterpret_cast<uint64_t>(&(df_structure->completion_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_category"] = reinterpret_cast<uint64_t>(&(df_structure->item_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_category"] = reinterpret_cast<uint64_t>(&(df_structure->material_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_name"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["expire_timer"] = reinterpret_cast<uint64_t>(&(df_structure->expire_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recheck_cntdn"] = reinterpret_cast<uint64_t>(&(df_structure->recheck_cntdn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wait_timer"] = reinterpret_cast<uint64_t>(&(df_structure->wait_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk11"] = reinterpret_cast<uint64_t>(&(df_structure->unk11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_refs"] = reinterpret_cast<uint64_t>(&(df_structure->specific_refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["general_refs"] = reinterpret_cast<uint64_t>(&(df_structure->general_refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job_items"] = reinterpret_cast<uint64_t>(&(df_structure->job_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guide_path"] = reinterpret_cast<uint64_t>(&(df_structure->guide_path)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_path_index"] = reinterpret_cast<uint64_t>(&(df_structure->cur_path_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4020_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4020_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_spec"] = reinterpret_cast<uint64_t>(&(df_structure->art_spec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_item_ref_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job_item_ref*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["role"] = reinterpret_cast<uint64_t>(&(df_structure->role)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_fetching"] = reinterpret_cast<uint64_t>(&(df_structure->is_fetching)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job_item_idx"] = reinterpret_cast<uint64_t>(&(df_structure->job_item_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job_item*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags1"] = reinterpret_cast<uint64_t>(&(df_structure->flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quantity"] = reinterpret_cast<uint64_t>(&(df_structure->quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vector_id"] = reinterpret_cast<uint64_t>(&(df_structure->vector_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags3"] = reinterpret_cast<uint64_t>(&(df_structure->flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags4"] = reinterpret_cast<uint64_t>(&(df_structure->flags4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags5"] = reinterpret_cast<uint64_t>(&(df_structure->flags5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metal_ore"] = reinterpret_cast<uint64_t>(&(df_structure->metal_ore)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_class"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_material_reaction_product"] = reinterpret_cast<uint64_t>(&(df_structure->has_material_reaction_product)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_dimension"] = reinterpret_cast<uint64_t>(&(df_structure->min_dimension)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reagent_index"] = reinterpret_cast<uint64_t>(&(df_structure->reagent_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contains"] = reinterpret_cast<uint64_t>(&(df_structure->contains)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_tool_use"] = reinterpret_cast<uint64_t>(&(df_structure->has_tool_use)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_item_filter_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job_item_filter*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags1"] = reinterpret_cast<uint64_t>(&(df_structure->flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_vector"] = reinterpret_cast<uint64_t>(&(df_structure->item_vector)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->use_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_flags2"] = reinterpret_cast<uint64_t>(&(df_structure->use_flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags3"] = reinterpret_cast<uint64_t>(&(df_structure->flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_flags3"] = reinterpret_cast<uint64_t>(&(df_structure->use_flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags4"] = reinterpret_cast<uint64_t>(&(df_structure->flags4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_flags4"] = reinterpret_cast<uint64_t>(&(df_structure->use_flags4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags5"] = reinterpret_cast<uint64_t>(&(df_structure->flags5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_flags5"] = reinterpret_cast<uint64_t>(&(df_structure->use_flags5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_class"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_material_reaction_product"] = reinterpret_cast<uint64_t>(&(df_structure->has_material_reaction_product)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metal_ore"] = reinterpret_cast<uint64_t>(&(df_structure->metal_ore)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_metal_ore"] = reinterpret_cast<uint64_t>(&(df_structure->use_metal_ore)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_reaction_class"] = reinterpret_cast<uint64_t>(&(df_structure->use_reaction_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_reaction_product"] = reinterpret_cast<uint64_t>(&(df_structure->use_reaction_product)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_dimension"] = reinterpret_cast<uint64_t>(&(df_structure->min_dimension)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contains"] = reinterpret_cast<uint64_t>(&(df_structure->contains)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_contains"] = reinterpret_cast<uint64_t>(&(df_structure->use_contains)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_tool_use"] = reinterpret_cast<uint64_t>(&(df_structure->has_tool_use)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_melee_skill"] = reinterpret_cast<uint64_t>(&(df_structure->has_melee_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job"] = reinterpret_cast<uint64_t>(&(df_structure->job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_74"] = reinterpret_cast<uint64_t>(&(df_structure->unk_74)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4305_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4305_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["burrows"] = reinterpret_cast<uint64_t>(&(df_structure->burrows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_burrows"] = reinterpret_cast<uint64_t>(&(df_structure->use_burrows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["take_from"] = reinterpret_cast<uint64_t>(&(df_structure->take_from)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_manager_order_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::manager_order*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job_type"] = reinterpret_cast<uint64_t>(&(df_structure->job_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_name"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_category"] = reinterpret_cast<uint64_t>(&(df_structure->item_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_category"] = reinterpret_cast<uint64_t>(&(df_structure->material_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_spec"] = reinterpret_cast<uint64_t>(&(df_structure->art_spec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount_left"] = reinterpret_cast<uint64_t>(&(df_structure->amount_left)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount_total"] = reinterpret_cast<uint64_t>(&(df_structure->amount_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status"] = reinterpret_cast<uint64_t>(&(df_structure->status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["frequency"] = reinterpret_cast<uint64_t>(&(df_structure->frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finished_year"] = reinterpret_cast<uint64_t>(&(df_structure->finished_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finished_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->finished_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workshop_id"] = reinterpret_cast<uint64_t>(&(df_structure->workshop_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_workshops"] = reinterpret_cast<uint64_t>(&(df_structure->max_workshops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_conditions"] = reinterpret_cast<uint64_t>(&(df_structure->item_conditions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["order_conditions"] = reinterpret_cast<uint64_t>(&(df_structure->order_conditions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_manager_order_condition_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::manager_order_condition_item*>(p_df_structure);

	p_table["compare_type"] = reinterpret_cast<uint64_t>(&(df_structure->compare_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["compare_val"] = reinterpret_cast<uint64_t>(&(df_structure->compare_val)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags1"] = reinterpret_cast<uint64_t>(&(df_structure->flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags3"] = reinterpret_cast<uint64_t>(&(df_structure->flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags4"] = reinterpret_cast<uint64_t>(&(df_structure->flags4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags5"] = reinterpret_cast<uint64_t>(&(df_structure->flags5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_class"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_material_reaction_product"] = reinterpret_cast<uint64_t>(&(df_structure->has_material_reaction_product)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inorganic_bearing"] = reinterpret_cast<uint64_t>(&(df_structure->inorganic_bearing)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_tool_use"] = reinterpret_cast<uint64_t>(&(df_structure->has_tool_use)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_manager_order_template_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::manager_order_template*>(p_df_structure);

	p_table["job_type"] = reinterpret_cast<uint64_t>(&(df_structure->job_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_name"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_category"] = reinterpret_cast<uint64_t>(&(df_structure->item_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_category"] = reinterpret_cast<uint64_t>(&(df_structure->material_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mandate__T_punishment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mandate::T_punishment*>(p_df_structure);

	p_table["hammerstrikes"] = reinterpret_cast<uint64_t>(&(df_structure->hammerstrikes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prison_time"] = reinterpret_cast<uint64_t>(&(df_structure->prison_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["give_beating"] = reinterpret_cast<uint64_t>(&(df_structure->give_beating)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mandate_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mandate*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount_total"] = reinterpret_cast<uint64_t>(&(df_structure->amount_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount_remaining"] = reinterpret_cast<uint64_t>(&(df_structure->amount_remaining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timeout_counter"] = reinterpret_cast<uint64_t>(&(df_structure->timeout_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timeout_limit"] = reinterpret_cast<uint64_t>(&(df_structure->timeout_limit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["punishment"] = reinterpret_cast<uint64_t>(&(df_structure->punishment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["punish_multiple"] = reinterpret_cast<uint64_t>(&(df_structure->punish_multiple)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_demand_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_demand*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["place"] = reinterpret_cast<uint64_t>(&(df_structure->place)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timeout_counter"] = reinterpret_cast<uint64_t>(&(df_structure->timeout_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timeout_limit"] = reinterpret_cast<uint64_t>(&(df_structure->timeout_limit)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_knowledge_scholar_category_flag__T_flag_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::knowledge_scholar_category_flag::T_flag_data*>(p_df_structure);

	p_table["flags_0"] = reinterpret_cast<uint64_t>(&(df_structure->flags_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_1"] = reinterpret_cast<uint64_t>(&(df_structure->flags_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_2"] = reinterpret_cast<uint64_t>(&(df_structure->flags_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_3"] = reinterpret_cast<uint64_t>(&(df_structure->flags_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_4"] = reinterpret_cast<uint64_t>(&(df_structure->flags_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_5"] = reinterpret_cast<uint64_t>(&(df_structure->flags_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_6"] = reinterpret_cast<uint64_t>(&(df_structure->flags_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_7"] = reinterpret_cast<uint64_t>(&(df_structure->flags_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_8"] = reinterpret_cast<uint64_t>(&(df_structure->flags_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_9"] = reinterpret_cast<uint64_t>(&(df_structure->flags_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_10"] = reinterpret_cast<uint64_t>(&(df_structure->flags_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_11"] = reinterpret_cast<uint64_t>(&(df_structure->flags_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_12"] = reinterpret_cast<uint64_t>(&(df_structure->flags_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_13"] = reinterpret_cast<uint64_t>(&(df_structure->flags_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["whole"] = reinterpret_cast<uint64_t>(&(df_structure->whole)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_knowledge_scholar_category_flag_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::knowledge_scholar_category_flag*>(p_df_structure);

	p_table["flag_type"] = reinterpret_cast<uint64_t>(&(df_structure->flag_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flag_data"] = reinterpret_cast<uint64_t>(&(df_structure->flag_data)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_knowledge_discoveredst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_knowledge_discoveredst*>(p_df_structure);

	p_table["hf"] = reinterpret_cast<uint64_t>(&(df_structure->hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["knowledge"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["first"] = reinterpret_cast<uint64_t>(&(df_structure->first)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_language_word_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::language_word*>(p_df_structure);

	p_table["word"] = reinterpret_cast<uint64_t>(&(df_structure->word)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forms"] = reinterpret_cast<uint64_t>(&(df_structure->forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adj_dist"] = reinterpret_cast<uint64_t>(&(df_structure->adj_dist)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_language_name_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::language_name*>(p_df_structure);

	p_table["first_name"] = reinterpret_cast<uint64_t>(&(df_structure->first_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nickname"] = reinterpret_cast<uint64_t>(&(df_structure->nickname)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["words"] = reinterpret_cast<uint64_t>(&(df_structure->words)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parts_of_speech"] = reinterpret_cast<uint64_t>(&(df_structure->parts_of_speech)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["language"] = reinterpret_cast<uint64_t>(&(df_structure->language)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown"] = reinterpret_cast<uint64_t>(&(df_structure->unknown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_name"] = reinterpret_cast<uint64_t>(&(df_structure->has_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_v40_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_v40_1*>(p_df_structure);

	p_table["unk_s1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_3170__T_unk_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_3170::T_unk_2*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_3170_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_3170*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_3124_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_3124*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_13"] = reinterpret_cast<uint64_t>(&(df_structure->unk_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_15"] = reinterpret_cast<uint64_t>(&(df_structure->unk_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_16"] = reinterpret_cast<uint64_t>(&(df_structure->unk_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_17"] = reinterpret_cast<uint64_t>(&(df_structure->unk_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_19"] = reinterpret_cast<uint64_t>(&(df_structure->unk_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_21"] = reinterpret_cast<uint64_t>(&(df_structure->unk_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_22"] = reinterpret_cast<uint64_t>(&(df_structure->unk_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_23"] = reinterpret_cast<uint64_t>(&(df_structure->unk_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_25"] = reinterpret_cast<uint64_t>(&(df_structure->unk_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_27"] = reinterpret_cast<uint64_t>(&(df_structure->unk_27)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_29"] = reinterpret_cast<uint64_t>(&(df_structure->unk_29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_31"] = reinterpret_cast<uint64_t>(&(df_structure->unk_31)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_32"] = reinterpret_cast<uint64_t>(&(df_structure->unk_32)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_33"] = reinterpret_cast<uint64_t>(&(df_structure->unk_33)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_33b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_33b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_35"] = reinterpret_cast<uint64_t>(&(df_structure->unk_35)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_36"] = reinterpret_cast<uint64_t>(&(df_structure->unk_36)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_36a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_36a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_36b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_36b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_36c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_36c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_37"] = reinterpret_cast<uint64_t>(&(df_structure->unk_37)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_39"] = reinterpret_cast<uint64_t>(&(df_structure->unk_39)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_41"] = reinterpret_cast<uint64_t>(&(df_structure->unk_41)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_42"] = reinterpret_cast<uint64_t>(&(df_structure->unk_42)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_43"] = reinterpret_cast<uint64_t>(&(df_structure->unk_43)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_45"] = reinterpret_cast<uint64_t>(&(df_structure->unk_45)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_46"] = reinterpret_cast<uint64_t>(&(df_structure->unk_46)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_47"] = reinterpret_cast<uint64_t>(&(df_structure->unk_47)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_48"] = reinterpret_cast<uint64_t>(&(df_structure->unk_48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_49"] = reinterpret_cast<uint64_t>(&(df_structure->unk_49)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_51"] = reinterpret_cast<uint64_t>(&(df_structure->unk_51)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_52"] = reinterpret_cast<uint64_t>(&(df_structure->unk_52)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_53"] = reinterpret_cast<uint64_t>(&(df_structure->unk_53)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_54"] = reinterpret_cast<uint64_t>(&(df_structure->unk_54)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_56"] = reinterpret_cast<uint64_t>(&(df_structure->unk_56)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_57"] = reinterpret_cast<uint64_t>(&(df_structure->unk_57)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_58"] = reinterpret_cast<uint64_t>(&(df_structure->unk_58)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_59"] = reinterpret_cast<uint64_t>(&(df_structure->unk_59)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_60"] = reinterpret_cast<uint64_t>(&(df_structure->unk_60)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_61"] = reinterpret_cast<uint64_t>(&(df_structure->unk_61)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_62"] = reinterpret_cast<uint64_t>(&(df_structure->unk_62)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_conversation__T_choices_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_conversation::T_choices*>(p_df_structure);

	p_table["choice"] = reinterpret_cast<uint64_t>(&(df_structure->choice)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["keywords"] = reinterpret_cast<uint64_t>(&(df_structure->keywords)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orig_index"] = reinterpret_cast<uint64_t>(&(df_structure->orig_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ranking"] = reinterpret_cast<uint64_t>(&(df_structure->ranking)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_conversation__T_targets_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_conversation::T_targets*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_conversation_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_conversation*>(p_df_structure);

	p_table["activity"] = reinterpret_cast<uint64_t>(&(df_structure->activity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_event"] = reinterpret_cast<uint64_t>(&(df_structure->activity_event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_activity"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_activity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_choice"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_choice)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["current_page"] = reinterpret_cast<uint64_t>(&(df_structure->current_page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_top_choices"] = reinterpret_cast<uint64_t>(&(df_structure->page_top_choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_bottom_choices"] = reinterpret_cast<uint64_t>(&(df_structure->page_bottom_choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choices"] = reinterpret_cast<uint64_t>(&(df_structure->choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["targets"] = reinterpret_cast<uint64_t>(&(df_structure->targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_target"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_companions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_companions*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_visible"] = reinterpret_cast<uint64_t>(&(df_structure->unit_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_position"] = reinterpret_cast<uint64_t>(&(df_structure->unit_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["all_histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->all_histfigs)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_interactions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_interactions*>(p_df_structure);

	p_table["unk_85"] = reinterpret_cast<uint64_t>(&(df_structure->unk_85)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_86"] = reinterpret_cast<uint64_t>(&(df_structure->unk_86)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_ability"] = reinterpret_cast<uint64_t>(&(df_structure->selected_ability)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_power"] = reinterpret_cast<uint64_t>(&(df_structure->selected_power)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1f0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1f0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_target_number"] = reinterpret_cast<uint64_t>(&(df_structure->max_target_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_range"] = reinterpret_cast<uint64_t>(&(df_structure->target_range)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_flags"] = reinterpret_cast<uint64_t>(&(df_structure->target_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_200"] = reinterpret_cast<uint64_t>(&(df_structure->unk_200)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_v40_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_v40_2*>(p_df_structure);

	p_table["unk_s1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_v40_3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_v40_3*>(p_df_structure);

	p_table["unk_s1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_v40_4__T_unk_v40_4a_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_v40_4::T_unk_v40_4a*>(p_df_structure);

	p_table["unk_s1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_v40_4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_v40_4*>(p_df_structure);

	p_table["unk_v40_4a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4b)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_v40_5_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_v40_5*>(p_df_structure);

	p_table["unk_s1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_unk_v42_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_unk_v42_1*>(p_df_structure);

	p_table["unk_s1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode__T_assume_identity_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode::T_assume_identity*>(p_df_structure);

	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worship_object"] = reinterpret_cast<uint64_t>(&(df_structure->worship_object)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["origin"] = reinterpret_cast<uint64_t>(&(df_structure->origin)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_advmode_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_advmode*>(p_df_structure);

	p_table["menu"] = reinterpret_cast<uint64_t>(&(df_structure->menu)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_level_zoom"] = reinterpret_cast<uint64_t>(&(df_structure->site_level_zoom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_origin_x"] = reinterpret_cast<uint64_t>(&(df_structure->travel_origin_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_origin_y"] = reinterpret_cast<uint64_t>(&(df_structure->travel_origin_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_origin_z"] = reinterpret_cast<uint64_t>(&(df_structure->travel_origin_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_clouds"] = reinterpret_cast<uint64_t>(&(df_structure->travel_clouds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_right_map"] = reinterpret_cast<uint64_t>(&(df_structure->travel_right_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_menu"] = reinterpret_cast<uint64_t>(&(df_structure->show_menu)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["message"] = reinterpret_cast<uint64_t>(&(df_structure->message)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["message_color"] = reinterpret_cast<uint64_t>(&(df_structure->message_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["message_brightness"] = reinterpret_cast<uint64_t>(&(df_structure->message_brightness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_not_moved"] = reinterpret_cast<uint64_t>(&(df_structure->travel_not_moved)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4b"] = reinterpret_cast<uint64_t>(&(df_structure->unk4b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_move_countdown"] = reinterpret_cast<uint64_t>(&(df_structure->travel_move_countdown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_13"] = reinterpret_cast<uint64_t>(&(df_structure->unk_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tick_counter"] = reinterpret_cast<uint64_t>(&(df_structure->tick_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["frame_counter"] = reinterpret_cast<uint64_t>(&(df_structure->frame_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_15"] = reinterpret_cast<uint64_t>(&(df_structure->unk_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sleeping"] = reinterpret_cast<uint64_t>(&(df_structure->sleeping)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_16"] = reinterpret_cast<uint64_t>(&(df_structure->unk_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bogeymen_timer"] = reinterpret_cast<uint64_t>(&(df_structure->bogeymen_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bogeymen_killed"] = reinterpret_cast<uint64_t>(&(df_structure->bogeymen_killed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bogeymen_ambush_delay"] = reinterpret_cast<uint64_t>(&(df_structure->bogeymen_ambush_delay)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["searched_x"] = reinterpret_cast<uint64_t>(&(df_structure->searched_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["searched_y"] = reinterpret_cast<uint64_t>(&(df_structure->searched_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["searched_z"] = reinterpret_cast<uint64_t>(&(df_structure->searched_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["searched_timeout"] = reinterpret_cast<uint64_t>(&(df_structure->searched_timeout)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_19"] = reinterpret_cast<uint64_t>(&(df_structure->unk_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_21"] = reinterpret_cast<uint64_t>(&(df_structure->unk_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_22"] = reinterpret_cast<uint64_t>(&(df_structure->unk_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_23"] = reinterpret_cast<uint64_t>(&(df_structure->unk_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_25"] = reinterpret_cast<uint64_t>(&(df_structure->unk_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_27"] = reinterpret_cast<uint64_t>(&(df_structure->unk_27)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_29"] = reinterpret_cast<uint64_t>(&(df_structure->unk_29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_31"] = reinterpret_cast<uint64_t>(&(df_structure->unk_31)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_32"] = reinterpret_cast<uint64_t>(&(df_structure->unk_32)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_33"] = reinterpret_cast<uint64_t>(&(df_structure->unk_33)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["view_tracks_odors"] = reinterpret_cast<uint64_t>(&(df_structure->view_tracks_odors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tracks_visible"] = reinterpret_cast<uint64_t>(&(df_structure->tracks_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_36"] = reinterpret_cast<uint64_t>(&(df_structure->unk_36)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_37"] = reinterpret_cast<uint64_t>(&(df_structure->unk_37)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_39"] = reinterpret_cast<uint64_t>(&(df_structure->unk_39)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_41"] = reinterpret_cast<uint64_t>(&(df_structure->unk_41)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_42"] = reinterpret_cast<uint64_t>(&(df_structure->unk_42)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["odor_race"] = reinterpret_cast<uint64_t>(&(df_structure->odor_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["odor_caste"] = reinterpret_cast<uint64_t>(&(df_structure->odor_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["odor_death"] = reinterpret_cast<uint64_t>(&(df_structure->odor_death)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_odor_race"] = reinterpret_cast<uint64_t>(&(df_structure->travel_odor_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_odor_caste"] = reinterpret_cast<uint64_t>(&(df_structure->travel_odor_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_46"] = reinterpret_cast<uint64_t>(&(df_structure->unk_46)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_47"] = reinterpret_cast<uint64_t>(&(df_structure->unk_47)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3170"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3170)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3124"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3124)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_48"] = reinterpret_cast<uint64_t>(&(df_structure->unk_48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_49"] = reinterpret_cast<uint64_t>(&(df_structure->unk_49)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_51"] = reinterpret_cast<uint64_t>(&(df_structure->unk_51)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_52"] = reinterpret_cast<uint64_t>(&(df_structure->unk_52)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_53"] = reinterpret_cast<uint64_t>(&(df_structure->unk_53)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_54"] = reinterpret_cast<uint64_t>(&(df_structure->unk_54)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_56"] = reinterpret_cast<uint64_t>(&(df_structure->unk_56)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_57"] = reinterpret_cast<uint64_t>(&(df_structure->unk_57)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_58"] = reinterpret_cast<uint64_t>(&(df_structure->unk_58)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_59"] = reinterpret_cast<uint64_t>(&(df_structure->unk_59)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_60"] = reinterpret_cast<uint64_t>(&(df_structure->unk_60)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_61"] = reinterpret_cast<uint64_t>(&(df_structure->unk_61)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_62"] = reinterpret_cast<uint64_t>(&(df_structure->unk_62)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_start_x"] = reinterpret_cast<uint64_t>(&(df_structure->travel_start_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_start_y"] = reinterpret_cast<uint64_t>(&(df_structure->travel_start_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["travel_start_z"] = reinterpret_cast<uint64_t>(&(df_structure->travel_start_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["player_id"] = reinterpret_cast<uint64_t>(&(df_structure->player_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_66"] = reinterpret_cast<uint64_t>(&(df_structure->unk_66)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_67"] = reinterpret_cast<uint64_t>(&(df_structure->unk_67)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_68"] = reinterpret_cast<uint64_t>(&(df_structure->unk_68)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_69"] = reinterpret_cast<uint64_t>(&(df_structure->unk_69)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["conversation"] = reinterpret_cast<uint64_t>(&(df_structure->conversation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_70"] = reinterpret_cast<uint64_t>(&(df_structure->unk_70)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_71"] = reinterpret_cast<uint64_t>(&(df_structure->unk_71)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_72"] = reinterpret_cast<uint64_t>(&(df_structure->unk_72)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interacts"] = reinterpret_cast<uint64_t>(&(df_structure->interacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["commands"] = reinterpret_cast<uint64_t>(&(df_structure->commands)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["movements"] = reinterpret_cast<uint64_t>(&(df_structure->movements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_75"] = reinterpret_cast<uint64_t>(&(df_structure->unk_75)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sleep_hours"] = reinterpret_cast<uint64_t>(&(df_structure->sleep_hours)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sleep_until_dawn"] = reinterpret_cast<uint64_t>(&(df_structure->sleep_until_dawn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_78"] = reinterpret_cast<uint64_t>(&(df_structure->unk_78)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wait"] = reinterpret_cast<uint64_t>(&(df_structure->wait)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_80"] = reinterpret_cast<uint64_t>(&(df_structure->unk_80)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_81"] = reinterpret_cast<uint64_t>(&(df_structure->unk_81)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["player_control_state"] = reinterpret_cast<uint64_t>(&(df_structure->player_control_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_83"] = reinterpret_cast<uint64_t>(&(df_structure->unk_83)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_84"] = reinterpret_cast<uint64_t>(&(df_structure->unk_84)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["companions"] = reinterpret_cast<uint64_t>(&(df_structure->companions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interactions"] = reinterpret_cast<uint64_t>(&(df_structure->interactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_87"] = reinterpret_cast<uint64_t>(&(df_structure->unk_87)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_220"] = reinterpret_cast<uint64_t>(&(df_structure->unk_220)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_224"] = reinterpret_cast<uint64_t>(&(df_structure->unk_224)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_88"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_89"] = reinterpret_cast<uint64_t>(&(df_structure->unk_89)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_90"] = reinterpret_cast<uint64_t>(&(df_structure->unk_90)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_91"] = reinterpret_cast<uint64_t>(&(df_structure->unk_91)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assume_identity"] = reinterpret_cast<uint64_t>(&(df_structure->assume_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_92"] = reinterpret_cast<uint64_t>(&(df_structure->unk_92)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_93"] = reinterpret_cast<uint64_t>(&(df_structure->unk_93)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_94"] = reinterpret_cast<uint64_t>(&(df_structure->unk_94)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_95"] = reinterpret_cast<uint64_t>(&(df_structure->unk_95)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_96"] = reinterpret_cast<uint64_t>(&(df_structure->unk_96)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_97"] = reinterpret_cast<uint64_t>(&(df_structure->unk_97)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_98"] = reinterpret_cast<uint64_t>(&(df_structure->unk_98)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_99"] = reinterpret_cast<uint64_t>(&(df_structure->unk_99)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_item"] = reinterpret_cast<uint64_t>(&(df_structure->name_item)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_art_image_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::art_image*>(p_df_structure);

	p_table["elements"] = reinterpret_cast<uint64_t>(&(df_structure->elements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["properties"] = reinterpret_cast<uint64_t>(&(df_structure->properties)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spec_ref_type"] = reinterpret_cast<uint64_t>(&(df_structure->spec_ref_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality"] = reinterpret_cast<uint64_t>(&(df_structure->quality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artist"] = reinterpret_cast<uint64_t>(&(df_structure->artist)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subid"] = reinterpret_cast<uint64_t>(&(df_structure->subid)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_poetic_form_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::poetic_form*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["originating_entity"] = reinterpret_cast<uint64_t>(&(df_structure->originating_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_author"] = reinterpret_cast<uint64_t>(&(df_structure->original_author)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parts"] = reinterpret_cast<uint64_t>(&(df_structure->parts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["each_line_feet"] = reinterpret_cast<uint64_t>(&(df_structure->each_line_feet)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["each_line_pattern"] = reinterpret_cast<uint64_t>(&(df_structure->each_line_pattern)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["every_line_caesura_position"] = reinterpret_cast<uint64_t>(&(df_structure->every_line_caesura_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["common_features"] = reinterpret_cast<uint64_t>(&(df_structure->common_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mood"] = reinterpret_cast<uint64_t>(&(df_structure->mood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subject"] = reinterpret_cast<uint64_t>(&(df_structure->subject)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subject_target"] = reinterpret_cast<uint64_t>(&(df_structure->subject_target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["action"] = reinterpret_cast<uint64_t>(&(df_structure->action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["preferred_perspective"] = reinterpret_cast<uint64_t>(&(df_structure->preferred_perspective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["features"] = reinterpret_cast<uint64_t>(&(df_structure->features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["perspectives"] = reinterpret_cast<uint64_t>(&(df_structure->perspectives)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_musical_form_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::musical_form*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["originating_entity"] = reinterpret_cast<uint64_t>(&(df_structure->originating_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_author"] = reinterpret_cast<uint64_t>(&(df_structure->original_author)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["scales"] = reinterpret_cast<uint64_t>(&(df_structure->scales)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["instruments"] = reinterpret_cast<uint64_t>(&(df_structure->instruments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["melodies"] = reinterpret_cast<uint64_t>(&(df_structure->melodies)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tempo_style"] = reinterpret_cast<uint64_t>(&(df_structure->tempo_style)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dynamic_style"] = reinterpret_cast<uint64_t>(&(df_structure->dynamic_style)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["overall_style"] = reinterpret_cast<uint64_t>(&(df_structure->overall_style)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["poetic_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->poetic_form_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["written_content_id"] = reinterpret_cast<uint64_t>(&(df_structure->written_content_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["scale_id"] = reinterpret_cast<uint64_t>(&(df_structure->scale_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["scale_subid"] = reinterpret_cast<uint64_t>(&(df_structure->scale_subid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rhythm_id"] = reinterpret_cast<uint64_t>(&(df_structure->rhythm_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rhythm_subid2"] = reinterpret_cast<uint64_t>(&(df_structure->rhythm_subid2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rhythm_subid1"] = reinterpret_cast<uint64_t>(&(df_structure->rhythm_subid1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["features"] = reinterpret_cast<uint64_t>(&(df_structure->features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pitch_style"] = reinterpret_cast<uint64_t>(&(df_structure->pitch_style)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["purpose"] = reinterpret_cast<uint64_t>(&(df_structure->purpose)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["devotion_target"] = reinterpret_cast<uint64_t>(&(df_structure->devotion_target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_dance_form_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::dance_form*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["musical_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->musical_form_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["music_written_content_id"] = reinterpret_cast<uint64_t>(&(df_structure->music_written_content_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["originating_entity"] = reinterpret_cast<uint64_t>(&(df_structure->originating_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_author"] = reinterpret_cast<uint64_t>(&(df_structure->original_author)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_occasion_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_occasion*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->start_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->end_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["schedule"] = reinterpret_cast<uint64_t>(&(df_structure->schedule)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_guild_professions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_guild_professions*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_resources__T_metal_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_resources::T_metal*>(p_df_structure);

	p_table["pick"] = reinterpret_cast<uint64_t>(&(df_structure->pick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapon"] = reinterpret_cast<uint64_t>(&(df_structure->weapon)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ranged"] = reinterpret_cast<uint64_t>(&(df_structure->ranged)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo"] = reinterpret_cast<uint64_t>(&(df_structure->ammo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo2"] = reinterpret_cast<uint64_t>(&(df_structure->ammo2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor"] = reinterpret_cast<uint64_t>(&(df_structure->armor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anvil"] = reinterpret_cast<uint64_t>(&(df_structure->anvil)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_resources__T_organic_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_resources::T_organic*>(p_df_structure);

	p_table["leather"] = reinterpret_cast<uint64_t>(&(df_structure->leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parchment"] = reinterpret_cast<uint64_t>(&(df_structure->parchment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fiber"] = reinterpret_cast<uint64_t>(&(df_structure->fiber)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["silk"] = reinterpret_cast<uint64_t>(&(df_structure->silk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wool"] = reinterpret_cast<uint64_t>(&(df_structure->wool)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wood"] = reinterpret_cast<uint64_t>(&(df_structure->wood)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_resources__T_refuse_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_resources::T_refuse*>(p_df_structure);

	p_table["bone"] = reinterpret_cast<uint64_t>(&(df_structure->bone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shell"] = reinterpret_cast<uint64_t>(&(df_structure->shell)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pearl"] = reinterpret_cast<uint64_t>(&(df_structure->pearl)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ivory"] = reinterpret_cast<uint64_t>(&(df_structure->ivory)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["horn"] = reinterpret_cast<uint64_t>(&(df_structure->horn)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_resources__T_misc_mat_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_resources::T_misc_mat*>(p_df_structure);

	p_table["others"] = reinterpret_cast<uint64_t>(&(df_structure->others)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glass"] = reinterpret_cast<uint64_t>(&(df_structure->glass)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sand"] = reinterpret_cast<uint64_t>(&(df_structure->sand)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["clay"] = reinterpret_cast<uint64_t>(&(df_structure->clay)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crafts"] = reinterpret_cast<uint64_t>(&(df_structure->crafts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glass_unused"] = reinterpret_cast<uint64_t>(&(df_structure->glass_unused)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["barrels"] = reinterpret_cast<uint64_t>(&(df_structure->barrels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flasks"] = reinterpret_cast<uint64_t>(&(df_structure->flasks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quivers"] = reinterpret_cast<uint64_t>(&(df_structure->quivers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["backpacks"] = reinterpret_cast<uint64_t>(&(df_structure->backpacks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cages"] = reinterpret_cast<uint64_t>(&(df_structure->cages)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wood2"] = reinterpret_cast<uint64_t>(&(df_structure->wood2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rock_metal"] = reinterpret_cast<uint64_t>(&(df_structure->rock_metal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["booze"] = reinterpret_cast<uint64_t>(&(df_structure->booze)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese"] = reinterpret_cast<uint64_t>(&(df_structure->cheese)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["powders"] = reinterpret_cast<uint64_t>(&(df_structure->powders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extracts"] = reinterpret_cast<uint64_t>(&(df_structure->extracts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meat"] = reinterpret_cast<uint64_t>(&(df_structure->meat)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_resources__T_wood_products_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_resources::T_wood_products*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_resources__T_animals_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_resources::T_animals*>(p_df_structure);

	p_table["pet_races"] = reinterpret_cast<uint64_t>(&(df_structure->pet_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wagon_races"] = reinterpret_cast<uint64_t>(&(df_structure->wagon_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pack_animal_races"] = reinterpret_cast<uint64_t>(&(df_structure->pack_animal_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wagon_puller_races"] = reinterpret_cast<uint64_t>(&(df_structure->wagon_puller_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mount_races"] = reinterpret_cast<uint64_t>(&(df_structure->mount_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["minion_races"] = reinterpret_cast<uint64_t>(&(df_structure->minion_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["exotic_pet_races"] = reinterpret_cast<uint64_t>(&(df_structure->exotic_pet_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pet_castes"] = reinterpret_cast<uint64_t>(&(df_structure->pet_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wagon_castes"] = reinterpret_cast<uint64_t>(&(df_structure->wagon_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pack_animal_castes"] = reinterpret_cast<uint64_t>(&(df_structure->pack_animal_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wagon_puller_castes"] = reinterpret_cast<uint64_t>(&(df_structure->wagon_puller_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mount_castes"] = reinterpret_cast<uint64_t>(&(df_structure->mount_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["minion_castes"] = reinterpret_cast<uint64_t>(&(df_structure->minion_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["exotic_pet_castes"] = reinterpret_cast<uint64_t>(&(df_structure->exotic_pet_castes)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_resources__T_unk13_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_resources::T_unk13*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_resources_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_resources*>(p_df_structure);

	p_table["digger_type"] = reinterpret_cast<uint64_t>(&(df_structure->digger_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapon_type"] = reinterpret_cast<uint64_t>(&(df_structure->weapon_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["training_weapon_type"] = reinterpret_cast<uint64_t>(&(df_structure->training_weapon_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_type"] = reinterpret_cast<uint64_t>(&(df_structure->armor_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_type"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_type"] = reinterpret_cast<uint64_t>(&(df_structure->helm_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_type"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_type"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_type"] = reinterpret_cast<uint64_t>(&(df_structure->pants_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shield_type"] = reinterpret_cast<uint64_t>(&(df_structure->shield_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trapcomp_type"] = reinterpret_cast<uint64_t>(&(df_structure->trapcomp_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["toy_type"] = reinterpret_cast<uint64_t>(&(df_structure->toy_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["instrument_type"] = reinterpret_cast<uint64_t>(&(df_structure->instrument_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["siegeammo_type"] = reinterpret_cast<uint64_t>(&(df_structure->siegeammo_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tool_type"] = reinterpret_cast<uint64_t>(&(df_structure->tool_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metal"] = reinterpret_cast<uint64_t>(&(df_structure->metal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["organic"] = reinterpret_cast<uint64_t>(&(df_structure->organic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metals"] = reinterpret_cast<uint64_t>(&(df_structure->metals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stones"] = reinterpret_cast<uint64_t>(&(df_structure->stones)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gems"] = reinterpret_cast<uint64_t>(&(df_structure->gems)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["refuse"] = reinterpret_cast<uint64_t>(&(df_structure->refuse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["misc_mat"] = reinterpret_cast<uint64_t>(&(df_structure->misc_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fish_races"] = reinterpret_cast<uint64_t>(&(df_structure->fish_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fish_castes"] = reinterpret_cast<uint64_t>(&(df_structure->fish_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_races"] = reinterpret_cast<uint64_t>(&(df_structure->egg_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_castes"] = reinterpret_cast<uint64_t>(&(df_structure->egg_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_fruit_plants"] = reinterpret_cast<uint64_t>(&(df_structure->tree_fruit_plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_fruit_growths"] = reinterpret_cast<uint64_t>(&(df_structure->tree_fruit_growths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shrub_fruit_plants"] = reinterpret_cast<uint64_t>(&(df_structure->shrub_fruit_plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shrub_fruit_growths"] = reinterpret_cast<uint64_t>(&(df_structure->shrub_fruit_growths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seeds"] = reinterpret_cast<uint64_t>(&(df_structure->seeds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wood_products"] = reinterpret_cast<uint64_t>(&(df_structure->wood_products)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animals"] = reinterpret_cast<uint64_t>(&(df_structure->animals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meat_fish_recipes"] = reinterpret_cast<uint64_t>(&(df_structure->meat_fish_recipes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_recipes"] = reinterpret_cast<uint64_t>(&(df_structure->other_recipes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk13"] = reinterpret_cast<uint64_t>(&(df_structure->unk13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk14"] = reinterpret_cast<uint64_t>(&(df_structure->unk14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk15a"] = reinterpret_cast<uint64_t>(&(df_structure->unk15a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk15b"] = reinterpret_cast<uint64_t>(&(df_structure->unk15b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ethic"] = reinterpret_cast<uint64_t>(&(df_structure->ethic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["values"] = reinterpret_cast<uint64_t>(&(df_structure->values)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["permitted_skill"] = reinterpret_cast<uint64_t>(&(df_structure->permitted_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_image_types"] = reinterpret_cast<uint64_t>(&(df_structure->art_image_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_image_ids"] = reinterpret_cast<uint64_t>(&(df_structure->art_image_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_image_subids"] = reinterpret_cast<uint64_t>(&(df_structure->art_image_subids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_creature_foods"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_creature_foods)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_creatures"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_creatures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_plant_foods"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_plant_foods)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_plants"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["foreground_color"] = reinterpret_cast<uint64_t>(&(df_structure->foreground_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["background_color"] = reinterpret_cast<uint64_t>(&(df_structure->background_color)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_relations__T_constructions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_relations::T_constructions*>(p_df_structure);

	p_table["path"] = reinterpret_cast<uint64_t>(&(df_structure->path)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_site"] = reinterpret_cast<uint64_t>(&(df_structure->source_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destination_site"] = reinterpret_cast<uint64_t>(&(df_structure->destination_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["construction"] = reinterpret_cast<uint64_t>(&(df_structure->construction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_relations__T_diplomacy_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_relations::T_diplomacy*>(p_df_structure);

	p_table["group_id"] = reinterpret_cast<uint64_t>(&(df_structure->group_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relation"] = reinterpret_cast<uint64_t>(&(df_structure->relation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["war_event_collection"] = reinterpret_cast<uint64_t>(&(df_structure->war_event_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["historic_events"] = reinterpret_cast<uint64_t>(&(df_structure->historic_events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["historic_events_collection"] = reinterpret_cast<uint64_t>(&(df_structure->historic_events_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_relations_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_relations*>(p_df_structure);

	p_table["known_sites"] = reinterpret_cast<uint64_t>(&(df_structure->known_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deities"] = reinterpret_cast<uint64_t>(&(df_structure->deities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worship"] = reinterpret_cast<uint64_t>(&(df_structure->worship)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["belief_systems"] = reinterpret_cast<uint64_t>(&(df_structure->belief_systems)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["constructions"] = reinterpret_cast<uint64_t>(&(df_structure->constructions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["diplomacy"] = reinterpret_cast<uint64_t>(&(df_structure->diplomacy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk33"] = reinterpret_cast<uint64_t>(&(df_structure->unk33)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk34a"] = reinterpret_cast<uint64_t>(&(df_structure->unk34a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk34b"] = reinterpret_cast<uint64_t>(&(df_structure->unk34b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk34c"] = reinterpret_cast<uint64_t>(&(df_structure->unk34c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position"] = reinterpret_cast<uint64_t>(&(df_structure->position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["official"] = reinterpret_cast<uint64_t>(&(df_structure->official)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_positions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_positions*>(p_df_structure);

	p_table["own"] = reinterpret_cast<uint64_t>(&(df_structure->own)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["conquered_site"] = reinterpret_cast<uint64_t>(&(df_structure->conquered_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_position_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_position_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assignments"] = reinterpret_cast<uint64_t>(&(df_structure->assignments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_assignment_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_assignment_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_tissue_styles_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_tissue_styles*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_style_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_style_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_unknown1d_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_unknown1d*>(p_df_structure);

	p_table["unk42"] = reinterpret_cast<uint64_t>(&(df_structure->unk42)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk43"] = reinterpret_cast<uint64_t>(&(df_structure->unk43)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk44"] = reinterpret_cast<uint64_t>(&(df_structure->unk44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk44a"] = reinterpret_cast<uint64_t>(&(df_structure->unk44a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk44b"] = reinterpret_cast<uint64_t>(&(df_structure->unk44b)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_training_knowledge_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_training_knowledge*>(p_df_structure);

	p_table["level"] = reinterpret_cast<uint64_t>(&(df_structure->level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_unk_v47_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_unk_v47_1*>(p_df_structure);

	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["foiled_plot_agreements"] = reinterpret_cast<uint64_t>(&(df_structure->foiled_plot_agreements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_unknown1e_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_unknown1e*>(p_df_structure);

	p_table["unk47"] = reinterpret_cast<uint64_t>(&(df_structure->unk47)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk48"] = reinterpret_cast<uint64_t>(&(df_structure->unk48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk49a"] = reinterpret_cast<uint64_t>(&(df_structure->unk49a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk49b"] = reinterpret_cast<uint64_t>(&(df_structure->unk49b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk49c"] = reinterpret_cast<uint64_t>(&(df_structure->unk49c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk49d"] = reinterpret_cast<uint64_t>(&(df_structure->unk49d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk49e"] = reinterpret_cast<uint64_t>(&(df_structure->unk49e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk49f"] = reinterpret_cast<uint64_t>(&(df_structure->unk49f)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_derived_resources_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_derived_resources*>(p_df_structure);

	p_table["mill_cookable"] = reinterpret_cast<uint64_t>(&(df_structure->mill_cookable)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mill_dye"] = reinterpret_cast<uint64_t>(&(df_structure->mill_dye)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_leather"] = reinterpret_cast<uint64_t>(&(df_structure->armor_leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_chain"] = reinterpret_cast<uint64_t>(&(df_structure->armor_chain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_plate"] = reinterpret_cast<uint64_t>(&(df_structure->armor_plate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_under"] = reinterpret_cast<uint64_t>(&(df_structure->armor_under)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_over"] = reinterpret_cast<uint64_t>(&(df_structure->armor_over)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_cover"] = reinterpret_cast<uint64_t>(&(df_structure->armor_cover)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_leather"] = reinterpret_cast<uint64_t>(&(df_structure->pants_leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_chain"] = reinterpret_cast<uint64_t>(&(df_structure->pants_chain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_plate"] = reinterpret_cast<uint64_t>(&(df_structure->pants_plate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_under"] = reinterpret_cast<uint64_t>(&(df_structure->pants_under)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_over"] = reinterpret_cast<uint64_t>(&(df_structure->pants_over)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_cover"] = reinterpret_cast<uint64_t>(&(df_structure->pants_cover)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_leather"] = reinterpret_cast<uint64_t>(&(df_structure->helm_leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_chain"] = reinterpret_cast<uint64_t>(&(df_structure->helm_chain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_plate"] = reinterpret_cast<uint64_t>(&(df_structure->helm_plate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_under"] = reinterpret_cast<uint64_t>(&(df_structure->helm_under)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_over"] = reinterpret_cast<uint64_t>(&(df_structure->helm_over)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_cover"] = reinterpret_cast<uint64_t>(&(df_structure->helm_cover)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_leather"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_chain"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_chain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_plate"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_plate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_under"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_under)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_over"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_over)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_cover"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_cover)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_leather"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_chain"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_chain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_plate"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_plate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_under"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_under)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_over"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_over)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_cover"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_cover)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_claims_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_claims*>(p_df_structure);

	p_table["areas"] = reinterpret_cast<uint64_t>(&(df_structure->areas)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["border"] = reinterpret_cast<uint64_t>(&(df_structure->border)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity__T_unknown2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity::T_unknown2*>(p_df_structure);

	p_table["metal_proficiency"] = reinterpret_cast<uint64_t>(&(df_structure->metal_proficiency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapon_proficiencies"] = reinterpret_cast<uint64_t>(&(df_structure->weapon_proficiencies)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["resource_allotment"] = reinterpret_cast<uint64_t>(&(df_structure->resource_allotment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk12a"] = reinterpret_cast<uint64_t>(&(df_structure->unk12a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk12b"] = reinterpret_cast<uint64_t>(&(df_structure->unk12b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk13"] = reinterpret_cast<uint64_t>(&(df_structure->unk13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["landmass"] = reinterpret_cast<uint64_t>(&(df_structure->landmass)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk16"] = reinterpret_cast<uint64_t>(&(df_structure->unk16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk17"] = reinterpret_cast<uint64_t>(&(df_structure->unk17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk18"] = reinterpret_cast<uint64_t>(&(df_structure->unk18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk19"] = reinterpret_cast<uint64_t>(&(df_structure->unk19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk20"] = reinterpret_cast<uint64_t>(&(df_structure->unk20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk21"] = reinterpret_cast<uint64_t>(&(df_structure->unk21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk22"] = reinterpret_cast<uint64_t>(&(df_structure->unk22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk23"] = reinterpret_cast<uint64_t>(&(df_structure->unk23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk24"] = reinterpret_cast<uint64_t>(&(df_structure->unk24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk25"] = reinterpret_cast<uint64_t>(&(df_structure->unk25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9C"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9C)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_A0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_A0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_A4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_A4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_A8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_A8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_AC"] = reinterpret_cast<uint64_t>(&(df_structure->unk_AC)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_B0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_B0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_B4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_B4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_B8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_B8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_BC"] = reinterpret_cast<uint64_t>(&(df_structure->unk_BC)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_C0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_C0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk26a"] = reinterpret_cast<uint64_t>(&(df_structure->unk26a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk26b"] = reinterpret_cast<uint64_t>(&(df_structure->unk26b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk26c"] = reinterpret_cast<uint64_t>(&(df_structure->unk26c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk26d"] = reinterpret_cast<uint64_t>(&(df_structure->unk26d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk26e"] = reinterpret_cast<uint64_t>(&(df_structure->unk26e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk28"] = reinterpret_cast<uint64_t>(&(df_structure->unk28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk29"] = reinterpret_cast<uint64_t>(&(df_structure->unk29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_entity_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_entity*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_raw"] = reinterpret_cast<uint64_t>(&(df_structure->entity_raw)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["save_file_id"] = reinterpret_cast<uint64_t>(&(df_structure->save_file_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_member_idx"] = reinterpret_cast<uint64_t>(&(df_structure->next_member_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guild_professions"] = reinterpret_cast<uint64_t>(&(df_structure->guild_professions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_links"] = reinterpret_cast<uint64_t>(&(df_structure->entity_links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_links"] = reinterpret_cast<uint64_t>(&(df_structure->site_links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_ids"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["populations"] = reinterpret_cast<uint64_t>(&(df_structure->populations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis_ids"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["resources"] = reinterpret_cast<uint64_t>(&(df_structure->resources)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniforms"] = reinterpret_cast<uint64_t>(&(df_structure->uniforms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_uniform_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_uniform_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relations"] = reinterpret_cast<uint64_t>(&(df_structure->relations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["positions"] = reinterpret_cast<uint64_t>(&(df_structure->positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_styles"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_styles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown1d"] = reinterpret_cast<uint64_t>(&(df_structure->unknown1d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["training_knowledge"] = reinterpret_cast<uint64_t>(&(df_structure->training_knowledge)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["major_civ_number"] = reinterpret_cast<uint64_t>(&(df_structure->major_civ_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["major_civ_number_2"] = reinterpret_cast<uint64_t>(&(df_structure->major_civ_number_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occasion_info"] = reinterpret_cast<uint64_t>(&(df_structure->occasion_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_claims"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_claims)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["honors"] = reinterpret_cast<uint64_t>(&(df_structure->honors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_honors_index"] = reinterpret_cast<uint64_t>(&(df_structure->next_honors_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["equipment_purchases"] = reinterpret_cast<uint64_t>(&(df_structure->equipment_purchases)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack"] = reinterpret_cast<uint64_t>(&(df_structure->attack)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_battles"] = reinterpret_cast<uint64_t>(&(df_structure->total_battles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["divination_sets"] = reinterpret_cast<uint64_t>(&(df_structure->divination_sets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["founding_site_government"] = reinterpret_cast<uint64_t>(&(df_structure->founding_site_government)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meeting_events"] = reinterpret_cast<uint64_t>(&(df_structure->meeting_events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_stats"] = reinterpret_cast<uint64_t>(&(df_structure->activity_stats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown1e"] = reinterpret_cast<uint64_t>(&(df_structure->unknown1e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armies"] = reinterpret_cast<uint64_t>(&(df_structure->armies)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_controllers"] = reinterpret_cast<uint64_t>(&(df_structure->army_controllers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figures"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["derived_resources"] = reinterpret_cast<uint64_t>(&(df_structure->derived_resources)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assignments_by_type"] = reinterpret_cast<uint64_t>(&(df_structure->assignments_by_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["claims"] = reinterpret_cast<uint64_t>(&(df_structure->claims)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["children"] = reinterpret_cast<uint64_t>(&(df_structure->children)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown2"] = reinterpret_cast<uint64_t>(&(df_structure->unknown2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure__T_vague_relationships_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure::T_vague_relationships*>(p_df_structure);

	p_table["hfid"] = reinterpret_cast<uint64_t>(&(df_structure->hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationship"] = reinterpret_cast<uint64_t>(&(df_structure->relationship)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure__T_unk_fc_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure::T_unk_fc*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure*>(p_df_structure);

	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sex"] = reinterpret_cast<uint64_t>(&(df_structure->sex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orientation_flags"] = reinterpret_cast<uint64_t>(&(df_structure->orientation_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appeared_year"] = reinterpret_cast<uint64_t>(&(df_structure->appeared_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["born_year"] = reinterpret_cast<uint64_t>(&(df_structure->born_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["born_seconds"] = reinterpret_cast<uint64_t>(&(df_structure->born_seconds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse_year"] = reinterpret_cast<uint64_t>(&(df_structure->curse_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse_seconds"] = reinterpret_cast<uint64_t>(&(df_structure->curse_seconds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_year_bias"] = reinterpret_cast<uint64_t>(&(df_structure->birth_year_bias)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_time_bias"] = reinterpret_cast<uint64_t>(&(df_structure->birth_time_bias)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_year"] = reinterpret_cast<uint64_t>(&(df_structure->old_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_seconds"] = reinterpret_cast<uint64_t>(&(df_structure->old_seconds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["died_year"] = reinterpret_cast<uint64_t>(&(df_structure->died_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["died_seconds"] = reinterpret_cast<uint64_t>(&(df_structure->died_seconds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population_id"] = reinterpret_cast<uint64_t>(&(df_structure->population_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["breed_id"] = reinterpret_cast<uint64_t>(&(df_structure->breed_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cultural_identity"] = reinterpret_cast<uint64_t>(&(df_structure->cultural_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["family_head_id"] = reinterpret_cast<uint64_t>(&(df_structure->family_head_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis_id"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_links"] = reinterpret_cast<uint64_t>(&(df_structure->entity_links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_links"] = reinterpret_cast<uint64_t>(&(df_structure->site_links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_links"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["info"] = reinterpret_cast<uint64_t>(&(df_structure->info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vague_relationships"] = reinterpret_cast<uint64_t>(&(df_structure->vague_relationships)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_f0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_f0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_f4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_f4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_f8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_f8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_fc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_fc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4019_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4019_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_identity_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::identity*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_year"] = reinterpret_cast<uint64_t>(&(df_structure->birth_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_second"] = reinterpret_cast<uint64_t>(&(df_structure->birth_second)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_warst__T_unk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_warst::T_unk*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_entity_leader"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_entity_leader)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ethics_unk1"] = reinterpret_cast<uint64_t>(&(df_structure->ethics_unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["disputed_ethics"] = reinterpret_cast<uint64_t>(&(df_structure->disputed_ethics)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ethics_unk3"] = reinterpret_cast<uint64_t>(&(df_structure->ethics_unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dispute_severities"] = reinterpret_cast<uint64_t>(&(df_structure->dispute_severities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accumulated_ethics_severity"] = reinterpret_cast<uint64_t>(&(df_structure->accumulated_ethics_severity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accumulated_unk_severity"] = reinterpret_cast<uint64_t>(&(df_structure->accumulated_unk_severity)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_warst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_warst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_history_event_collection_battlest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::history_event_collection_battlest*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_collection"] = reinterpret_cast<uint64_t>(&(df_structure->parent_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_civ"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_civ"] = reinterpret_cast<uint64_t>(&(df_structure->defender_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_hf"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_role"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_role)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_hf"] = reinterpret_cast<uint64_t>(&(df_structure->defender_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_role"] = reinterpret_cast<uint64_t>(&(df_structure->defender_role)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noncombat_hf"] = reinterpret_cast<uint64_t>(&(df_structure->noncombat_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_merc_scouts"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_merc_scouts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_mercs"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_mercs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_mercs"] = reinterpret_cast<uint64_t>(&(df_structure->defender_mercs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_squad_entity_pop"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_squad_entity_pop)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_squad_counts"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_squad_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_squad_deaths"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_squad_deaths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_squad_races"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_squad_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_squad_sites"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_squad_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_squad_entity_pops"] = reinterpret_cast<uint64_t>(&(df_structure->defender_squad_entity_pops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_squad_counts"] = reinterpret_cast<uint64_t>(&(df_structure->defender_squad_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_squad_deaths"] = reinterpret_cast<uint64_t>(&(df_structure->defender_squad_deaths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_squad_races"] = reinterpret_cast<uint64_t>(&(df_structure->defender_squad_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["defender_squad_sites"] = reinterpret_cast<uint64_t>(&(df_structure->defender_squad_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["outcome"] = reinterpret_cast<uint64_t>(&(df_structure->outcome)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_history__T_event_collections_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_history::T_event_collections*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other"] = reinterpret_cast<uint64_t>(&(df_structure->other)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_history__T_intrigues__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_history::T_intrigues::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hf_1"] = reinterpret_cast<uint64_t>(&(df_structure->hf_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hf_2"] = reinterpret_cast<uint64_t>(&(df_structure->hf_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_history__T_intrigues_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_history::T_intrigues*>(p_df_structure);

	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_history_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_history*>(p_df_structure);

	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events_death"] = reinterpret_cast<uint64_t>(&(df_structure->events_death)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationship_events"] = reinterpret_cast<uint64_t>(&(df_structure->relationship_events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationship_event_supplements"] = reinterpret_cast<uint64_t>(&(df_structure->relationship_event_supplements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["figures"] = reinterpret_cast<uint64_t>(&(df_structure->figures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_collections"] = reinterpret_cast<uint64_t>(&(df_structure->event_collections)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["eras"] = reinterpret_cast<uint64_t>(&(df_structure->eras)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_unk"] = reinterpret_cast<uint64_t>(&(df_structure->total_unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_powers"] = reinterpret_cast<uint64_t>(&(df_structure->total_powers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_megabeasts"] = reinterpret_cast<uint64_t>(&(df_structure->total_megabeasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_semimegabeasts"] = reinterpret_cast<uint64_t>(&(df_structure->total_semimegabeasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intrigues"] = reinterpret_cast<uint64_t>(&(df_structure->intrigues)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["live_megabeasts"] = reinterpret_cast<uint64_t>(&(df_structure->live_megabeasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["live_semimegabeasts"] = reinterpret_cast<uint64_t>(&(df_structure->live_semimegabeasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_histfig_13"] = reinterpret_cast<uint64_t>(&(df_structure->unk_histfig_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_critter_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_critter*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["milk_timer"] = reinterpret_cast<uint64_t>(&(df_structure->milk_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["airdrown_timer"] = reinterpret_cast<uint64_t>(&(df_structure->airdrown_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_verminst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_verminst*>(p_df_structure);

}

void generate_item_petst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_petst*>(p_df_structure);

	p_table["owner_id"] = reinterpret_cast<uint64_t>(&(df_structure->owner_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pet_flags"] = reinterpret_cast<uint64_t>(&(df_structure->pet_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_language_word_table_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::language_word_table*>(p_df_structure);

	p_table["words"] = reinterpret_cast<uint64_t>(&(df_structure->words)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parts"] = reinterpret_cast<uint64_t>(&(df_structure->parts)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_raw__T_equipment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_raw::T_equipment*>(p_df_structure);

	p_table["digger_id"] = reinterpret_cast<uint64_t>(&(df_structure->digger_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapon_id"] = reinterpret_cast<uint64_t>(&(df_structure->weapon_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_id"] = reinterpret_cast<uint64_t>(&(df_structure->armor_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_id"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_id"] = reinterpret_cast<uint64_t>(&(df_structure->helm_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_id"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_id"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_id"] = reinterpret_cast<uint64_t>(&(df_structure->pants_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shield_id"] = reinterpret_cast<uint64_t>(&(df_structure->shield_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trapcomp_id"] = reinterpret_cast<uint64_t>(&(df_structure->trapcomp_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["toy_id"] = reinterpret_cast<uint64_t>(&(df_structure->toy_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["instrument_id"] = reinterpret_cast<uint64_t>(&(df_structure->instrument_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tool_id"] = reinterpret_cast<uint64_t>(&(df_structure->tool_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["siegeammo_id"] = reinterpret_cast<uint64_t>(&(df_structure->siegeammo_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_rarity"] = reinterpret_cast<uint64_t>(&(df_structure->armor_rarity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_rarity"] = reinterpret_cast<uint64_t>(&(df_structure->helm_rarity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_rarity"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_rarity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_rarity"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_rarity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_rarity"] = reinterpret_cast<uint64_t>(&(df_structure->pants_rarity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["digger_str"] = reinterpret_cast<uint64_t>(&(df_structure->digger_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapon_str"] = reinterpret_cast<uint64_t>(&(df_structure->weapon_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor_str"] = reinterpret_cast<uint64_t>(&(df_structure->armor_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_str"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helm_str"] = reinterpret_cast<uint64_t>(&(df_structure->helm_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves_str"] = reinterpret_cast<uint64_t>(&(df_structure->gloves_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes_str"] = reinterpret_cast<uint64_t>(&(df_structure->shoes_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants_str"] = reinterpret_cast<uint64_t>(&(df_structure->pants_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shield_str"] = reinterpret_cast<uint64_t>(&(df_structure->shield_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trapcomp_str"] = reinterpret_cast<uint64_t>(&(df_structure->trapcomp_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["toy_str"] = reinterpret_cast<uint64_t>(&(df_structure->toy_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["instrument_str"] = reinterpret_cast<uint64_t>(&(df_structure->instrument_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["siegeammo_str"] = reinterpret_cast<uint64_t>(&(df_structure->siegeammo_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tool_str"] = reinterpret_cast<uint64_t>(&(df_structure->tool_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_raw__T_symbols_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_raw::T_symbols*>(p_df_structure);

	p_table["symbols1"] = reinterpret_cast<uint64_t>(&(df_structure->symbols1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["symbols2"] = reinterpret_cast<uint64_t>(&(df_structure->symbols2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["select_symbol"] = reinterpret_cast<uint64_t>(&(df_structure->select_symbol)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subselect_symbol"] = reinterpret_cast<uint64_t>(&(df_structure->subselect_symbol)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cull_symbol"] = reinterpret_cast<uint64_t>(&(df_structure->cull_symbol)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_raw__T_progress_trigger_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_raw::T_progress_trigger*>(p_df_structure);

	p_table["population"] = reinterpret_cast<uint64_t>(&(df_structure->population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["production"] = reinterpret_cast<uint64_t>(&(df_structure->production)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trade"] = reinterpret_cast<uint64_t>(&(df_structure->trade)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pop_siege"] = reinterpret_cast<uint64_t>(&(df_structure->pop_siege)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prod_siege"] = reinterpret_cast<uint64_t>(&(df_structure->prod_siege)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trade_siege"] = reinterpret_cast<uint64_t>(&(df_structure->trade_siege)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_raw__T_jobs_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_raw::T_jobs*>(p_df_structure);

	p_table["permitted_job"] = reinterpret_cast<uint64_t>(&(df_structure->permitted_job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["permitted_labor"] = reinterpret_cast<uint64_t>(&(df_structure->permitted_labor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_construction"] = reinterpret_cast<uint64_t>(&(df_structure->world_construction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_raw__T_tissue_styles_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_raw::T_tissue_styles*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["preferred_shapings"] = reinterpret_cast<uint64_t>(&(df_structure->preferred_shapings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maintain_length_min"] = reinterpret_cast<uint64_t>(&(df_structure->maintain_length_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maintain_length_max"] = reinterpret_cast<uint64_t>(&(df_structure->maintain_length_max)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_raw__T_workshops_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_raw::T_workshops*>(p_df_structure);

	p_table["permitted_building_str"] = reinterpret_cast<uint64_t>(&(df_structure->permitted_building_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["permitted_building_id"] = reinterpret_cast<uint64_t>(&(df_structure->permitted_building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["permitted_reaction_str"] = reinterpret_cast<uint64_t>(&(df_structure->permitted_reaction_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["permitted_reaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->permitted_reaction_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_raw__T_land_holder_trigger_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_raw::T_land_holder_trigger*>(p_df_structure);

	p_table["num"] = reinterpret_cast<uint64_t>(&(df_structure->num)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population"] = reinterpret_cast<uint64_t>(&(df_structure->population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wealth"] = reinterpret_cast<uint64_t>(&(df_structure->wealth)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_raw*>(p_df_structure);

	p_table["code"] = reinterpret_cast<uint64_t>(&(df_structure->code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["raws"] = reinterpret_cast<uint64_t>(&(df_structure->raws)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_ids"] = reinterpret_cast<uint64_t>(&(df_structure->creature_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creatures"] = reinterpret_cast<uint64_t>(&(df_structure->creatures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["equipment"] = reinterpret_cast<uint64_t>(&(df_structure->equipment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["currency_value"] = reinterpret_cast<uint64_t>(&(df_structure->currency_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["translation"] = reinterpret_cast<uint64_t>(&(df_structure->translation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["symbols"] = reinterpret_cast<uint64_t>(&(df_structure->symbols)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sphere_alignment"] = reinterpret_cast<uint64_t>(&(df_structure->sphere_alignment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_facet_modifier"] = reinterpret_cast<uint64_t>(&(df_structure->art_facet_modifier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_image_element_modifier"] = reinterpret_cast<uint64_t>(&(df_structure->art_image_element_modifier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_improvement_modifier"] = reinterpret_cast<uint64_t>(&(df_structure->item_improvement_modifier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["friendly_color"] = reinterpret_cast<uint64_t>(&(df_structure->friendly_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["default_site_type"] = reinterpret_cast<uint64_t>(&(df_structure->default_site_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["likes_site"] = reinterpret_cast<uint64_t>(&(df_structure->likes_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tolerates_site"] = reinterpret_cast<uint64_t>(&(df_structure->tolerates_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["biome_support"] = reinterpret_cast<uint64_t>(&(df_structure->biome_support)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_biome"] = reinterpret_cast<uint64_t>(&(df_structure->start_biome)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["settlement_biome"] = reinterpret_cast<uint64_t>(&(df_structure->settlement_biome)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active_season"] = reinterpret_cast<uint64_t>(&(df_structure->active_season)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["progress_trigger"] = reinterpret_cast<uint64_t>(&(df_structure->progress_trigger)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ethic"] = reinterpret_cast<uint64_t>(&(df_structure->ethic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["values"] = reinterpret_cast<uint64_t>(&(df_structure->values)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["variable_value_min"] = reinterpret_cast<uint64_t>(&(df_structure->variable_value_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["variable_value_max"] = reinterpret_cast<uint64_t>(&(df_structure->variable_value_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["scholar"] = reinterpret_cast<uint64_t>(&(df_structure->scholar)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_site_pop_number"] = reinterpret_cast<uint64_t>(&(df_structure->max_site_pop_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_pop_number"] = reinterpret_cast<uint64_t>(&(df_structure->max_pop_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_starting_civ_number"] = reinterpret_cast<uint64_t>(&(df_structure->max_starting_civ_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["religion"] = reinterpret_cast<uint64_t>(&(df_structure->religion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["religion_sphere"] = reinterpret_cast<uint64_t>(&(df_structure->religion_sphere)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jobs"] = reinterpret_cast<uint64_t>(&(df_structure->jobs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["positions"] = reinterpret_cast<uint64_t>(&(df_structure->positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["variable_positions"] = reinterpret_cast<uint64_t>(&(df_structure->variable_positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_variable_positions"] = reinterpret_cast<uint64_t>(&(df_structure->site_variable_positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_styles"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_styles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workshops"] = reinterpret_cast<uint64_t>(&(df_structure->workshops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["land_holder_trigger"] = reinterpret_cast<uint64_t>(&(df_structure->land_holder_trigger)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["banditry"] = reinterpret_cast<uint64_t>(&(df_structure->banditry)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gem_shapes_str"] = reinterpret_cast<uint64_t>(&(df_structure->gem_shapes_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stone_shapes_str"] = reinterpret_cast<uint64_t>(&(df_structure->stone_shapes_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gem_shapes"] = reinterpret_cast<uint64_t>(&(df_structure->gem_shapes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stone_shapes"] = reinterpret_cast<uint64_t>(&(df_structure->stone_shapes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->source_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4201_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["currency_str1"] = reinterpret_cast<uint64_t>(&(df_structure->currency_str1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["currency_str2"] = reinterpret_cast<uint64_t>(&(df_structure->currency_str2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animal"] = reinterpret_cast<uint64_t>(&(df_structure->animal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_population_unk4__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_population_unk4::T_anon_1*>(p_df_structure);

	p_table["idx"] = reinterpret_cast<uint64_t>(&(df_structure->idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_population_unk4__T_anon_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_population_unk4::T_anon_2*>(p_df_structure);

	p_table["idx"] = reinterpret_cast<uint64_t>(&(df_structure->idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_population_unk4__T_anon_3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_population_unk4::T_anon_3*>(p_df_structure);

	p_table["idx"] = reinterpret_cast<uint64_t>(&(df_structure->idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_population_unk4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_population_unk4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_population_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_population*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["races"] = reinterpret_cast<uint64_t>(&(df_structure->races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["counts"] = reinterpret_cast<uint64_t>(&(df_structure->counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_nemesis_record_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::nemesis_record*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["save_file_id"] = reinterpret_cast<uint64_t>(&(df_structure->save_file_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["member_idx"] = reinterpret_cast<uint64_t>(&(df_structure->member_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["figure"] = reinterpret_cast<uint64_t>(&(df_structure->figure)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_leader_id"] = reinterpret_cast<uint64_t>(&(df_structure->group_leader_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["companions"] = reinterpret_cast<uint64_t>(&(df_structure->companions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk10"] = reinterpret_cast<uint64_t>(&(df_structure->unk10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk11"] = reinterpret_cast<uint64_t>(&(df_structure->unk11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk12"] = reinterpret_cast<uint64_t>(&(df_structure->unk12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_artifact_record_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::artifact_record*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abs_tile_x"] = reinterpret_cast<uint64_t>(&(df_structure->abs_tile_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abs_tile_y"] = reinterpret_cast<uint64_t>(&(df_structure->abs_tile_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abs_tile_z"] = reinterpret_cast<uint64_t>(&(df_structure->abs_tile_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure_local"] = reinterpret_cast<uint64_t>(&(df_structure->structure_local)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion"] = reinterpret_cast<uint64_t>(&(df_structure->subregion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_layer"] = reinterpret_cast<uint64_t>(&(df_structure->feature_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owner_hf"] = reinterpret_cast<uint64_t>(&(df_structure->owner_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["remote_claims"] = reinterpret_cast<uint64_t>(&(df_structure->remote_claims)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_claims"] = reinterpret_cast<uint64_t>(&(df_structure->entity_claims)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["direct_claims"] = reinterpret_cast<uint64_t>(&(df_structure->direct_claims)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["storage_site"] = reinterpret_cast<uint64_t>(&(df_structure->storage_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["storage_structure_local"] = reinterpret_cast<uint64_t>(&(df_structure->storage_structure_local)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["loss_region"] = reinterpret_cast<uint64_t>(&(df_structure->loss_region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["holder_hf"] = reinterpret_cast<uint64_t>(&(df_structure->holder_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_machine_tile_set_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::machine_tile_set*>(p_df_structure);

	p_table["tiles"] = reinterpret_cast<uint64_t>(&(df_structure->tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["can_connect"] = reinterpret_cast<uint64_t>(&(df_structure->can_connect)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_machine__T_components_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::machine::T_components*>(p_df_structure);

	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["connections"] = reinterpret_cast<uint64_t>(&(df_structure->connections)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_machine_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::machine*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["components"] = reinterpret_cast<uint64_t>(&(df_structure->components)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_power"] = reinterpret_cast<uint64_t>(&(df_structure->cur_power)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_power"] = reinterpret_cast<uint64_t>(&(df_structure->min_power)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["visual_phase"] = reinterpret_cast<uint64_t>(&(df_structure->visual_phase)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["phase_timer"] = reinterpret_cast<uint64_t>(&(df_structure->phase_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_machine_standardst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::machine_standardst*>(p_df_structure);

}

void generate_building_axle_horizontalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_axle_horizontalst*>(p_df_structure);

	p_table["machine"] = reinterpret_cast<uint64_t>(&(df_structure->machine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_vertical"] = reinterpret_cast<uint64_t>(&(df_structure->is_vertical)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_axle_verticalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_axle_verticalst*>(p_df_structure);

	p_table["machine"] = reinterpret_cast<uint64_t>(&(df_structure->machine)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_gear_assemblyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_gear_assemblyst*>(p_df_structure);

	p_table["machine"] = reinterpret_cast<uint64_t>(&(df_structure->machine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gear_flags"] = reinterpret_cast<uint64_t>(&(df_structure->gear_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_windmillst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_windmillst*>(p_df_structure);

	p_table["machine"] = reinterpret_cast<uint64_t>(&(df_structure->machine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orient_x"] = reinterpret_cast<uint64_t>(&(df_structure->orient_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orient_y"] = reinterpret_cast<uint64_t>(&(df_structure->orient_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_working"] = reinterpret_cast<uint64_t>(&(df_structure->is_working)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["visual_rotated"] = reinterpret_cast<uint64_t>(&(df_structure->visual_rotated)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rotate_timer"] = reinterpret_cast<uint64_t>(&(df_structure->rotate_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orient_timer"] = reinterpret_cast<uint64_t>(&(df_structure->orient_timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_water_wheelst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_water_wheelst*>(p_df_structure);

	p_table["machine"] = reinterpret_cast<uint64_t>(&(df_structure->machine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_vertical"] = reinterpret_cast<uint64_t>(&(df_structure->is_vertical)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gives_power"] = reinterpret_cast<uint64_t>(&(df_structure->gives_power)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_screw_pumpst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_screw_pumpst*>(p_df_structure);

	p_table["machine"] = reinterpret_cast<uint64_t>(&(df_structure->machine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pump_energy"] = reinterpret_cast<uint64_t>(&(df_structure->pump_energy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["direction"] = reinterpret_cast<uint64_t>(&(df_structure->direction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pump_manually"] = reinterpret_cast<uint64_t>(&(df_structure->pump_manually)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_rollersst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_rollersst*>(p_df_structure);

	p_table["machine"] = reinterpret_cast<uint64_t>(&(df_structure->machine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["direction"] = reinterpret_cast<uint64_t>(&(df_structure->direction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed"] = reinterpret_cast<uint64_t>(&(df_structure->speed)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_burrow_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_burrow*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_bitmask"] = reinterpret_cast<uint64_t>(&(df_structure->tile_bitmask)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["link"] = reinterpret_cast<uint64_t>(&(df_structure->link)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_burrow_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_burrow_link*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prev"] = reinterpret_cast<uint64_t>(&(df_structure->prev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next"] = reinterpret_cast<uint64_t>(&(df_structure->next)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_map_block_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::map_block*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_events"] = reinterpret_cast<uint64_t>(&(df_structure->block_events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_burrows"] = reinterpret_cast<uint64_t>(&(df_structure->block_burrows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local_feature"] = reinterpret_cast<uint64_t>(&(df_structure->local_feature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_feature"] = reinterpret_cast<uint64_t>(&(df_structure->global_feature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_depth"] = reinterpret_cast<uint64_t>(&(df_structure->layer_depth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dsgn_check_cooldown"] = reinterpret_cast<uint64_t>(&(df_structure->dsgn_check_cooldown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["default_liquid"] = reinterpret_cast<uint64_t>(&(df_structure->default_liquid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flows"] = reinterpret_cast<uint64_t>(&(df_structure->flows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flow_pool"] = reinterpret_cast<uint64_t>(&(df_structure->flow_pool)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_pos"] = reinterpret_cast<uint64_t>(&(df_structure->map_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tiletype"] = reinterpret_cast<uint64_t>(&(df_structure->tiletype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["designation"] = reinterpret_cast<uint64_t>(&(df_structure->designation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occupancy"] = reinterpret_cast<uint64_t>(&(df_structure->occupancy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fog_of_war"] = reinterpret_cast<uint64_t>(&(df_structure->fog_of_war)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["path_cost"] = reinterpret_cast<uint64_t>(&(df_structure->path_cost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["path_tag"] = reinterpret_cast<uint64_t>(&(df_structure->path_tag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["walkable"] = reinterpret_cast<uint64_t>(&(df_structure->walkable)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_edge_distance"] = reinterpret_cast<uint64_t>(&(df_structure->map_edge_distance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature_1"] = reinterpret_cast<uint64_t>(&(df_structure->temperature_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature_2"] = reinterpret_cast<uint64_t>(&(df_structure->temperature_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk13"] = reinterpret_cast<uint64_t>(&(df_structure->unk13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_flow"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_flow)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_offset"] = reinterpret_cast<uint64_t>(&(df_structure->region_offset)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_cave_column_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::cave_column_link*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prev"] = reinterpret_cast<uint64_t>(&(df_structure->prev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next"] = reinterpret_cast<uint64_t>(&(df_structure->next)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_map_block_column__T_unmined_glyphs_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::map_block_column::T_unmined_glyphs*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_map_block_column_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::map_block_column*>(p_df_structure);

	p_table["sink_level"] = reinterpret_cast<uint64_t>(&(df_structure->sink_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["beach_level"] = reinterpret_cast<uint64_t>(&(df_structure->beach_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ground_level"] = reinterpret_cast<uint64_t>(&(df_structure->ground_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unmined_glyphs"] = reinterpret_cast<uint64_t>(&(df_structure->unmined_glyphs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z_base"] = reinterpret_cast<uint64_t>(&(df_structure->z_base)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cave_columns"] = reinterpret_cast<uint64_t>(&(df_structure->cave_columns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["column_rectangles"] = reinterpret_cast<uint64_t>(&(df_structure->column_rectangles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z_shift"] = reinterpret_cast<uint64_t>(&(df_structure->z_shift)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation"] = reinterpret_cast<uint64_t>(&(df_structure->elevation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_pos"] = reinterpret_cast<uint64_t>(&(df_structure->map_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_square_event_mineralst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event_mineralst*>(p_df_structure);

	p_table["inorganic_mat"] = reinterpret_cast<uint64_t>(&(df_structure->inorganic_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_bitmask"] = reinterpret_cast<uint64_t>(&(df_structure->tile_bitmask)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_square_event_frozen_liquidst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event_frozen_liquidst*>(p_df_structure);

	p_table["tiles"] = reinterpret_cast<uint64_t>(&(df_structure->tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_type"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_square_event_world_constructionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event_world_constructionst*>(p_df_structure);

	p_table["construction_id"] = reinterpret_cast<uint64_t>(&(df_structure->construction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_bitmask"] = reinterpret_cast<uint64_t>(&(df_structure->tile_bitmask)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_square_event_material_spatterst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event_material_spatterst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount"] = reinterpret_cast<uint64_t>(&(df_structure->amount)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_temperature"] = reinterpret_cast<uint64_t>(&(df_structure->min_temperature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_temperature"] = reinterpret_cast<uint64_t>(&(df_structure->max_temperature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_block_square_event_item_spatterst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::block_square_event_item_spatterst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount"] = reinterpret_cast<uint64_t>(&(df_structure->amount)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temp1"] = reinterpret_cast<uint64_t>(&(df_structure->temp1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temp2"] = reinterpret_cast<uint64_t>(&(df_structure->temp2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature*>(p_df_structure);

	p_table["population"] = reinterpret_cast<uint64_t>(&(df_structure->population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_pos"] = reinterpret_cast<uint64_t>(&(df_structure->embark_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_map_z"] = reinterpret_cast<uint64_t>(&(df_structure->min_map_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_map_z"] = reinterpret_cast<uint64_t>(&(df_structure->max_map_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_outdoor_riverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_outdoor_riverst*>(p_df_structure);

}

void generate_feature_cavest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_cavest*>(p_df_structure);

}

void generate_feature_pitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_pitst*>(p_df_structure);

}

void generate_feature_magma_poolst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_magma_poolst*>(p_df_structure);

	p_table["magma_fill_z"] = reinterpret_cast<uint64_t>(&(df_structure->magma_fill_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_volcanost_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_volcanost*>(p_df_structure);

	p_table["magma_fill_z"] = reinterpret_cast<uint64_t>(&(df_structure->magma_fill_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_deep_special_tubest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_deep_special_tubest*>(p_df_structure);

}

void generate_feature_deep_surface_portalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_deep_surface_portalst*>(p_df_structure);

}

void generate_feature_subterranean_from_layerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_subterranean_from_layerst*>(p_df_structure);

}

void generate_feature_magma_core_from_layerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_magma_core_from_layerst*>(p_df_structure);

}

void generate_feature_underworld_from_layerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_underworld_from_layerst*>(p_df_structure);

}

void generate_feature_init_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["alterations"] = reinterpret_cast<uint64_t>(&(df_structure->alterations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_x"] = reinterpret_cast<uint64_t>(&(df_structure->start_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_y"] = reinterpret_cast<uint64_t>(&(df_structure->start_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_x"] = reinterpret_cast<uint64_t>(&(df_structure->end_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_y"] = reinterpret_cast<uint64_t>(&(df_structure->end_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_depth"] = reinterpret_cast<uint64_t>(&(df_structure->start_depth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_depth"] = reinterpret_cast<uint64_t>(&(df_structure->end_depth)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_outdoor_riverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_outdoor_riverst*>(p_df_structure);

	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_cavest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_cavest*>(p_df_structure);

	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_pitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_pitst*>(p_df_structure);

	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_magma_poolst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_magma_poolst*>(p_df_structure);

	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_volcanost_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_volcanost*>(p_df_structure);

	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_deep_special_tubest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_deep_special_tubest*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_deep_surface_portalst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_deep_surface_portalst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_subterranean_from_layerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_subterranean_from_layerst*>(p_df_structure);

	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_magma_core_from_layerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_magma_core_from_layerst*>(p_df_structure);

	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_feature_init_underworld_from_layerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::feature_init_underworld_from_layerst*>(p_df_structure);

	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature"] = reinterpret_cast<uint64_t>(&(df_structure->feature)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_square_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_square*>(p_df_structure);

	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["construction_id"] = reinterpret_cast<uint64_t>(&(df_structure->construction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_x"] = reinterpret_cast<uint64_t>(&(df_structure->embark_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_y"] = reinterpret_cast<uint64_t>(&(df_structure->embark_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_unk"] = reinterpret_cast<uint64_t>(&(df_structure->embark_unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_z"] = reinterpret_cast<uint64_t>(&(df_structure->embark_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_square_roadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_square_roadst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_square_tunnelst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_square_tunnelst*>(p_df_structure);

}

void generate_world_construction_square_bridgest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_square_bridgest*>(p_df_structure);

	p_table["road_id"] = reinterpret_cast<uint64_t>(&(df_structure->road_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_square_wallst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_square_wallst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["square_obj"] = reinterpret_cast<uint64_t>(&(df_structure->square_obj)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["square_pos"] = reinterpret_cast<uint64_t>(&(df_structure->square_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_roadst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_roadst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_tunnelst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_tunnelst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_bridgest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_bridgest*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_construction_wallst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_construction_wallst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_construction_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::construction*>(p_df_structure);

	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_tile"] = reinterpret_cast<uint64_t>(&(df_structure->original_tile)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_flow_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::flow_info*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["density"] = reinterpret_cast<uint64_t>(&(df_structure->density)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dest"] = reinterpret_cast<uint64_t>(&(df_structure->dest)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["expanding"] = reinterpret_cast<uint64_t>(&(df_structure->expanding)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reuse"] = reinterpret_cast<uint64_t>(&(df_structure->reuse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guide_id"] = reinterpret_cast<uint64_t>(&(df_structure->guide_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_flow_guide_trailing_flowst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::flow_guide_trailing_flowst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_flow_guide_item_cloudst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::flow_guide_item_cloudst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_effect_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::effect_info*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["foreground"] = reinterpret_cast<uint64_t>(&(df_structure->foreground)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["background"] = reinterpret_cast<uint64_t>(&(df_structure->background)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bright"] = reinterpret_cast<uint64_t>(&(df_structure->bright)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_material_common__T_heat_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::material_common::T_heat*>(p_df_structure);

	p_table["spec_heat"] = reinterpret_cast<uint64_t>(&(df_structure->spec_heat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["heatdam_point"] = reinterpret_cast<uint64_t>(&(df_structure->heatdam_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colddam_point"] = reinterpret_cast<uint64_t>(&(df_structure->colddam_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ignite_point"] = reinterpret_cast<uint64_t>(&(df_structure->ignite_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["melting_point"] = reinterpret_cast<uint64_t>(&(df_structure->melting_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["boiling_point"] = reinterpret_cast<uint64_t>(&(df_structure->boiling_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_fixed_temp"] = reinterpret_cast<uint64_t>(&(df_structure->mat_fixed_temp)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_material_common__T_strength_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::material_common::T_strength*>(p_df_structure);

	p_table["absorption"] = reinterpret_cast<uint64_t>(&(df_structure->absorption)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["yield"] = reinterpret_cast<uint64_t>(&(df_structure->yield)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fracture"] = reinterpret_cast<uint64_t>(&(df_structure->fracture)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strain_at_yield"] = reinterpret_cast<uint64_t>(&(df_structure->strain_at_yield)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_edge"] = reinterpret_cast<uint64_t>(&(df_structure->max_edge)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_material_common__T_reaction_product_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::material_common::T_reaction_product*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_material_common__T_hardens_with_water_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::material_common::T_hardens_with_water*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_material_common_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::material_common*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gem_name1"] = reinterpret_cast<uint64_t>(&(df_structure->gem_name1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gem_name2"] = reinterpret_cast<uint64_t>(&(df_structure->gem_name2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stone_name"] = reinterpret_cast<uint64_t>(&(df_structure->stone_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["heat"] = reinterpret_cast<uint64_t>(&(df_structure->heat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["solid_density"] = reinterpret_cast<uint64_t>(&(df_structure->solid_density)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_density"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_density)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["molar_mass"] = reinterpret_cast<uint64_t>(&(df_structure->molar_mass)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state_color"] = reinterpret_cast<uint64_t>(&(df_structure->state_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state_name"] = reinterpret_cast<uint64_t>(&(df_structure->state_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state_adj"] = reinterpret_cast<uint64_t>(&(df_structure->state_adj)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strength"] = reinterpret_cast<uint64_t>(&(df_structure->strength)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_value"] = reinterpret_cast<uint64_t>(&(df_structure->material_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extract_storage"] = reinterpret_cast<uint64_t>(&(df_structure->extract_storage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["butcher_special_type"] = reinterpret_cast<uint64_t>(&(df_structure->butcher_special_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["butcher_special_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->butcher_special_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meat_name"] = reinterpret_cast<uint64_t>(&(df_structure->meat_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_name"] = reinterpret_cast<uint64_t>(&(df_structure->block_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_product"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_product)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hardens_with_water"] = reinterpret_cast<uint64_t>(&(df_structure->hardens_with_water)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_class"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["basic_color"] = reinterpret_cast<uint64_t>(&(df_structure->basic_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["build_color"] = reinterpret_cast<uint64_t>(&(df_structure->build_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_color"] = reinterpret_cast<uint64_t>(&(df_structure->tile_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_symbol"] = reinterpret_cast<uint64_t>(&(df_structure->item_symbol)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["powder_dye"] = reinterpret_cast<uint64_t>(&(df_structure->powder_dye)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temp_diet_info"] = reinterpret_cast<uint64_t>(&(df_structure->temp_diet_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syndrome"] = reinterpret_cast<uint64_t>(&(df_structure->syndrome)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["soap_level"] = reinterpret_cast<uint64_t>(&(df_structure->soap_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_41c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_41c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_material_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::material*>(p_df_structure);

	p_table["prefix"] = reinterpret_cast<uint64_t>(&(df_structure->prefix)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["food_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->food_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["powder_dye_str"] = reinterpret_cast<uint64_t>(&(df_structure->powder_dye_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state_color_str"] = reinterpret_cast<uint64_t>(&(df_structure->state_color_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_material_template_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::material_template*>(p_df_structure);

	p_table["powder_dye_str"] = reinterpret_cast<uint64_t>(&(df_structure->powder_dye_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state_color_str"] = reinterpret_cast<uint64_t>(&(df_structure->state_color_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_inorganic_raw__T_metal_ore_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::inorganic_raw::T_metal_ore*>(p_df_structure);

	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["probability"] = reinterpret_cast<uint64_t>(&(df_structure->probability)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_inorganic_raw__T_thread_metal_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::inorganic_raw::T_thread_metal*>(p_df_structure);

	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["probability"] = reinterpret_cast<uint64_t>(&(df_structure->probability)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_inorganic_raw__T_environment_spec_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::inorganic_raw::T_environment_spec*>(p_df_structure);

	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inclusion_type"] = reinterpret_cast<uint64_t>(&(df_structure->inclusion_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["probability"] = reinterpret_cast<uint64_t>(&(df_structure->probability)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_inorganic_raw__T_environment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::inorganic_raw::T_environment*>(p_df_structure);

	p_table["location"] = reinterpret_cast<uint64_t>(&(df_structure->location)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["probability"] = reinterpret_cast<uint64_t>(&(df_structure->probability)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_inorganic_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::inorganic_raw*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->source_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4201_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metal_ore"] = reinterpret_cast<uint64_t>(&(df_structure->metal_ore)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thread_metal"] = reinterpret_cast<uint64_t>(&(df_structure->thread_metal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["economic_uses"] = reinterpret_cast<uint64_t>(&(df_structure->economic_uses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["environment_spec"] = reinterpret_cast<uint64_t>(&(df_structure->environment_spec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["environment"] = reinterpret_cast<uint64_t>(&(df_structure->environment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_special_mat_table_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::special_mat_table*>(p_df_structure);

	p_table["organic_types"] = reinterpret_cast<uint64_t>(&(df_structure->organic_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["organic_indexes"] = reinterpret_cast<uint64_t>(&(df_structure->organic_indexes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["organic_unknown"] = reinterpret_cast<uint64_t>(&(df_structure->organic_unknown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["builtin"] = reinterpret_cast<uint64_t>(&(df_structure->builtin)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_dipscript_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::dipscript_info*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["script_file"] = reinterpret_cast<uint64_t>(&(df_structure->script_file)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["script_steps"] = reinterpret_cast<uint64_t>(&(df_structure->script_steps)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["script_vars"] = reinterpret_cast<uint64_t>(&(df_structure->script_vars)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["code"] = reinterpret_cast<uint64_t>(&(df_structure->code)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_dipscript_popup_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::dipscript_popup*>(p_df_structure);

	p_table["meeting_holder"] = reinterpret_cast<uint64_t>(&(df_structure->meeting_holder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity"] = reinterpret_cast<uint64_t>(&(df_structure->activity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_active_script_var_unitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::active_script_var_unitst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_meeting_context_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::meeting_context*>(p_df_structure);

	p_table["meeting"] = reinterpret_cast<uint64_t>(&(df_structure->meeting)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["popup"] = reinterpret_cast<uint64_t>(&(df_structure->popup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_meeting_diplomat_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::meeting_diplomat_info*>(p_df_structure);

	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["diplomat_id"] = reinterpret_cast<uint64_t>(&(df_structure->diplomat_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["associate_id"] = reinterpret_cast<uint64_t>(&(df_structure->associate_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["topic_list"] = reinterpret_cast<uint64_t>(&(df_structure->topic_list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["topic_parms"] = reinterpret_cast<uint64_t>(&(df_structure->topic_parms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sell_requests"] = reinterpret_cast<uint64_t>(&(df_structure->sell_requests)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buy_requests"] = reinterpret_cast<uint64_t>(&(df_structure->buy_requests)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dipscript"] = reinterpret_cast<uint64_t>(&(df_structure->dipscript)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_step"] = reinterpret_cast<uint64_t>(&(df_structure->cur_step)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active_script_vars"] = reinterpret_cast<uint64_t>(&(df_structure->active_script_vars)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_entity"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_topic"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_year"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_tick"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_outcome"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_outcome)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contact_entity"] = reinterpret_cast<uint64_t>(&(df_structure->contact_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contact_year"] = reinterpret_cast<uint64_t>(&(df_structure->contact_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contact_tick"] = reinterpret_cast<uint64_t>(&(df_structure->contact_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_meeting_event_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::meeting_event*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["topic_parm"] = reinterpret_cast<uint64_t>(&(df_structure->topic_parm)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quota_total"] = reinterpret_cast<uint64_t>(&(df_structure->quota_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quota_remaining"] = reinterpret_cast<uint64_t>(&(df_structure->quota_remaining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ticks"] = reinterpret_cast<uint64_t>(&(df_structure->ticks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sell_prices"] = reinterpret_cast<uint64_t>(&(df_structure->sell_prices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buy_prices"] = reinterpret_cast<uint64_t>(&(df_structure->buy_prices)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_info*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_actor"] = reinterpret_cast<uint64_t>(&(df_structure->unit_actor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_noble"] = reinterpret_cast<uint64_t>(&(df_structure->unit_noble)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["place"] = reinterpret_cast<uint64_t>(&(df_structure->place)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["delay"] = reinterpret_cast<uint64_t>(&(df_structure->delay)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_quota"] = reinterpret_cast<uint64_t>(&(df_structure->tree_quota)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_party_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::party_info*>(p_df_structure);

	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location"] = reinterpret_cast<uint64_t>(&(df_structure->location)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_room_rent_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::room_rent_info*>(p_df_structure);

	p_table["elements"] = reinterpret_cast<uint64_t>(&(df_structure->elements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rent_value"] = reinterpret_cast<uint64_t>(&(df_structure->rent_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_entry_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_entry*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_event_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_event_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_controller"] = reinterpret_cast<uint64_t>(&(df_structure->army_controller)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event__T_unk_v42_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event::T_unk_v42_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event__T_unk_v42_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event::T_unk_v42_2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event*>(p_df_structure);

	p_table["event_id"] = reinterpret_cast<uint64_t>(&(df_structure->event_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_id"] = reinterpret_cast<uint64_t>(&(df_structure->activity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_event_id"] = reinterpret_cast<uint64_t>(&(df_structure->parent_event_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_training_sessionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_training_sessionst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_combat_trainingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_combat_trainingst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["organize_counter"] = reinterpret_cast<uint64_t>(&(df_structure->organize_counter)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_skill_demonstrationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_skill_demonstrationst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill"] = reinterpret_cast<uint64_t>(&(df_structure->skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["organize_counter"] = reinterpret_cast<uint64_t>(&(df_structure->organize_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wait_countdown"] = reinterpret_cast<uint64_t>(&(df_structure->wait_countdown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["train_rounds"] = reinterpret_cast<uint64_t>(&(df_structure->train_rounds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["train_countdown"] = reinterpret_cast<uint64_t>(&(df_structure->train_countdown)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_individual_skill_drillst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_individual_skill_drillst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["countdown"] = reinterpret_cast<uint64_t>(&(df_structure->countdown)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_sparringst__T_groups_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_sparringst::T_groups*>(p_df_structure);

	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["countdown"] = reinterpret_cast<uint64_t>(&(df_structure->countdown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_sparringst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_sparringst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["groups"] = reinterpret_cast<uint64_t>(&(df_structure->groups)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["countdown"] = reinterpret_cast<uint64_t>(&(df_structure->countdown)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_ranged_practicest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_ranged_practicest*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform_lock"] = reinterpret_cast<uint64_t>(&(df_structure->uniform_lock)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_harassmentst__T_anon_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_harassmentst::T_anon_2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_harassmentst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_harassmentst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conversationst__T_participants_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conversationst::T_participants*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conversationst__T_anon_6_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conversationst::T_anon_6*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conversationst__T_unk_b4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conversationst::T_unk_b4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conversationst__T_turns_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conversationst::T_turns*>(p_df_structure);

	p_table["speaker"] = reinterpret_cast<uint64_t>(&(df_structure->speaker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speaker_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->speaker_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["foreground"] = reinterpret_cast<uint64_t>(&(df_structure->foreground)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["background"] = reinterpret_cast<uint64_t>(&(df_structure->background)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bright"] = reinterpret_cast<uint64_t>(&(df_structure->bright)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ticks"] = reinterpret_cast<uint64_t>(&(df_structure->ticks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4014_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4014_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conversationst__T_unk2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conversationst::T_unk2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_23"] = reinterpret_cast<uint64_t>(&(df_structure->anon_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_24"] = reinterpret_cast<uint64_t>(&(df_structure->anon_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_25"] = reinterpret_cast<uint64_t>(&(df_structure->anon_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_26"] = reinterpret_cast<uint64_t>(&(df_structure->anon_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_27"] = reinterpret_cast<uint64_t>(&(df_structure->anon_27)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_28"] = reinterpret_cast<uint64_t>(&(df_structure->anon_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_29"] = reinterpret_cast<uint64_t>(&(df_structure->anon_29)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conversationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conversationst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["menu"] = reinterpret_cast<uint64_t>(&(df_structure->menu)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_b4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_b4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["turns"] = reinterpret_cast<uint64_t>(&(df_structure->turns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["floor_holder"] = reinterpret_cast<uint64_t>(&(df_structure->floor_holder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["floor_holder_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->floor_holder_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pause"] = reinterpret_cast<uint64_t>(&(df_structure->pause)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choices"] = reinterpret_cast<uint64_t>(&(df_structure->choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conflictst__T_sides__T_enemies_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conflictst::T_sides::T_enemies*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["conflict_level"] = reinterpret_cast<uint64_t>(&(df_structure->conflict_level)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conflictst__T_sides_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conflictst::T_sides*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_ids"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_ids"] = reinterpret_cast<uint64_t>(&(df_structure->unit_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["enemies"] = reinterpret_cast<uint64_t>(&(df_structure->enemies)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_conflictst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_conflictst*>(p_df_structure);

	p_table["sides"] = reinterpret_cast<uint64_t>(&(df_structure->sides)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_guardst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_guardst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_reunionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_reunionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_prayerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_prayerst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["topic"] = reinterpret_cast<uint64_t>(&(df_structure->topic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_socializest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_socializest*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_worshipst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_worshipst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_performancest__T_participant_actions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_performancest::T_participant_actions*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sub_type"] = reinterpret_cast<uint64_t>(&(df_structure->sub_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_act_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_act_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_act_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_act_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_act_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_act_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_act_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_act_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_act_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_act_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_act_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_act_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_act_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_act_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_performancest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_performancest*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["written_content_id"] = reinterpret_cast<uint64_t>(&(df_structure->written_content_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["poetic_form"] = reinterpret_cast<uint64_t>(&(df_structure->poetic_form)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["music_form"] = reinterpret_cast<uint64_t>(&(df_structure->music_form)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dance_form"] = reinterpret_cast<uint64_t>(&(df_structure->dance_form)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["participant_actions"] = reinterpret_cast<uint64_t>(&(df_structure->participant_actions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_performer_2d"] = reinterpret_cast<uint64_t>(&(df_structure->pos_performer_2d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_performer"] = reinterpret_cast<uint64_t>(&(df_structure->pos_performer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_1_x0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_1_x0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_1_y0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_1_y0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_1_x1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_1_x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_1_y1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_1_y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_1_z"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_1_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_2_x0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_2_x0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_2_y0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_2_y0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_2_x1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_2_x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_2_y1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_2_y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_2_z"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_2_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["play_orders"] = reinterpret_cast<uint64_t>(&(df_structure->play_orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_13"] = reinterpret_cast<uint64_t>(&(df_structure->unk_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_16"] = reinterpret_cast<uint64_t>(&(df_structure->unk_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_17"] = reinterpret_cast<uint64_t>(&(df_structure->unk_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_performance_play_orderst__T_anon_4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::performance_play_orderst::T_anon_4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_performance_play_orderst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::performance_play_orderst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_researchst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_researchst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_ponder_topicst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_ponder_topicst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["knowledge"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_discuss_topicst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_discuss_topicst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["knowledge"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_readst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_readst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["state"] = reinterpret_cast<uint64_t>(&(df_structure->state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_fill_service_orderst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_fill_service_orderst*>(p_df_structure);

	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_writest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_writest*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["knowledge"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_copy_written_contentst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_copy_written_contentst*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occupation_id"] = reinterpret_cast<uint64_t>(&(df_structure->occupation_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_id"] = reinterpret_cast<uint64_t>(&(df_structure->location_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flagsmaybe"] = reinterpret_cast<uint64_t>(&(df_structure->flagsmaybe)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_teach_topicst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_teach_topicst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_playst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_playst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_make_believest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_make_believest*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_play_with_toyst__T_unk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_play_with_toyst::T_unk*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_play_with_toyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_play_with_toyst*>(p_df_structure);

	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_encounterst__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_encounterst::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_encounterst__T_anon_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_encounterst::T_anon_2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_encounterst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_encounterst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_activity_event_store_objectst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::activity_event_store_objectst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_schedule_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::schedule_info*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slots"] = reinterpret_cast<uint64_t>(&(df_structure->slots)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_filter_spec_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_filter_spec*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_class"] = reinterpret_cast<uint64_t>(&(df_structure->material_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_uniform_spec_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_uniform_spec*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_filter"] = reinterpret_cast<uint64_t>(&(df_structure->item_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assigned"] = reinterpret_cast<uint64_t>(&(df_structure->assigned)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["indiv_choice"] = reinterpret_cast<uint64_t>(&(df_structure->indiv_choice)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_ammo_spec_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_ammo_spec*>(p_df_structure);

	p_table["item_filter"] = reinterpret_cast<uint64_t>(&(df_structure->item_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount"] = reinterpret_cast<uint64_t>(&(df_structure->amount)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assigned"] = reinterpret_cast<uint64_t>(&(df_structure->assigned)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_position_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_position*>(p_df_structure);

	p_table["occupant"] = reinterpret_cast<uint64_t>(&(df_structure->occupant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orders"] = reinterpret_cast<uint64_t>(&(df_structure->orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["preferences"] = reinterpret_cast<uint64_t>(&(df_structure->preferences)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform"] = reinterpret_cast<uint64_t>(&(df_structure->uniform)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assigned_items"] = reinterpret_cast<uint64_t>(&(df_structure->assigned_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quiver"] = reinterpret_cast<uint64_t>(&(df_structure->quiver)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["backpack"] = reinterpret_cast<uint64_t>(&(df_structure->backpack)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flask"] = reinterpret_cast<uint64_t>(&(df_structure->flask)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activities"] = reinterpret_cast<uint64_t>(&(df_structure->activities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_schedule_order_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_schedule_order*>(p_df_structure);

	p_table["order"] = reinterpret_cast<uint64_t>(&(df_structure->order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_count"] = reinterpret_cast<uint64_t>(&(df_structure->min_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["positions"] = reinterpret_cast<uint64_t>(&(df_structure->positions)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_schedule_entry_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_schedule_entry*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sleep_mode"] = reinterpret_cast<uint64_t>(&(df_structure->sleep_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform_mode"] = reinterpret_cast<uint64_t>(&(df_structure->uniform_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orders"] = reinterpret_cast<uint64_t>(&(df_structure->orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["order_assignments"] = reinterpret_cast<uint64_t>(&(df_structure->order_assignments)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad__T_rooms_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad::T_rooms*>(p_df_structure);

	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["alias"] = reinterpret_cast<uint64_t>(&(df_structure->alias)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["positions"] = reinterpret_cast<uint64_t>(&(df_structure->positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orders"] = reinterpret_cast<uint64_t>(&(df_structure->orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["schedule"] = reinterpret_cast<uint64_t>(&(df_structure->schedule)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_alert_idx"] = reinterpret_cast<uint64_t>(&(df_structure->cur_alert_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rooms"] = reinterpret_cast<uint64_t>(&(df_structure->rooms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rack_combat"] = reinterpret_cast<uint64_t>(&(df_structure->rack_combat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rack_training"] = reinterpret_cast<uint64_t>(&(df_structure->rack_training)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform_priority"] = reinterpret_cast<uint64_t>(&(df_structure->uniform_priority)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity"] = reinterpret_cast<uint64_t>(&(df_structure->activity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammunition"] = reinterpret_cast<uint64_t>(&(df_structure->ammunition)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["train_weapon_free"] = reinterpret_cast<uint64_t>(&(df_structure->train_weapon_free)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["train_weapon_inuse"] = reinterpret_cast<uint64_t>(&(df_structure->train_weapon_inuse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_items"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_units"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["carry_food"] = reinterpret_cast<uint64_t>(&(df_structure->carry_food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["carry_water"] = reinterpret_cast<uint64_t>(&(df_structure->carry_water)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leader_position"] = reinterpret_cast<uint64_t>(&(df_structure->leader_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leader_assignment"] = reinterpret_cast<uint64_t>(&(df_structure->leader_assignment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_movest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_movest*>(p_df_structure);

	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["point_id"] = reinterpret_cast<uint64_t>(&(df_structure->point_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_retrieve_artifactst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_retrieve_artifactst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_raid_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_raid_sitest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_squad_order_rescue_hfst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::squad_order_rescue_hfst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller__T_unk_64_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller::T_unk_64*>(p_df_structure);

	p_table["t1"] = reinterpret_cast<uint64_t>(&(df_structure->t1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t2"] = reinterpret_cast<uint64_t>(&(df_structure->t2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t4"] = reinterpret_cast<uint64_t>(&(df_structure->t4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t5"] = reinterpret_cast<uint64_t>(&(df_structure->t5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t6"] = reinterpret_cast<uint64_t>(&(df_structure->t6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t7"] = reinterpret_cast<uint64_t>(&(df_structure->t7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t11"] = reinterpret_cast<uint64_t>(&(df_structure->t11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t12"] = reinterpret_cast<uint64_t>(&(df_structure->t12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t13"] = reinterpret_cast<uint64_t>(&(df_structure->t13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t14"] = reinterpret_cast<uint64_t>(&(df_structure->t14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t15"] = reinterpret_cast<uint64_t>(&(df_structure->t15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t16"] = reinterpret_cast<uint64_t>(&(df_structure->t16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t17"] = reinterpret_cast<uint64_t>(&(df_structure->t17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t18"] = reinterpret_cast<uint64_t>(&(df_structure->t18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t19"] = reinterpret_cast<uint64_t>(&(df_structure->t19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t20"] = reinterpret_cast<uint64_t>(&(df_structure->t20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t21"] = reinterpret_cast<uint64_t>(&(df_structure->t21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t22"] = reinterpret_cast<uint64_t>(&(df_structure->t22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t23"] = reinterpret_cast<uint64_t>(&(df_structure->t23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t24"] = reinterpret_cast<uint64_t>(&(df_structure->t24)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_x"] = reinterpret_cast<uint64_t>(&(df_structure->pos_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_y"] = reinterpret_cast<uint64_t>(&(df_structure->pos_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_54"] = reinterpret_cast<uint64_t>(&(df_structure->unk_54)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_report"] = reinterpret_cast<uint64_t>(&(df_structure->mission_report)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_11v"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_11v)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_64"] = reinterpret_cast<uint64_t>(&(df_structure->unk_64)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub2__T_anon_5_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub2::T_anon_5*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub7__T_anon_3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub7::T_anon_3*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub7_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub7*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub11__T_anon_3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub11::T_anon_3*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub11_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub11*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub12__T_anon_4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub12::T_anon_4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub12_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub12*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub13__T_anon_4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub13::T_anon_4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub13_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub13*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub14__T_anon_4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub14::T_anon_4*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub14_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub14*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub15__T_anon_3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub15::T_anon_3*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_controller_sub15_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army_controller_sub15*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army__T_members_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army::T_members*>(p_df_structure);

	p_table["nemesis_id"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hunger_timer"] = reinterpret_cast<uint64_t>(&(df_structure->hunger_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thirst_timer"] = reinterpret_cast<uint64_t>(&(df_structure->thirst_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sleepiness_timer"] = reinterpret_cast<uint64_t>(&(df_structure->sleepiness_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stored_fat"] = reinterpret_cast<uint64_t>(&(df_structure->stored_fat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army__T_unk_2c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army::T_unk_2c*>(p_df_structure);

	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population_id"] = reinterpret_cast<uint64_t>(&(df_structure->population_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cultural_identity"] = reinterpret_cast<uint64_t>(&(df_structure->cultural_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_army_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::army*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_pos"] = reinterpret_cast<uint64_t>(&(df_structure->last_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["members"] = reinterpret_cast<uint64_t>(&(df_structure->members)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["controller_id"] = reinterpret_cast<uint64_t>(&(df_structure->controller_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["controller"] = reinterpret_cast<uint64_t>(&(df_structure->controller)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_x"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_pos_y"] = reinterpret_cast<uint64_t>(&(df_structure->unk_pos_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_70"] = reinterpret_cast<uint64_t>(&(df_structure->unk_70)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_80"] = reinterpret_cast<uint64_t>(&(df_structure->unk_80)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_90"] = reinterpret_cast<uint64_t>(&(df_structure->unk_90)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_94"] = reinterpret_cast<uint64_t>(&(df_structure->unk_94)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_98"] = reinterpret_cast<uint64_t>(&(df_structure->unk_98)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_class"] = reinterpret_cast<uint64_t>(&(df_structure->creature_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4407_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4407_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plant_raw__T_tiles_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plant_raw::T_tiles*>(p_df_structure);

	p_table["picked_tile"] = reinterpret_cast<uint64_t>(&(df_structure->picked_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_picked_tile"] = reinterpret_cast<uint64_t>(&(df_structure->dead_picked_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shrub_tile"] = reinterpret_cast<uint64_t>(&(df_structure->shrub_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_shrub_tile"] = reinterpret_cast<uint64_t>(&(df_structure->dead_shrub_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_tile"] = reinterpret_cast<uint64_t>(&(df_structure->tree_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_tree_tile"] = reinterpret_cast<uint64_t>(&(df_structure->dead_tree_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sapling_tile"] = reinterpret_cast<uint64_t>(&(df_structure->sapling_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_sapling_tile"] = reinterpret_cast<uint64_t>(&(df_structure->dead_sapling_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grass_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->grass_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["alt_grass_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->alt_grass_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->tree_tiles)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plant_raw__T_colors_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plant_raw::T_colors*>(p_df_structure);

	p_table["picked_color"] = reinterpret_cast<uint64_t>(&(df_structure->picked_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_picked_color"] = reinterpret_cast<uint64_t>(&(df_structure->dead_picked_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shrub_color"] = reinterpret_cast<uint64_t>(&(df_structure->shrub_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_shrub_color"] = reinterpret_cast<uint64_t>(&(df_structure->dead_shrub_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed_color"] = reinterpret_cast<uint64_t>(&(df_structure->seed_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_color"] = reinterpret_cast<uint64_t>(&(df_structure->tree_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_tree_color"] = reinterpret_cast<uint64_t>(&(df_structure->dead_tree_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sapling_color"] = reinterpret_cast<uint64_t>(&(df_structure->sapling_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_sapling_color"] = reinterpret_cast<uint64_t>(&(df_structure->dead_sapling_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grass_colors_0"] = reinterpret_cast<uint64_t>(&(df_structure->grass_colors_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grass_colors_1"] = reinterpret_cast<uint64_t>(&(df_structure->grass_colors_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grass_colors_2"] = reinterpret_cast<uint64_t>(&(df_structure->grass_colors_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plant_raw__T_material_defs_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plant_raw::T_material_defs*>(p_df_structure);

	p_table["type_basic_mat"] = reinterpret_cast<uint64_t>(&(df_structure->type_basic_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_tree"] = reinterpret_cast<uint64_t>(&(df_structure->type_tree)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_drink"] = reinterpret_cast<uint64_t>(&(df_structure->type_drink)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_seed"] = reinterpret_cast<uint64_t>(&(df_structure->type_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_thread"] = reinterpret_cast<uint64_t>(&(df_structure->type_thread)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_mill"] = reinterpret_cast<uint64_t>(&(df_structure->type_mill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_extract_vial"] = reinterpret_cast<uint64_t>(&(df_structure->type_extract_vial)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_extract_barrel"] = reinterpret_cast<uint64_t>(&(df_structure->type_extract_barrel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_extract_still_vial"] = reinterpret_cast<uint64_t>(&(df_structure->type_extract_still_vial)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_basic_mat"] = reinterpret_cast<uint64_t>(&(df_structure->idx_basic_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_tree"] = reinterpret_cast<uint64_t>(&(df_structure->idx_tree)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_drink"] = reinterpret_cast<uint64_t>(&(df_structure->idx_drink)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_seed"] = reinterpret_cast<uint64_t>(&(df_structure->idx_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_thread"] = reinterpret_cast<uint64_t>(&(df_structure->idx_thread)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_mill"] = reinterpret_cast<uint64_t>(&(df_structure->idx_mill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_extract_vial"] = reinterpret_cast<uint64_t>(&(df_structure->idx_extract_vial)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_extract_barrel"] = reinterpret_cast<uint64_t>(&(df_structure->idx_extract_barrel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_extract_still_vial"] = reinterpret_cast<uint64_t>(&(df_structure->idx_extract_still_vial)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_basic_mat"] = reinterpret_cast<uint64_t>(&(df_structure->str_basic_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_tree"] = reinterpret_cast<uint64_t>(&(df_structure->str_tree)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_drink"] = reinterpret_cast<uint64_t>(&(df_structure->str_drink)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_seed"] = reinterpret_cast<uint64_t>(&(df_structure->str_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_thread"] = reinterpret_cast<uint64_t>(&(df_structure->str_thread)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_mill"] = reinterpret_cast<uint64_t>(&(df_structure->str_mill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_extract_vial"] = reinterpret_cast<uint64_t>(&(df_structure->str_extract_vial)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_extract_barrel"] = reinterpret_cast<uint64_t>(&(df_structure->str_extract_barrel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_extract_still_vial"] = reinterpret_cast<uint64_t>(&(df_structure->str_extract_still_vial)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plant_raw_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plant_raw*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["raws"] = reinterpret_cast<uint64_t>(&(df_structure->raws)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adj"] = reinterpret_cast<uint64_t>(&(df_structure->adj)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed_singular"] = reinterpret_cast<uint64_t>(&(df_structure->seed_singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed_plural"] = reinterpret_cast<uint64_t>(&(df_structure->seed_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leaves_singular"] = reinterpret_cast<uint64_t>(&(df_structure->leaves_singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leaves_plural"] = reinterpret_cast<uint64_t>(&(df_structure->leaves_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->source_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4201_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tiles"] = reinterpret_cast<uint64_t>(&(df_structure->tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growdur"] = reinterpret_cast<uint64_t>(&(df_structure->growdur)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colors"] = reinterpret_cast<uint64_t>(&(df_structure->colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["alt_period"] = reinterpret_cast<uint64_t>(&(df_structure->alt_period)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shrub_drown_level"] = reinterpret_cast<uint64_t>(&(df_structure->shrub_drown_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_drown_level"] = reinterpret_cast<uint64_t>(&(df_structure->tree_drown_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sapling_drown_level"] = reinterpret_cast<uint64_t>(&(df_structure->sapling_drown_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["frequency"] = reinterpret_cast<uint64_t>(&(df_structure->frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["clustersize"] = reinterpret_cast<uint64_t>(&(df_structure->clustersize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prefstring"] = reinterpret_cast<uint64_t>(&(df_structure->prefstring)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_defs"] = reinterpret_cast<uint64_t>(&(df_structure->material_defs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["underground_depth_min"] = reinterpret_cast<uint64_t>(&(df_structure->underground_depth_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["underground_depth_max"] = reinterpret_cast<uint64_t>(&(df_structure->underground_depth_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["growths"] = reinterpret_cast<uint64_t>(&(df_structure->growths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["root_name"] = reinterpret_cast<uint64_t>(&(df_structure->root_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trunk_name"] = reinterpret_cast<uint64_t>(&(df_structure->trunk_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["heavy_branch_name"] = reinterpret_cast<uint64_t>(&(df_structure->heavy_branch_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["light_branch_name"] = reinterpret_cast<uint64_t>(&(df_structure->light_branch_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["twig_name"] = reinterpret_cast<uint64_t>(&(df_structure->twig_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cap_name"] = reinterpret_cast<uint64_t>(&(df_structure->cap_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trunk_period"] = reinterpret_cast<uint64_t>(&(df_structure->trunk_period)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["heavy_branch_density"] = reinterpret_cast<uint64_t>(&(df_structure->heavy_branch_density)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["light_branch_density"] = reinterpret_cast<uint64_t>(&(df_structure->light_branch_density)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_trunk_height"] = reinterpret_cast<uint64_t>(&(df_structure->max_trunk_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["heavy_branch_radius"] = reinterpret_cast<uint64_t>(&(df_structure->heavy_branch_radius)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["light_branch_radius"] = reinterpret_cast<uint64_t>(&(df_structure->light_branch_radius)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trunk_branching"] = reinterpret_cast<uint64_t>(&(df_structure->trunk_branching)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_trunk_diameter"] = reinterpret_cast<uint64_t>(&(df_structure->max_trunk_diameter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trunk_width_period"] = reinterpret_cast<uint64_t>(&(df_structure->trunk_width_period)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cap_period"] = reinterpret_cast<uint64_t>(&(df_structure->cap_period)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cap_radius"] = reinterpret_cast<uint64_t>(&(df_structure->cap_radius)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["root_density"] = reinterpret_cast<uint64_t>(&(df_structure->root_density)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["root_radius"] = reinterpret_cast<uint64_t>(&(df_structure->root_radius)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpile_growths"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile_growths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpile_growth_flags"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile_growth_flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plant_growth_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plant_growth*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_growth_item"] = reinterpret_cast<uint64_t>(&(df_structure->str_growth_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prints"] = reinterpret_cast<uint64_t>(&(df_structure->prints)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timing_1"] = reinterpret_cast<uint64_t>(&(df_structure->timing_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timing_2"] = reinterpret_cast<uint64_t>(&(df_structure->timing_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["locations"] = reinterpret_cast<uint64_t>(&(df_structure->locations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["density"] = reinterpret_cast<uint64_t>(&(df_structure->density)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["behavior"] = reinterpret_cast<uint64_t>(&(df_structure->behavior)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trunk_height_perc_1"] = reinterpret_cast<uint64_t>(&(df_structure->trunk_height_perc_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trunk_height_perc_2"] = reinterpret_cast<uint64_t>(&(df_structure->trunk_height_perc_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plant_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plant*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grow_counter"] = reinterpret_cast<uint64_t>(&(df_structure->grow_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["damage_flags"] = reinterpret_cast<uint64_t>(&(df_structure->damage_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hitpoints"] = reinterpret_cast<uint64_t>(&(df_structure->hitpoints)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["update_order"] = reinterpret_cast<uint64_t>(&(df_structure->update_order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["srb_id"] = reinterpret_cast<uint64_t>(&(df_structure->srb_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contaminants"] = reinterpret_cast<uint64_t>(&(df_structure->contaminants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_info"] = reinterpret_cast<uint64_t>(&(df_structure->tree_info)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_plant_tree_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::plant_tree_info*>(p_df_structure);

	p_table["body"] = reinterpret_cast<uint64_t>(&(df_structure->body)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extent_east"] = reinterpret_cast<uint64_t>(&(df_structure->extent_east)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extent_south"] = reinterpret_cast<uint64_t>(&(df_structure->extent_south)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extent_west"] = reinterpret_cast<uint64_t>(&(df_structure->extent_west)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extent_north"] = reinterpret_cast<uint64_t>(&(df_structure->extent_north)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_height"] = reinterpret_cast<uint64_t>(&(df_structure->body_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dim_x"] = reinterpret_cast<uint64_t>(&(df_structure->dim_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dim_y"] = reinterpret_cast<uint64_t>(&(df_structure->dim_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["roots"] = reinterpret_cast<uint64_t>(&(df_structure->roots)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["roots_depth"] = reinterpret_cast<uint64_t>(&(df_structure->roots_depth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_proj_list_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::proj_list_link*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prev"] = reinterpret_cast<uint64_t>(&(df_structure->prev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next"] = reinterpret_cast<uint64_t>(&(df_structure->next)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_projectile_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::projectile*>(p_df_structure);

	p_table["link"] = reinterpret_cast<uint64_t>(&(df_structure->link)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["firer"] = reinterpret_cast<uint64_t>(&(df_structure->firer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["origin_pos"] = reinterpret_cast<uint64_t>(&(df_structure->origin_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_pos"] = reinterpret_cast<uint64_t>(&(df_structure->target_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_pos"] = reinterpret_cast<uint64_t>(&(df_structure->cur_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prev_pos"] = reinterpret_cast<uint64_t>(&(df_structure->prev_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["distance_flown"] = reinterpret_cast<uint64_t>(&(df_structure->distance_flown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fall_threshold"] = reinterpret_cast<uint64_t>(&(df_structure->fall_threshold)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_hit_distance"] = reinterpret_cast<uint64_t>(&(df_structure->min_hit_distance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_ground_distance"] = reinterpret_cast<uint64_t>(&(df_structure->min_ground_distance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fall_counter"] = reinterpret_cast<uint64_t>(&(df_structure->fall_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fall_delay"] = reinterpret_cast<uint64_t>(&(df_structure->fall_delay)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hit_rating"] = reinterpret_cast<uint64_t>(&(df_structure->hit_rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk21"] = reinterpret_cast<uint64_t>(&(df_structure->unk21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk22"] = reinterpret_cast<uint64_t>(&(df_structure->unk22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bow_id"] = reinterpret_cast<uint64_t>(&(df_structure->bow_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_item_id"] = reinterpret_cast<uint64_t>(&(df_structure->unk_item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unk_unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_x"] = reinterpret_cast<uint64_t>(&(df_structure->pos_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_y"] = reinterpret_cast<uint64_t>(&(df_structure->pos_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_z"] = reinterpret_cast<uint64_t>(&(df_structure->pos_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_x"] = reinterpret_cast<uint64_t>(&(df_structure->speed_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_y"] = reinterpret_cast<uint64_t>(&(df_structure->speed_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_z"] = reinterpret_cast<uint64_t>(&(df_structure->speed_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accel_x"] = reinterpret_cast<uint64_t>(&(df_structure->accel_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accel_y"] = reinterpret_cast<uint64_t>(&(df_structure->accel_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accel_z"] = reinterpret_cast<uint64_t>(&(df_structure->accel_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_proj_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::proj_itemst*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_proj_unitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::proj_unitst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_proj_magicst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::proj_magicst*>(p_df_structure);

	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_handler_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_handler*>(p_df_structure);

	p_table["alphabetic"] = reinterpret_cast<uint64_t>(&(df_structure->alphabetic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_caste"] = reinterpret_cast<uint64_t>(&(df_structure->num_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_creature"] = reinterpret_cast<uint64_t>(&(df_structure->list_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_caste"] = reinterpret_cast<uint64_t>(&(df_structure->list_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["action_strings"] = reinterpret_cast<uint64_t>(&(df_structure->action_strings)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_plants_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_plants*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bushes"] = reinterpret_cast<uint64_t>(&(df_structure->bushes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bushes_idx"] = reinterpret_cast<uint64_t>(&(df_structure->bushes_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trees"] = reinterpret_cast<uint64_t>(&(df_structure->trees)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trees_idx"] = reinterpret_cast<uint64_t>(&(df_structure->trees_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grasses"] = reinterpret_cast<uint64_t>(&(df_structure->grasses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grasses_idx"] = reinterpret_cast<uint64_t>(&(df_structure->grasses_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_bodyglosses_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_bodyglosses*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_singular"] = reinterpret_cast<uint64_t>(&(df_structure->old_singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_singular"] = reinterpret_cast<uint64_t>(&(df_structure->new_singular)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_plural"] = reinterpret_cast<uint64_t>(&(df_structure->old_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_plural"] = reinterpret_cast<uint64_t>(&(df_structure->new_plural)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_itemdefs_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_itemdefs*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapons"] = reinterpret_cast<uint64_t>(&(df_structure->weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trapcomps"] = reinterpret_cast<uint64_t>(&(df_structure->trapcomps)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["toys"] = reinterpret_cast<uint64_t>(&(df_structure->toys)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tools"] = reinterpret_cast<uint64_t>(&(df_structure->tools)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tools_by_type"] = reinterpret_cast<uint64_t>(&(df_structure->tools_by_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["instruments"] = reinterpret_cast<uint64_t>(&(df_structure->instruments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor"] = reinterpret_cast<uint64_t>(&(df_structure->armor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo"] = reinterpret_cast<uint64_t>(&(df_structure->ammo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["siege_ammo"] = reinterpret_cast<uint64_t>(&(df_structure->siege_ammo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gloves"] = reinterpret_cast<uint64_t>(&(df_structure->gloves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shoes"] = reinterpret_cast<uint64_t>(&(df_structure->shoes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shields"] = reinterpret_cast<uint64_t>(&(df_structure->shields)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["helms"] = reinterpret_cast<uint64_t>(&(df_structure->helms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pants"] = reinterpret_cast<uint64_t>(&(df_structure->pants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["food"] = reinterpret_cast<uint64_t>(&(df_structure->food)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_language_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_language*>(p_df_structure);

	p_table["words"] = reinterpret_cast<uint64_t>(&(df_structure->words)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["symbols"] = reinterpret_cast<uint64_t>(&(df_structure->symbols)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["translations"] = reinterpret_cast<uint64_t>(&(df_structure->translations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["word_table"] = reinterpret_cast<uint64_t>(&(df_structure->word_table)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_descriptors_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_descriptors*>(p_df_structure);

	p_table["colors"] = reinterpret_cast<uint64_t>(&(df_structure->colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shapes"] = reinterpret_cast<uint64_t>(&(df_structure->shapes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["patterns"] = reinterpret_cast<uint64_t>(&(df_structure->patterns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_reactions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_reactions*>(p_df_structure);

	p_table["reactions"] = reinterpret_cast<uint64_t>(&(df_structure->reactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_categories"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_categories)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_buildings_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_buildings*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workshops"] = reinterpret_cast<uint64_t>(&(df_structure->workshops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["furnaces"] = reinterpret_cast<uint64_t>(&(df_structure->furnaces)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_syndromes_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_syndromes*>(p_df_structure);

	p_table["mat_types"] = reinterpret_cast<uint64_t>(&(df_structure->mat_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_indexes"] = reinterpret_cast<uint64_t>(&(df_structure->mat_indexes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interactions"] = reinterpret_cast<uint64_t>(&(df_structure->interactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws__T_effects_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws::T_effects*>(p_df_structure);

	p_table["mat_types"] = reinterpret_cast<uint64_t>(&(df_structure->mat_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_indexes"] = reinterpret_cast<uint64_t>(&(df_structure->mat_indexes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interactions"] = reinterpret_cast<uint64_t>(&(df_structure->interactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_raws_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_raws*>(p_df_structure);

	p_table["material_templates"] = reinterpret_cast<uint64_t>(&(df_structure->material_templates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inorganics"] = reinterpret_cast<uint64_t>(&(df_structure->inorganics)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inorganics_subset"] = reinterpret_cast<uint64_t>(&(df_structure->inorganics_subset)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_templates"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_templates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_detail_plans"] = reinterpret_cast<uint64_t>(&(df_structure->body_detail_plans)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_templates"] = reinterpret_cast<uint64_t>(&(df_structure->body_templates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bodyglosses"] = reinterpret_cast<uint64_t>(&(df_structure->bodyglosses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_variations"] = reinterpret_cast<uint64_t>(&(df_structure->creature_variations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creatures"] = reinterpret_cast<uint64_t>(&(df_structure->creatures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["itemdefs"] = reinterpret_cast<uint64_t>(&(df_structure->itemdefs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities"] = reinterpret_cast<uint64_t>(&(df_structure->entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["language"] = reinterpret_cast<uint64_t>(&(df_structure->language)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["descriptors"] = reinterpret_cast<uint64_t>(&(df_structure->descriptors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reactions"] = reinterpret_cast<uint64_t>(&(df_structure->reactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildings"] = reinterpret_cast<uint64_t>(&(df_structure->buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interactions"] = reinterpret_cast<uint64_t>(&(df_structure->interactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_table"] = reinterpret_cast<uint64_t>(&(df_structure->mat_table)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syndromes"] = reinterpret_cast<uint64_t>(&(df_structure->syndromes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effects"] = reinterpret_cast<uint64_t>(&(df_structure->effects)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction__T_building_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction::T_building*>(p_df_structure);

	p_table["str"] = reinterpret_cast<uint64_t>(&(df_structure->str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom"] = reinterpret_cast<uint64_t>(&(df_structure->custom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hotkey"] = reinterpret_cast<uint64_t>(&(df_structure->hotkey)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction*>(p_df_structure);

	p_table["code"] = reinterpret_cast<uint64_t>(&(df_structure->code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reagents"] = reinterpret_cast<uint64_t>(&(df_structure->reagents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["products"] = reinterpret_cast<uint64_t>(&(df_structure->products)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill"] = reinterpret_cast<uint64_t>(&(df_structure->skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_multiplier"] = reinterpret_cast<uint64_t>(&(df_structure->max_multiplier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->source_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["source_enid"] = reinterpret_cast<uint64_t>(&(df_structure->source_enid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["raw_strings"] = reinterpret_cast<uint64_t>(&(df_structure->raw_strings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category"] = reinterpret_cast<uint64_t>(&(df_structure->category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["descriptions"] = reinterpret_cast<uint64_t>(&(df_structure->descriptions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_description_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_description*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_reagent_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_reagent*>(p_df_structure);

	p_table["code"] = reinterpret_cast<uint64_t>(&(df_structure->code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quantity"] = reinterpret_cast<uint64_t>(&(df_structure->quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_reagent_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_reagent_itemst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_class"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_material_reaction_product"] = reinterpret_cast<uint64_t>(&(df_structure->has_material_reaction_product)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags1"] = reinterpret_cast<uint64_t>(&(df_structure->flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags3"] = reinterpret_cast<uint64_t>(&(df_structure->flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags4"] = reinterpret_cast<uint64_t>(&(df_structure->flags4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags5"] = reinterpret_cast<uint64_t>(&(df_structure->flags5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metal_ore"] = reinterpret_cast<uint64_t>(&(df_structure->metal_ore)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_dimension"] = reinterpret_cast<uint64_t>(&(df_structure->min_dimension)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contains"] = reinterpret_cast<uint64_t>(&(df_structure->contains)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_tool_use"] = reinterpret_cast<uint64_t>(&(df_structure->has_tool_use)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_str"] = reinterpret_cast<uint64_t>(&(df_structure->item_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_str"] = reinterpret_cast<uint64_t>(&(df_structure->material_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["metal_ore_str"] = reinterpret_cast<uint64_t>(&(df_structure->metal_ore_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contains_str"] = reinterpret_cast<uint64_t>(&(df_structure->contains_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_product_itemst__T_get_material_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_product_itemst::T_get_material*>(p_df_structure);

	p_table["reagent_code"] = reinterpret_cast<uint64_t>(&(df_structure->reagent_code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["product_code"] = reinterpret_cast<uint64_t>(&(df_structure->product_code)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_product_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_product_itemst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["probability"] = reinterpret_cast<uint64_t>(&(df_structure->probability)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["product_dimension"] = reinterpret_cast<uint64_t>(&(df_structure->product_dimension)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["get_material"] = reinterpret_cast<uint64_t>(&(df_structure->get_material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_str"] = reinterpret_cast<uint64_t>(&(df_structure->item_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_str"] = reinterpret_cast<uint64_t>(&(df_structure->material_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_product_item_improvementst__T_get_material_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_product_item_improvementst::T_get_material*>(p_df_structure);

	p_table["reagent_code"] = reinterpret_cast<uint64_t>(&(df_structure->reagent_code)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["product_code"] = reinterpret_cast<uint64_t>(&(df_structure->product_code)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_reaction_product_item_improvementst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::reaction_product_item_improvementst*>(p_df_structure);

	p_table["target_reagent"] = reinterpret_cast<uint64_t>(&(df_structure->target_reagent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["improvement_type"] = reinterpret_cast<uint64_t>(&(df_structure->improvement_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["improvement_specific_type"] = reinterpret_cast<uint64_t>(&(df_structure->improvement_specific_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["probability"] = reinterpret_cast<uint64_t>(&(df_structure->probability)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["get_material"] = reinterpret_cast<uint64_t>(&(df_structure->get_material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_str"] = reinterpret_cast<uint64_t>(&(df_structure->material_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4201_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_item_type_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_item_type*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_mapsquare_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_mapsquare*>(p_df_structure);

	p_table["tiletype"] = reinterpret_cast<uint64_t>(&(df_structure->tiletype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_spherest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_spherest*>(p_df_structure);

	p_table["sphere_type"] = reinterpret_cast<uint64_t>(&(df_structure->sphere_type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_knowledge_scholar_flagst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_knowledge_scholar_flagst*>(p_df_structure);

	p_table["knowledge"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_general_ref_value_levelst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::general_ref_value_levelst*>(p_df_structure);

	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["level"] = reinterpret_cast<uint64_t>(&(df_structure->level)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_specific_ref__T_data__T_UNIT_ITEM_WRESTLE_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::specific_ref::T_data::T_UNIT_ITEM_WRESTLE*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wrestle"] = reinterpret_cast<uint64_t>(&(df_structure->wrestle)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_specific_ref__T_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::specific_ref::T_data*>(p_df_structure);

	p_table["object"] = reinterpret_cast<uint64_t>(&(df_structure->object)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["VERMIN_ESCAPED_PET"] = reinterpret_cast<uint64_t>(&(df_structure->VERMIN_ESCAPED_PET)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["JOB"] = reinterpret_cast<uint64_t>(&(df_structure->JOB)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["UNIT_ITEM_WRESTLE"] = reinterpret_cast<uint64_t>(&(df_structure->UNIT_ITEM_WRESTLE)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_specific_ref_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::specific_ref*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_meeting_variable_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::meeting_variable*>(p_df_structure);

	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ref"] = reinterpret_cast<uint64_t>(&(df_structure->ref)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active_var"] = reinterpret_cast<uint64_t>(&(df_structure->active_var)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_entity_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_entity_link*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strength"] = reinterpret_cast<uint64_t>(&(df_structure->strength)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_site_link__T_unk_7_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_site_link::T_unk_7*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_site_link_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_site_link*>(p_df_structure);

	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["land_holder"] = reinterpret_cast<uint64_t>(&(df_structure->land_holder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status"] = reinterpret_cast<uint64_t>(&(df_structure->status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["link_strength"] = reinterpret_cast<uint64_t>(&(df_structure->link_strength)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_site_x"] = reinterpret_cast<uint64_t>(&(df_structure->target_site_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_site_y"] = reinterpret_cast<uint64_t>(&(df_structure->target_site_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_data__T_unk_654_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_data::T_unk_654*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_resource_allotment_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::resource_allotment_data*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["resource_allotments"] = reinterpret_cast<uint64_t>(&(df_structure->resource_allotments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_650"] = reinterpret_cast<uint64_t>(&(df_structure->unk_650)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_654"] = reinterpret_cast<uint64_t>(&(df_structure->unk_654)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_animals_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_animals*>(p_df_structure);

	p_table["empty_cages"] = reinterpret_cast<uint64_t>(&(df_structure->empty_cages)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["empty_traps"] = reinterpret_cast<uint64_t>(&(df_structure->empty_traps)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["enabled"] = reinterpret_cast<uint64_t>(&(df_structure->enabled)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_food_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_food*>(p_df_structure);

	p_table["meat"] = reinterpret_cast<uint64_t>(&(df_structure->meat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fish"] = reinterpret_cast<uint64_t>(&(df_structure->fish)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unprepared_fish"] = reinterpret_cast<uint64_t>(&(df_structure->unprepared_fish)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg"] = reinterpret_cast<uint64_t>(&(df_structure->egg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drink_plant"] = reinterpret_cast<uint64_t>(&(df_structure->drink_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drink_animal"] = reinterpret_cast<uint64_t>(&(df_structure->drink_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese_plant"] = reinterpret_cast<uint64_t>(&(df_structure->cheese_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese_animal"] = reinterpret_cast<uint64_t>(&(df_structure->cheese_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seeds"] = reinterpret_cast<uint64_t>(&(df_structure->seeds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leaves"] = reinterpret_cast<uint64_t>(&(df_structure->leaves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["powder_plant"] = reinterpret_cast<uint64_t>(&(df_structure->powder_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["powder_creature"] = reinterpret_cast<uint64_t>(&(df_structure->powder_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glob"] = reinterpret_cast<uint64_t>(&(df_structure->glob)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glob_paste"] = reinterpret_cast<uint64_t>(&(df_structure->glob_paste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glob_pressed"] = reinterpret_cast<uint64_t>(&(df_structure->glob_pressed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_plant"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_animal"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_misc"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_misc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prepared_meals"] = reinterpret_cast<uint64_t>(&(df_structure->prepared_meals)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_furniture_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_furniture*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_core"] = reinterpret_cast<uint64_t>(&(df_structure->quality_core)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_total"] = reinterpret_cast<uint64_t>(&(df_structure->quality_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sand_bags"] = reinterpret_cast<uint64_t>(&(df_structure->sand_bags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_refuse_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_refuse*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["corpses"] = reinterpret_cast<uint64_t>(&(df_structure->corpses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_parts"] = reinterpret_cast<uint64_t>(&(df_structure->body_parts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skulls"] = reinterpret_cast<uint64_t>(&(df_structure->skulls)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bones"] = reinterpret_cast<uint64_t>(&(df_structure->bones)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hair"] = reinterpret_cast<uint64_t>(&(df_structure->hair)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shells"] = reinterpret_cast<uint64_t>(&(df_structure->shells)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["teeth"] = reinterpret_cast<uint64_t>(&(df_structure->teeth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["horns"] = reinterpret_cast<uint64_t>(&(df_structure->horns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fresh_raw_hide"] = reinterpret_cast<uint64_t>(&(df_structure->fresh_raw_hide)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rotten_raw_hide"] = reinterpret_cast<uint64_t>(&(df_structure->rotten_raw_hide)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_stone_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_stone*>(p_df_structure);

	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_ore_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_ore*>(p_df_structure);

	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_ammo_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_ammo*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_core"] = reinterpret_cast<uint64_t>(&(df_structure->quality_core)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_total"] = reinterpret_cast<uint64_t>(&(df_structure->quality_total)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_coins_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_coins*>(p_df_structure);

	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_bars_blocks_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_bars_blocks*>(p_df_structure);

	p_table["bars_other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->bars_other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blocks_other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->blocks_other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bars_mats"] = reinterpret_cast<uint64_t>(&(df_structure->bars_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blocks_mats"] = reinterpret_cast<uint64_t>(&(df_structure->blocks_mats)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_gems_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_gems*>(p_df_structure);

	p_table["rough_other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->rough_other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cut_other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->cut_other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rough_mats"] = reinterpret_cast<uint64_t>(&(df_structure->rough_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cut_mats"] = reinterpret_cast<uint64_t>(&(df_structure->cut_mats)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_finished_goods_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_finished_goods*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_core"] = reinterpret_cast<uint64_t>(&(df_structure->quality_core)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_total"] = reinterpret_cast<uint64_t>(&(df_structure->quality_total)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_leather_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_leather*>(p_df_structure);

	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_cloth_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_cloth*>(p_df_structure);

	p_table["thread_silk"] = reinterpret_cast<uint64_t>(&(df_structure->thread_silk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thread_plant"] = reinterpret_cast<uint64_t>(&(df_structure->thread_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thread_yarn"] = reinterpret_cast<uint64_t>(&(df_structure->thread_yarn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thread_metal"] = reinterpret_cast<uint64_t>(&(df_structure->thread_metal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cloth_silk"] = reinterpret_cast<uint64_t>(&(df_structure->cloth_silk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cloth_plant"] = reinterpret_cast<uint64_t>(&(df_structure->cloth_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cloth_yarn"] = reinterpret_cast<uint64_t>(&(df_structure->cloth_yarn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cloth_metal"] = reinterpret_cast<uint64_t>(&(df_structure->cloth_metal)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_wood_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_wood*>(p_df_structure);

	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_weapons_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_weapons*>(p_df_structure);

	p_table["weapon_type"] = reinterpret_cast<uint64_t>(&(df_structure->weapon_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trapcomp_type"] = reinterpret_cast<uint64_t>(&(df_structure->trapcomp_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_core"] = reinterpret_cast<uint64_t>(&(df_structure->quality_core)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_total"] = reinterpret_cast<uint64_t>(&(df_structure->quality_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["usable"] = reinterpret_cast<uint64_t>(&(df_structure->usable)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unusable"] = reinterpret_cast<uint64_t>(&(df_structure->unusable)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_armor_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_armor*>(p_df_structure);

	p_table["body"] = reinterpret_cast<uint64_t>(&(df_structure->body)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["head"] = reinterpret_cast<uint64_t>(&(df_structure->head)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feet"] = reinterpret_cast<uint64_t>(&(df_structure->feet)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hands"] = reinterpret_cast<uint64_t>(&(df_structure->hands)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["legs"] = reinterpret_cast<uint64_t>(&(df_structure->legs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shield"] = reinterpret_cast<uint64_t>(&(df_structure->shield)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_mats"] = reinterpret_cast<uint64_t>(&(df_structure->other_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mats"] = reinterpret_cast<uint64_t>(&(df_structure->mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_core"] = reinterpret_cast<uint64_t>(&(df_structure->quality_core)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quality_total"] = reinterpret_cast<uint64_t>(&(df_structure->quality_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["usable"] = reinterpret_cast<uint64_t>(&(df_structure->usable)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unusable"] = reinterpret_cast<uint64_t>(&(df_structure->unusable)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings__T_sheet_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings::T_sheet*>(p_df_structure);

	p_table["paper"] = reinterpret_cast<uint64_t>(&(df_structure->paper)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parchment"] = reinterpret_cast<uint64_t>(&(df_structure->parchment)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stockpile_settings_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stockpile_settings*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animals"] = reinterpret_cast<uint64_t>(&(df_structure->animals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["food"] = reinterpret_cast<uint64_t>(&(df_structure->food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["furniture"] = reinterpret_cast<uint64_t>(&(df_structure->furniture)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["refuse"] = reinterpret_cast<uint64_t>(&(df_structure->refuse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stone"] = reinterpret_cast<uint64_t>(&(df_structure->stone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ore"] = reinterpret_cast<uint64_t>(&(df_structure->ore)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo"] = reinterpret_cast<uint64_t>(&(df_structure->ammo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["coins"] = reinterpret_cast<uint64_t>(&(df_structure->coins)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bars_blocks"] = reinterpret_cast<uint64_t>(&(df_structure->bars_blocks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gems"] = reinterpret_cast<uint64_t>(&(df_structure->gems)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finished_goods"] = reinterpret_cast<uint64_t>(&(df_structure->finished_goods)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leather"] = reinterpret_cast<uint64_t>(&(df_structure->leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cloth"] = reinterpret_cast<uint64_t>(&(df_structure->cloth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wood"] = reinterpret_cast<uint64_t>(&(df_structure->wood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapons"] = reinterpret_cast<uint64_t>(&(df_structure->weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor"] = reinterpret_cast<uint64_t>(&(df_structure->armor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sheet"] = reinterpret_cast<uint64_t>(&(df_structure->sheet)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allow_organic"] = reinterpret_cast<uint64_t>(&(df_structure->allow_organic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allow_inorganic"] = reinterpret_cast<uint64_t>(&(df_structure->allow_inorganic)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_stockpilest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_stockpilest*>(p_df_structure);

	p_table["settings"] = reinterpret_cast<uint64_t>(&(df_structure->settings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_barrels"] = reinterpret_cast<uint64_t>(&(df_structure->max_barrels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_bins"] = reinterpret_cast<uint64_t>(&(df_structure->max_bins)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_wheelbarrows"] = reinterpret_cast<uint64_t>(&(df_structure->max_wheelbarrows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["container_type"] = reinterpret_cast<uint64_t>(&(df_structure->container_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["container_item_id"] = reinterpret_cast<uint64_t>(&(df_structure->container_item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["container_x"] = reinterpret_cast<uint64_t>(&(df_structure->container_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["container_y"] = reinterpret_cast<uint64_t>(&(df_structure->container_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["links"] = reinterpret_cast<uint64_t>(&(df_structure->links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_links_only"] = reinterpret_cast<uint64_t>(&(df_structure->use_links_only)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpile_number"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["linked_stops"] = reinterpret_cast<uint64_t>(&(df_structure->linked_stops)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_hauling_route_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::hauling_route*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stops"] = reinterpret_cast<uint64_t>(&(df_structure->stops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vehicle_ids"] = reinterpret_cast<uint64_t>(&(df_structure->vehicle_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vehicle_stops"] = reinterpret_cast<uint64_t>(&(df_structure->vehicle_stops)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_hauling_stop_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::hauling_stop*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["settings"] = reinterpret_cast<uint64_t>(&(df_structure->settings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["conditions"] = reinterpret_cast<uint64_t>(&(df_structure->conditions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpiles"] = reinterpret_cast<uint64_t>(&(df_structure->stockpiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time_waiting"] = reinterpret_cast<uint64_t>(&(df_structure->time_waiting)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cart_id"] = reinterpret_cast<uint64_t>(&(df_structure->cart_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_stop_depart_condition_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::stop_depart_condition*>(p_df_structure);

	p_table["timeout"] = reinterpret_cast<uint64_t>(&(df_structure->timeout)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["direction"] = reinterpret_cast<uint64_t>(&(df_structure->direction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["load_percent"] = reinterpret_cast<uint64_t>(&(df_structure->load_percent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guide_path"] = reinterpret_cast<uint64_t>(&(df_structure->guide_path)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_vehicle_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::vehicle*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["offset_x"] = reinterpret_cast<uint64_t>(&(df_structure->offset_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["offset_y"] = reinterpret_cast<uint64_t>(&(df_structure->offset_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["offset_z"] = reinterpret_cast<uint64_t>(&(df_structure->offset_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_x"] = reinterpret_cast<uint64_t>(&(df_structure->speed_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_y"] = reinterpret_cast<uint64_t>(&(df_structure->speed_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_z"] = reinterpret_cast<uint64_t>(&(df_structure->speed_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["route_id"] = reinterpret_cast<uint64_t>(&(df_structure->route_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time_stopped"] = reinterpret_cast<uint64_t>(&(df_structure->time_stopped)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_target_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_target*>(p_df_structure);

	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["key"] = reinterpret_cast<uint64_t>(&(df_structure->key)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue"] = reinterpret_cast<uint64_t>(&(df_structure->tissue)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect__T_counter_trigger_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect::T_counter_trigger*>(p_df_structure);

	p_table["counter"] = reinterpret_cast<uint64_t>(&(df_structure->counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["minval"] = reinterpret_cast<uint64_t>(&(df_structure->minval)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maxval"] = reinterpret_cast<uint64_t>(&(df_structure->maxval)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required"] = reinterpret_cast<uint64_t>(&(df_structure->required)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prob"] = reinterpret_cast<uint64_t>(&(df_structure->prob)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start"] = reinterpret_cast<uint64_t>(&(df_structure->start)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["peak"] = reinterpret_cast<uint64_t>(&(df_structure->peak)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end"] = reinterpret_cast<uint64_t>(&(df_structure->end)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dwf_stretch"] = reinterpret_cast<uint64_t>(&(df_structure->dwf_stretch)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_id"] = reinterpret_cast<uint64_t>(&(df_structure->syn_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_index"] = reinterpret_cast<uint64_t>(&(df_structure->syn_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["moon_phase_min"] = reinterpret_cast<uint64_t>(&(df_structure->moon_phase_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["moon_phase_max"] = reinterpret_cast<uint64_t>(&(df_structure->moon_phase_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["counter_trigger"] = reinterpret_cast<uint64_t>(&(df_structure->counter_trigger)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_painst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_painst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_swellingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_swellingst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_oozingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_oozingst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_bruisingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_bruisingst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_blistersst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_blistersst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_numbnessst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_numbnessst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_paralysisst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_paralysisst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_feverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_feverst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_bleedingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_bleedingst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_cough_bloodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_cough_bloodst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_vomit_bloodst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_vomit_bloodst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_nauseast_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_nauseast*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_unconsciousnessst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_unconsciousnessst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_necrosisst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_necrosisst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_impair_functionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_impair_functionst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_drowsinessst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_drowsinessst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_dizzinessst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_dizzinessst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_display_namest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_display_namest*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_adj"] = reinterpret_cast<uint64_t>(&(df_structure->name_adj)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_body_appearance_modifierst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_body_appearance_modifierst*>(p_df_structure);

	p_table["unk_60"] = reinterpret_cast<uint64_t>(&(df_structure->unk_60)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_64"] = reinterpret_cast<uint64_t>(&(df_structure->unk_64)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_bp_appearance_modifierst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_bp_appearance_modifierst*>(p_df_structure);

	p_table["unk_6c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_body_transformationst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_body_transformationst*>(p_df_structure);

	p_table["chance"] = reinterpret_cast<uint64_t>(&(df_structure->chance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race_str"] = reinterpret_cast<uint64_t>(&(df_structure->race_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_str"] = reinterpret_cast<uint64_t>(&(df_structure->caste_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_creature_flags"] = reinterpret_cast<uint64_t>(&(df_structure->required_creature_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden_creature_flags"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden_creature_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["required_caste_flags"] = reinterpret_cast<uint64_t>(&(df_structure->required_caste_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden_caste_flags"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden_caste_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_skill_roll_adjustst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_skill_roll_adjustst*>(p_df_structure);

	p_table["multiplier"] = reinterpret_cast<uint64_t>(&(df_structure->multiplier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chance"] = reinterpret_cast<uint64_t>(&(df_structure->chance)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_display_symbolst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_display_symbolst*>(p_df_structure);

	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_flash_symbolst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_flash_symbolst*>(p_df_structure);

	p_table["sym_color"] = reinterpret_cast<uint64_t>(&(df_structure->sym_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["period"] = reinterpret_cast<uint64_t>(&(df_structure->period)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time"] = reinterpret_cast<uint64_t>(&(df_structure->time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_78"] = reinterpret_cast<uint64_t>(&(df_structure->unk_78)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_phys_att_changest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_phys_att_changest*>(p_df_structure);

	p_table["phys_att_perc"] = reinterpret_cast<uint64_t>(&(df_structure->phys_att_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["phys_att_add"] = reinterpret_cast<uint64_t>(&(df_structure->phys_att_add)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_ment_att_changest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_ment_att_changest*>(p_df_structure);

	p_table["ment_att_perc"] = reinterpret_cast<uint64_t>(&(df_structure->ment_att_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ment_att_add"] = reinterpret_cast<uint64_t>(&(df_structure->ment_att_add)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_add_simple_flagst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_add_simple_flagst*>(p_df_structure);

	p_table["tags1"] = reinterpret_cast<uint64_t>(&(df_structure->tags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tags2"] = reinterpret_cast<uint64_t>(&(df_structure->tags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_remove_simple_flagst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_remove_simple_flagst*>(p_df_structure);

	p_table["tags1"] = reinterpret_cast<uint64_t>(&(df_structure->tags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tags2"] = reinterpret_cast<uint64_t>(&(df_structure->tags2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_speed_changest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_speed_changest*>(p_df_structure);

	p_table["bonus_add"] = reinterpret_cast<uint64_t>(&(df_structure->bonus_add)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bonus_perc"] = reinterpret_cast<uint64_t>(&(df_structure->bonus_perc)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_body_mat_interactionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_body_mat_interactionst*>(p_df_structure);

	p_table["interaction_name"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_90"] = reinterpret_cast<uint64_t>(&(df_structure->unk_90)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_94"] = reinterpret_cast<uint64_t>(&(df_structure->unk_94)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_material_force_adjustst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_material_force_adjustst*>(p_df_structure);

	p_table["unk_6c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_88"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_mul"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_mul)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fraction_div"] = reinterpret_cast<uint64_t>(&(df_structure->fraction_div)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_can_do_interactionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_can_do_interactionst*>(p_df_structure);

	p_table["interaction"] = reinterpret_cast<uint64_t>(&(df_structure->interaction)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_sense_creature_classst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_sense_creature_classst*>(p_df_structure);

	p_table["class_name"] = reinterpret_cast<uint64_t>(&(df_structure->class_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color_foreground"] = reinterpret_cast<uint64_t>(&(df_structure->color_foreground)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color_background"] = reinterpret_cast<uint64_t>(&(df_structure->color_background)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["foreground_brightness"] = reinterpret_cast<uint64_t>(&(df_structure->foreground_brightness)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_feel_emotionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_feel_emotionst*>(p_df_structure);

	p_table["emotion"] = reinterpret_cast<uint64_t>(&(df_structure->emotion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_change_personalityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_change_personalityst*>(p_df_structure);

	p_table["facets"] = reinterpret_cast<uint64_t>(&(df_structure->facets)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_erratic_behaviorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_erratic_behaviorst*>(p_df_structure);

	p_table["sev"] = reinterpret_cast<uint64_t>(&(df_structure->sev)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_close_open_woundsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_close_open_woundsst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_cure_infectionsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_cure_infectionsst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_heal_nervesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_heal_nervesst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_heal_tissuesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_heal_tissuesst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_reduce_dizzinessst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_reduce_dizzinessst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_reduce_feverst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_reduce_feverst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_reduce_nauseast_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_reduce_nauseast*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_reduce_painst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_reduce_painst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_reduce_paralysisst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_reduce_paralysisst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_reduce_swellingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_reduce_swellingst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_regrow_partsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_regrow_partsst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_special_attack_interactionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_special_attack_interactionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_stop_bleedingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_stop_bleedingst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creature_interaction_effect_cure_infectionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creature_interaction_effect_cure_infectionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_syndrome_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::syndrome*>(p_df_structure);

	p_table["syn_name"] = reinterpret_cast<uint64_t>(&(df_structure->syn_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ce"] = reinterpret_cast<uint64_t>(&(df_structure->ce)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_affected_class"] = reinterpret_cast<uint64_t>(&(df_structure->syn_affected_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_affected_creature"] = reinterpret_cast<uint64_t>(&(df_structure->syn_affected_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_affected_caste"] = reinterpret_cast<uint64_t>(&(df_structure->syn_affected_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_immune_class"] = reinterpret_cast<uint64_t>(&(df_structure->syn_immune_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_immune_creature"] = reinterpret_cast<uint64_t>(&(df_structure->syn_immune_creature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_immune_caste"] = reinterpret_cast<uint64_t>(&(df_structure->syn_immune_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_class"] = reinterpret_cast<uint64_t>(&(df_structure->syn_class)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_identifier"] = reinterpret_cast<uint64_t>(&(df_structure->syn_identifier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syn_concentration_added"] = reinterpret_cast<uint64_t>(&(df_structure->syn_concentration_added)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_build_item_req_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_build_item_req*>(p_df_structure);

	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["candidates"] = reinterpret_cast<uint64_t>(&(df_structure->candidates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["candidate_selected"] = reinterpret_cast<uint64_t>(&(df_structure->candidate_selected)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["candidate_enabled"] = reinterpret_cast<uint64_t>(&(df_structure->candidate_enabled)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_required"] = reinterpret_cast<uint64_t>(&(df_structure->count_required)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_max"] = reinterpret_cast<uint64_t>(&(df_structure->count_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_provided"] = reinterpret_cast<uint64_t>(&(df_structure->count_provided)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_build_req_choice_genst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::build_req_choice_genst*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["candidates"] = reinterpret_cast<uint64_t>(&(df_structure->candidates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["used_count"] = reinterpret_cast<uint64_t>(&(df_structure->used_count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_build_req_choice_specst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::build_req_choice_specst*>(p_df_structure);

	p_table["candidate"] = reinterpret_cast<uint64_t>(&(df_structure->candidate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["candidate_id"] = reinterpret_cast<uint64_t>(&(df_structure->candidate_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_build_selector_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_build_selector*>(p_df_structure);

	p_table["requirements"] = reinterpret_cast<uint64_t>(&(df_structure->requirements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choices"] = reinterpret_cast<uint64_t>(&(df_structure->choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_type"] = reinterpret_cast<uint64_t>(&(df_structure->building_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->building_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_type"] = reinterpret_cast<uint64_t>(&(df_structure->custom_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stage"] = reinterpret_cast<uint64_t>(&(df_structure->stage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["req_index"] = reinterpret_cast<uint64_t>(&(df_structure->req_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_index"] = reinterpret_cast<uint64_t>(&(df_structure->sel_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_grouped"] = reinterpret_cast<uint64_t>(&(df_structure->is_grouped)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["errors"] = reinterpret_cast<uint64_t>(&(df_structure->errors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tiles"] = reinterpret_cast<uint64_t>(&(df_structure->tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5_0a"] = reinterpret_cast<uint64_t>(&(df_structure->unk5_0a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5_0b"] = reinterpret_cast<uint64_t>(&(df_structure->unk5_0b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plate_info"] = reinterpret_cast<uint64_t>(&(df_structure->plate_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7"] = reinterpret_cast<uint64_t>(&(df_structure->unk7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["friction"] = reinterpret_cast<uint64_t>(&(df_structure->friction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_dump"] = reinterpret_cast<uint64_t>(&(df_structure->use_dump)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dump_x_shift"] = reinterpret_cast<uint64_t>(&(df_structure->dump_x_shift)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dump_y_shift"] = reinterpret_cast<uint64_t>(&(df_structure->dump_y_shift)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed"] = reinterpret_cast<uint64_t>(&(df_structure->speed)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button*>(p_df_structure);

	p_table["hotkey_id"] = reinterpret_cast<uint64_t>(&(df_structure->hotkey_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_hidden"] = reinterpret_cast<uint64_t>(&(df_structure->is_hidden)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_buildingst*>(p_df_structure);

	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_building_category_selectorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_building_category_selectorst*>(p_df_structure);

	p_table["category_id"] = reinterpret_cast<uint64_t>(&(df_structure->category_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_building_material_selectorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_building_material_selectorst*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_category"] = reinterpret_cast<uint64_t>(&(df_structure->material_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_building_new_jobst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_building_new_jobst*>(p_df_structure);

	p_table["job_type"] = reinterpret_cast<uint64_t>(&(df_structure->job_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reaction_name"] = reinterpret_cast<uint64_t>(&(df_structure->reaction_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_category"] = reinterpret_cast<uint64_t>(&(df_structure->item_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_category"] = reinterpret_cast<uint64_t>(&(df_structure->material_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_48"] = reinterpret_cast<uint64_t>(&(df_structure->unk_48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_custom"] = reinterpret_cast<uint64_t>(&(df_structure->is_custom)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_building_custom_category_selectorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_building_custom_category_selectorst*>(p_df_structure);

	p_table["category"] = reinterpret_cast<uint64_t>(&(df_structure->category)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_constructionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_constructionst*>(p_df_structure);

	p_table["unused_c"] = reinterpret_cast<uint64_t>(&(df_structure->unused_c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_construction_donest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_construction_donest*>(p_df_structure);

}

void generate_interface_button_construction_category_selectorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_construction_category_selectorst*>(p_df_structure);

	p_table["category_id"] = reinterpret_cast<uint64_t>(&(df_structure->category_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interface_button_construction_building_selectorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interface_button_construction_building_selectorst*>(p_df_structure);

	p_table["building_type"] = reinterpret_cast<uint64_t>(&(df_structure->building_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->building_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_type"] = reinterpret_cast<uint64_t>(&(df_structure->custom_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["existing_count"] = reinterpret_cast<uint64_t>(&(df_structure->existing_count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_designation_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_designation*>(p_df_structure);

	p_table["marker_only"] = reinterpret_cast<uint64_t>(&(df_structure->marker_only)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["priority_set"] = reinterpret_cast<uint64_t>(&(df_structure->priority_set)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["priority"] = reinterpret_cast<uint64_t>(&(df_structure->priority)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mine_mode"] = reinterpret_cast<uint64_t>(&(df_structure->mine_mode)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_workshop_job_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_workshop_job*>(p_df_structure);

	p_table["choices_all"] = reinterpret_cast<uint64_t>(&(df_structure->choices_all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choices_visible"] = reinterpret_cast<uint64_t>(&(df_structure->choices_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category_id"] = reinterpret_cast<uint64_t>(&(df_structure->category_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_category"] = reinterpret_cast<uint64_t>(&(df_structure->material_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_tooltip_lines"] = reinterpret_cast<uint64_t>(&(df_structure->use_tooltip_lines)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_building_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_building*>(p_df_structure);

	p_table["choices_all"] = reinterpret_cast<uint64_t>(&(df_structure->choices_all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choices_visible"] = reinterpret_cast<uint64_t>(&(df_structure->choices_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category_id"] = reinterpret_cast<uint64_t>(&(df_structure->category_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_zone_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_zone*>(p_df_structure);

	p_table["remove"] = reinterpret_cast<uint64_t>(&(df_structure->remove)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected"] = reinterpret_cast<uint64_t>(&(df_structure->selected)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_unit_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_unit*>(p_df_structure);

	p_table["inv_items"] = reinterpret_cast<uint64_t>(&(df_structure->inv_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inv_spatters"] = reinterpret_cast<uint64_t>(&(df_structure->inv_spatters)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_new_squad"] = reinterpret_cast<uint64_t>(&(df_structure->in_new_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_uniform"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_uniform)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_88n_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88n_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_pos"] = reinterpret_cast<uint64_t>(&(df_structure->squad_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_assn"] = reinterpret_cast<uint64_t>(&(df_structure->squad_assn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_unk1"] = reinterpret_cast<uint64_t>(&(df_structure->squad_unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_unk2"] = reinterpret_cast<uint64_t>(&(df_structure->squad_unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_list_opened"] = reinterpret_cast<uint64_t>(&(df_structure->squad_list_opened)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rename_squad"] = reinterpret_cast<uint64_t>(&(df_structure->rename_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_88"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_11a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_11a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_11b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_11b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_11c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_11c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["expel_error"] = reinterpret_cast<uint64_t>(&(df_structure->expel_error)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_hospital_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_hospital*>(p_df_structure);

	p_table["selected_line"] = reinterpret_cast<uint64_t>(&(df_structure->selected_line)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["beds"] = reinterpret_cast<uint64_t>(&(df_structure->beds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tables"] = reinterpret_cast<uint64_t>(&(df_structure->tables)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traction_benches"] = reinterpret_cast<uint64_t>(&(df_structure->traction_benches)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["containers"] = reinterpret_cast<uint64_t>(&(df_structure->containers)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_location_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_location*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deity_type"] = reinterpret_cast<uint64_t>(&(df_structure->deity_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deity_data"] = reinterpret_cast<uint64_t>(&(df_structure->deity_data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_deity"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_deity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_create"] = reinterpret_cast<uint64_t>(&(df_structure->in_create)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_choose_deity"] = reinterpret_cast<uint64_t>(&(df_structure->in_choose_deity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_choose_profession"] = reinterpret_cast<uint64_t>(&(df_structure->in_choose_profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_profession"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_profession)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_job_details_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_job_details*>(p_df_structure);

	p_table["job"] = reinterpret_cast<uint64_t>(&(df_structure->job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["detail_type"] = reinterpret_cast<uint64_t>(&(df_structure->detail_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["detail_material_type"] = reinterpret_cast<uint64_t>(&(df_structure->detail_material_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["detail_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->detail_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["setting_detail_type"] = reinterpret_cast<uint64_t>(&(df_structure->setting_detail_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workshop"] = reinterpret_cast<uint64_t>(&(df_structure->workshop)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type_visible"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index_visible"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_amount_visible"] = reinterpret_cast<uint64_t>(&(df_structure->mat_amount_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type_all"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type_all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index_all"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index_all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_amount_all"] = reinterpret_cast<uint64_t>(&(df_structure->mat_amount_all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->mat_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_filter"] = reinterpret_cast<uint64_t>(&(df_structure->mat_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_mat_filter"] = reinterpret_cast<uint64_t>(&(df_structure->editing_mat_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sizes_visible"] = reinterpret_cast<uint64_t>(&(df_structure->sizes_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sizes_all"] = reinterpret_cast<uint64_t>(&(df_structure->sizes_all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->size_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size_filter"] = reinterpret_cast<uint64_t>(&(df_structure->size_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_size_filter"] = reinterpret_cast<uint64_t>(&(df_structure->editing_size_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["decoration_types"] = reinterpret_cast<uint64_t>(&(df_structure->decoration_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["decoration_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->decoration_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_display_furniture"] = reinterpret_cast<uint64_t>(&(df_structure->selected_display_furniture)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["displayed_items_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->displayed_items_cursor)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_unit_cursor_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_unit_cursor*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_unit_skills_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_unit_skills*>(p_df_structure);

	p_table["skill_id"] = reinterpret_cast<uint64_t>(&(df_structure->skill_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_type"] = reinterpret_cast<uint64_t>(&(df_structure->skill_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->skill_subtype)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_barracks_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_barracks*>(p_df_structure);

	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uses"] = reinterpret_cast<uint64_t>(&(df_structure->uses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_rename"] = reinterpret_cast<uint64_t>(&(df_structure->in_rename)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_positions"] = reinterpret_cast<uint64_t>(&(df_structure->in_positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_squad"] = reinterpret_cast<uint64_t>(&(df_structure->position_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->position_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_position_squads"] = reinterpret_cast<uint64_t>(&(df_structure->in_position_squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_squads"] = reinterpret_cast<uint64_t>(&(df_structure->position_squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_squad_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->position_squad_cursor)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_minimap_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_minimap*>(p_df_structure);

	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["need_render"] = reinterpret_cast<uint64_t>(&(df_structure->need_render)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["need_scan"] = reinterpret_cast<uint64_t>(&(df_structure->need_scan)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z_level"] = reinterpret_cast<uint64_t>(&(df_structure->z_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_fg"] = reinterpret_cast<uint64_t>(&(df_structure->tile_fg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_bg"] = reinterpret_cast<uint64_t>(&(df_structure->tile_bg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_bold"] = reinterpret_cast<uint64_t>(&(df_structure->tile_bold)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus__T_command_line_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus::T_command_line*>(p_df_structure);

	p_table["original"] = reinterpret_cast<uint64_t>(&(df_structure->original)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["arg_vect"] = reinterpret_cast<uint64_t>(&(df_structure->arg_vect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gen_id"] = reinterpret_cast<uint64_t>(&(df_structure->gen_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_seed"] = reinterpret_cast<uint64_t>(&(df_structure->world_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_seed"] = reinterpret_cast<uint64_t>(&(df_structure->use_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_param"] = reinterpret_cast<uint64_t>(&(df_structure->world_param)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_param"] = reinterpret_cast<uint64_t>(&(df_structure->use_param)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_sidebar_menus_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_sidebar_menus*>(p_df_structure);

	p_table["designation"] = reinterpret_cast<uint64_t>(&(df_structure->designation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workshop_job"] = reinterpret_cast<uint64_t>(&(df_structure->workshop_job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["zone"] = reinterpret_cast<uint64_t>(&(df_structure->zone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hospital"] = reinterpret_cast<uint64_t>(&(df_structure->hospital)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location"] = reinterpret_cast<uint64_t>(&(df_structure->location)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job_details"] = reinterpret_cast<uint64_t>(&(df_structure->job_details)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->unit_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_skills"] = reinterpret_cast<uint64_t>(&(df_structure->unit_skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_combat"] = reinterpret_cast<uint64_t>(&(df_structure->show_combat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_labor"] = reinterpret_cast<uint64_t>(&(df_structure->show_labor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_misc"] = reinterpret_cast<uint64_t>(&(df_structure->show_misc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["barracks_squad_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->barracks_squad_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["barracks"] = reinterpret_cast<uint64_t>(&(df_structure->barracks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["minimap"] = reinterpret_cast<uint64_t>(&(df_structure->minimap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["command_line"] = reinterpret_cast<uint64_t>(&(df_structure->command_line)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_speech_tokens"] = reinterpret_cast<uint64_t>(&(df_structure->num_speech_tokens)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_17d8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_17d8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_look_list__T_items__T_data__T_Spatter_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_look_list::T_items::T_data::T_Spatter*>(p_df_structure);

	p_table["amount"] = reinterpret_cast<uint64_t>(&(df_structure->amount)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_look_list__T_items__T_data__T_Water_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_look_list::T_items::T_data::T_Water*>(p_df_structure);

	p_table["depth"] = reinterpret_cast<uint64_t>(&(df_structure->depth)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_look_list__T_items__T_data__T_Magma_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_look_list::T_items::T_data::T_Magma*>(p_df_structure);

	p_table["depth"] = reinterpret_cast<uint64_t>(&(df_structure->depth)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_look_list__T_items__T_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_look_list::T_items::T_data*>(p_df_structure);

	p_table["Item"] = reinterpret_cast<uint64_t>(&(df_structure->Item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Unit"] = reinterpret_cast<uint64_t>(&(df_structure->Unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Building"] = reinterpret_cast<uint64_t>(&(df_structure->Building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Vermin"] = reinterpret_cast<uint64_t>(&(df_structure->Vermin)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Flow"] = reinterpret_cast<uint64_t>(&(df_structure->Flow)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Spatter"] = reinterpret_cast<uint64_t>(&(df_structure->Spatter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Water"] = reinterpret_cast<uint64_t>(&(df_structure->Water)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Magma"] = reinterpret_cast<uint64_t>(&(df_structure->Magma)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_look_list__T_items_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_look_list::T_items*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatter_item_type"] = reinterpret_cast<uint64_t>(&(df_structure->spatter_item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatter_item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->spatter_item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatter_mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->spatter_mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatter_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->spatter_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatter_mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->spatter_mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_look_list_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_look_list*>(p_df_structure);

	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_unit_view_mode_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui_unit_view_mode*>(p_df_structure);

	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_timed_event_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::timed_event*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["season"] = reinterpret_cast<uint64_t>(&(df_structure->season)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["season_ticks"] = reinterpret_cast<uint64_t>(&(df_structure->season_ticks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_map_renderer__T_anon_4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::map_renderer::T_anon_4*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_map_renderer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::map_renderer*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_units"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_guts"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_guts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["multiple_guts"] = reinterpret_cast<uint64_t>(&(df_structure->multiple_guts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_corpse"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_corpse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_corpse_cnt"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_corpse_cnt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_corpsepiece"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_corpsepiece)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_corpsepiece_cnt"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_corpsepiece_cnt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_bones"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_bones)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_bones_cnt"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_bones_cnt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_other"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_other)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_other_cnt"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_other_cnt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10034"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10034)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10035"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10035)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_tick_count"] = reinterpret_cast<uint64_t>(&(df_structure->cur_tick_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tick_phase"] = reinterpret_cast<uint64_t>(&(df_structure->tick_phase)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dim_colors"] = reinterpret_cast<uint64_t>(&(df_structure->dim_colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_ghost_info__T_target_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_ghost_info::T_target*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_ghost_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_ghost_info*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type2"] = reinterpret_cast<uint64_t>(&(df_structure->type2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["goal"] = reinterpret_cast<uint64_t>(&(df_structure->goal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["misplace_pos"] = reinterpret_cast<uint64_t>(&(df_structure->misplace_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["action_timer"] = reinterpret_cast<uint64_t>(&(df_structure->action_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_x"] = reinterpret_cast<uint64_t>(&(df_structure->death_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_y"] = reinterpret_cast<uint64_t>(&(df_structure->death_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_z"] = reinterpret_cast<uint64_t>(&(df_structure->death_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_inventory_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_inventory_item*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pet_seed"] = reinterpret_cast<uint64_t>(&(df_structure->pet_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wound_id"] = reinterpret_cast<uint64_t>(&(df_structure->wound_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_syndrome__T_symptoms_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_syndrome::T_symptoms*>(p_df_structure);

	p_table["quantity"] = reinterpret_cast<uint64_t>(&(df_structure->quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["delay"] = reinterpret_cast<uint64_t>(&(df_structure->delay)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ticks"] = reinterpret_cast<uint64_t>(&(df_structure->ticks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_bp"] = reinterpret_cast<uint64_t>(&(df_structure->target_bp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_layer"] = reinterpret_cast<uint64_t>(&(df_structure->target_layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_quantity"] = reinterpret_cast<uint64_t>(&(df_structure->target_quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_delay"] = reinterpret_cast<uint64_t>(&(df_structure->target_delay)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_ticks"] = reinterpret_cast<uint64_t>(&(df_structure->target_ticks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_syndrome_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_syndrome*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_time"] = reinterpret_cast<uint64_t>(&(df_structure->year_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ticks"] = reinterpret_cast<uint64_t>(&(df_structure->ticks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wounds"] = reinterpret_cast<uint64_t>(&(df_structure->wounds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wound_id"] = reinterpret_cast<uint64_t>(&(df_structure->wound_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["symptoms"] = reinterpret_cast<uint64_t>(&(df_structure->symptoms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reinfection_count"] = reinterpret_cast<uint64_t>(&(df_structure->reinfection_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_wound__T_parts_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_wound::T_parts*>(p_df_structure);

	p_table["global_layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->global_layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contact_area"] = reinterpret_cast<uint64_t>(&(df_structure->contact_area)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["surface_perc"] = reinterpret_cast<uint64_t>(&(df_structure->surface_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strain"] = reinterpret_cast<uint64_t>(&(df_structure->strain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effect_perc1"] = reinterpret_cast<uint64_t>(&(df_structure->effect_perc1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effect_perc2"] = reinterpret_cast<uint64_t>(&(df_structure->effect_perc2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effect_type"] = reinterpret_cast<uint64_t>(&(df_structure->effect_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["edged_curve_perc"] = reinterpret_cast<uint64_t>(&(df_structure->edged_curve_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags1"] = reinterpret_cast<uint64_t>(&(df_structure->flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bleeding"] = reinterpret_cast<uint64_t>(&(df_structure->bleeding)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pain"] = reinterpret_cast<uint64_t>(&(df_structure->pain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nausea"] = reinterpret_cast<uint64_t>(&(df_structure->nausea)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dizziness"] = reinterpret_cast<uint64_t>(&(df_structure->dizziness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["paralysis"] = reinterpret_cast<uint64_t>(&(df_structure->paralysis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["numbness"] = reinterpret_cast<uint64_t>(&(df_structure->numbness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["swelling"] = reinterpret_cast<uint64_t>(&(df_structure->swelling)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["impaired"] = reinterpret_cast<uint64_t>(&(df_structure->impaired)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_penetration_perc"] = reinterpret_cast<uint64_t>(&(df_structure->cur_penetration_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_penetration_perc"] = reinterpret_cast<uint64_t>(&(df_structure->max_penetration_perc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jammed_layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->jammed_layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v406_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v406_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_wound_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_wound*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parts"] = reinterpret_cast<uint64_t>(&(df_structure->parts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["age"] = reinterpret_cast<uint64_t>(&(df_structure->age)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syndrome_id"] = reinterpret_cast<uint64_t>(&(df_structure->syndrome_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pain"] = reinterpret_cast<uint64_t>(&(df_structure->pain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nausea"] = reinterpret_cast<uint64_t>(&(df_structure->nausea)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dizziness"] = reinterpret_cast<uint64_t>(&(df_structure->dizziness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["paralysis"] = reinterpret_cast<uint64_t>(&(df_structure->paralysis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["numbness"] = reinterpret_cast<uint64_t>(&(df_structure->numbness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fever"] = reinterpret_cast<uint64_t>(&(df_structure->fever)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse"] = reinterpret_cast<uint64_t>(&(df_structure->curse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_wound_curse_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::wound_curse_info*>(p_df_structure);

	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_tags1"] = reinterpret_cast<uint64_t>(&(df_structure->add_tags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rem_tags1"] = reinterpret_cast<uint64_t>(&(df_structure->rem_tags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_tags2"] = reinterpret_cast<uint64_t>(&(df_structure->add_tags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rem_tags2"] = reinterpret_cast<uint64_t>(&(df_structure->rem_tags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_visible"] = reinterpret_cast<uint64_t>(&(df_structure->name_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_adjective"] = reinterpret_cast<uint64_t>(&(df_structure->name_adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_and_color1"] = reinterpret_cast<uint64_t>(&(df_structure->sym_and_color1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_and_color2"] = reinterpret_cast<uint64_t>(&(df_structure->sym_and_color2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flash_period"] = reinterpret_cast<uint64_t>(&(df_structure->flash_period)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flash_time2"] = reinterpret_cast<uint64_t>(&(df_structure->flash_time2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_add"] = reinterpret_cast<uint64_t>(&(df_structure->speed_add)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_mul_percent"] = reinterpret_cast<uint64_t>(&(df_structure->speed_mul_percent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attr_change"] = reinterpret_cast<uint64_t>(&(df_structure->attr_change)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["luck_mul_percent"] = reinterpret_cast<uint64_t>(&(df_structure->luck_mul_percent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_time"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time_counter"] = reinterpret_cast<uint64_t>(&(df_structure->time_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["were_race"] = reinterpret_cast<uint64_t>(&(df_structure->were_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_appearance"] = reinterpret_cast<uint64_t>(&(df_structure->body_appearance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_appearance"] = reinterpret_cast<uint64_t>(&(df_structure->bp_appearance)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_misc_trait_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_misc_trait*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_health_info__T_op_history__T_info__T_crutch_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_health_info::T_op_history::T_info::T_crutch*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_health_info__T_op_history__T_info__T_bandage_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_health_info::T_op_history::T_info::T_bandage*>(p_df_structure);

	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_health_info__T_op_history__T_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_health_info::T_op_history::T_info*>(p_df_structure);

	p_table["crutch"] = reinterpret_cast<uint64_t>(&(df_structure->crutch)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bed_id"] = reinterpret_cast<uint64_t>(&(df_structure->bed_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bandage"] = reinterpret_cast<uint64_t>(&(df_structure->bandage)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_health_info__T_op_history_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_health_info::T_op_history*>(p_df_structure);

	p_table["job_type"] = reinterpret_cast<uint64_t>(&(df_structure->job_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["info"] = reinterpret_cast<uint64_t>(&(df_structure->info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_time"] = reinterpret_cast<uint64_t>(&(df_structure->year_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["doctor_id"] = reinterpret_cast<uint64_t>(&(df_structure->doctor_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_health_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_health_info*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_flags"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18_cntdn"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18_cntdn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["immobilize_cntdn"] = reinterpret_cast<uint64_t>(&(df_structure->immobilize_cntdn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dressing_cntdn"] = reinterpret_cast<uint64_t>(&(df_structure->dressing_cntdn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["suture_cntdn"] = reinterpret_cast<uint64_t>(&(df_structure->suture_cntdn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crutch_cntdn"] = reinterpret_cast<uint64_t>(&(df_structure->crutch_cntdn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["op_history"] = reinterpret_cast<uint64_t>(&(df_structure->op_history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_instrument_skill_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_instrument_skill*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rating"] = reinterpret_cast<uint64_t>(&(df_structure->rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["experience"] = reinterpret_cast<uint64_t>(&(df_structure->experience)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_poetic_skill_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_poetic_skill*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rating"] = reinterpret_cast<uint64_t>(&(df_structure->rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["experience"] = reinterpret_cast<uint64_t>(&(df_structure->experience)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_musical_skill_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_musical_skill*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rating"] = reinterpret_cast<uint64_t>(&(df_structure->rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["experience"] = reinterpret_cast<uint64_t>(&(df_structure->experience)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_dance_skill_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_dance_skill*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rating"] = reinterpret_cast<uint64_t>(&(df_structure->rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["experience"] = reinterpret_cast<uint64_t>(&(df_structure->experience)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_emotion_memory_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_emotion_memory*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strength"] = reinterpret_cast<uint64_t>(&(df_structure->strength)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thought"] = reinterpret_cast<uint64_t>(&(df_structure->thought)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subthought"] = reinterpret_cast<uint64_t>(&(df_structure->subthought)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["severity"] = reinterpret_cast<uint64_t>(&(df_structure->severity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_values_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_values*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strength"] = reinterpret_cast<uint64_t>(&(df_structure->strength)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_unk_v40_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_unk_v40_2*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_emotions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_emotions*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strength"] = reinterpret_cast<uint64_t>(&(df_structure->strength)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thought"] = reinterpret_cast<uint64_t>(&(df_structure->thought)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subthought"] = reinterpret_cast<uint64_t>(&(df_structure->subthought)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["severity"] = reinterpret_cast<uint64_t>(&(df_structure->severity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7"] = reinterpret_cast<uint64_t>(&(df_structure->unk7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_dreams_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_dreams*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk8"] = reinterpret_cast<uint64_t>(&(df_structure->unk8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_unk_v40_6_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_unk_v40_6*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_unk5_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_unk5*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_needs_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_needs*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deity_id"] = reinterpret_cast<uint64_t>(&(df_structure->deity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["focus_level"] = reinterpret_cast<uint64_t>(&(df_structure->focus_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["need_level"] = reinterpret_cast<uint64_t>(&(df_structure->need_level)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_memories__T_reflected_on_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_memories::T_reflected_on*>(p_df_structure);

	p_table["memory"] = reinterpret_cast<uint64_t>(&(df_structure->memory)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["changed_facet"] = reinterpret_cast<uint64_t>(&(df_structure->changed_facet)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["changed_value"] = reinterpret_cast<uint64_t>(&(df_structure->changed_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality__T_memories_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality::T_memories*>(p_df_structure);

	p_table["shortterm"] = reinterpret_cast<uint64_t>(&(df_structure->shortterm)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["longterm"] = reinterpret_cast<uint64_t>(&(df_structure->longterm)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reflected_on"] = reinterpret_cast<uint64_t>(&(df_structure->reflected_on)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_personality_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_personality*>(p_df_structure);

	p_table["values"] = reinterpret_cast<uint64_t>(&(df_structure->values)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["emotions"] = reinterpret_cast<uint64_t>(&(df_structure->emotions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dreams"] = reinterpret_cast<uint64_t>(&(df_structure->dreams)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_dream_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_dream_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traits"] = reinterpret_cast<uint64_t>(&(df_structure->traits)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cultural_identity"] = reinterpret_cast<uint64_t>(&(df_structure->cultural_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stress_level"] = reinterpret_cast<uint64_t>(&(df_structure->stress_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stress_drain"] = reinterpret_cast<uint64_t>(&(df_structure->stress_drain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stress_boost"] = reinterpret_cast<uint64_t>(&(df_structure->stress_boost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["likes_outdoors"] = reinterpret_cast<uint64_t>(&(df_structure->likes_outdoors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["combat_hardened"] = reinterpret_cast<uint64_t>(&(df_structure->combat_hardened)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["needs"] = reinterpret_cast<uint64_t>(&(df_structure->needs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temporary_trait_changes"] = reinterpret_cast<uint64_t>(&(df_structure->temporary_trait_changes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4201_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4201_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4201_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["memories"] = reinterpret_cast<uint64_t>(&(df_structure->memories)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["current_focus"] = reinterpret_cast<uint64_t>(&(df_structure->current_focus)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["undistracted_focus"] = reinterpret_cast<uint64_t>(&(df_structure->undistracted_focus)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_skills__T_employment_held__T_employment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_skills::T_employment_held::T_employment*>(p_df_structure);

	p_table["employer"] = reinterpret_cast<uint64_t>(&(df_structure->employer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["held_honors"] = reinterpret_cast<uint64_t>(&(df_structure->held_honors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["battle_count"] = reinterpret_cast<uint64_t>(&(df_structure->battle_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["kill_count"] = reinterpret_cast<uint64_t>(&(df_structure->kill_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["employment_year"] = reinterpret_cast<uint64_t>(&(df_structure->employment_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["employment_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->employment_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_skills__T_employment_held_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_skills::T_employment_held*>(p_df_structure);

	p_table["employment"] = reinterpret_cast<uint64_t>(&(df_structure->employment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["resignment_year"] = reinterpret_cast<uint64_t>(&(df_structure->resignment_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["resignment_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->resignment_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_skills_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_skills*>(p_df_structure);

	p_table["skills"] = reinterpret_cast<uint64_t>(&(df_structure->skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["points"] = reinterpret_cast<uint64_t>(&(df_structure->points)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["professions_held"] = reinterpret_cast<uint64_t>(&(df_structure->professions_held)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession_years"] = reinterpret_cast<uint64_t>(&(df_structure->profession_years)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["employment_held"] = reinterpret_cast<uint64_t>(&(df_structure->employment_held)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_personality_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_personality*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_masterpieces_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_masterpieces*>(p_df_structure);

	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events2"] = reinterpret_cast<uint64_t>(&(df_structure->events2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_whereabouts_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_whereabouts*>(p_df_structure);

	p_table["whereabouts_type"] = reinterpret_cast<uint64_t>(&(df_structure->whereabouts_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_id"] = reinterpret_cast<uint64_t>(&(df_structure->region_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["underground_region_id"] = reinterpret_cast<uint64_t>(&(df_structure->underground_region_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_id"] = reinterpret_cast<uint64_t>(&(df_structure->army_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region"] = reinterpret_cast<uint64_t>(&(df_structure->region)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_condition"] = reinterpret_cast<uint64_t>(&(df_structure->death_condition)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_condition_parameter_1"] = reinterpret_cast<uint64_t>(&(df_structure->death_condition_parameter_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_condition_parameter_2"] = reinterpret_cast<uint64_t>(&(df_structure->death_condition_parameter_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_wounds_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_wounds*>(p_df_structure);

	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status"] = reinterpret_cast<uint64_t>(&(df_structure->status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_known_info__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_known_info::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_known_info__T_anon_6_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_known_info::T_anon_6*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_known_info__T_knowledge_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_known_info::T_knowledge*>(p_df_structure);

	p_table["philosophy"] = reinterpret_cast<uint64_t>(&(df_structure->philosophy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["philosophy2"] = reinterpret_cast<uint64_t>(&(df_structure->philosophy2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["math"] = reinterpret_cast<uint64_t>(&(df_structure->math)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["math2"] = reinterpret_cast<uint64_t>(&(df_structure->math2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["history"] = reinterpret_cast<uint64_t>(&(df_structure->history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["astronomy"] = reinterpret_cast<uint64_t>(&(df_structure->astronomy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["naturalist"] = reinterpret_cast<uint64_t>(&(df_structure->naturalist)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chemistry"] = reinterpret_cast<uint64_t>(&(df_structure->chemistry)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["geography"] = reinterpret_cast<uint64_t>(&(df_structure->geography)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["medicine"] = reinterpret_cast<uint64_t>(&(df_structure->medicine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["medicine2"] = reinterpret_cast<uint64_t>(&(df_structure->medicine2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["medicine3"] = reinterpret_cast<uint64_t>(&(df_structure->medicine3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["engineering"] = reinterpret_cast<uint64_t>(&(df_structure->engineering)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["engineering2"] = reinterpret_cast<uint64_t>(&(df_structure->engineering2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["knowledge_goal_category"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge_goal_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["knowledge_goal"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge_goal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["research_points"] = reinterpret_cast<uint64_t>(&(df_structure->research_points)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["times_pondered"] = reinterpret_cast<uint64_t>(&(df_structure->times_pondered)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_known_info__T_unk_a8_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_known_info::T_unk_a8*>(p_df_structure);

	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_known_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_known_info*>(p_df_structure);

	p_table["known_secrets"] = reinterpret_cast<uint64_t>(&(df_structure->known_secrets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["known_written_contents"] = reinterpret_cast<uint64_t>(&(df_structure->known_written_contents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["known_identities"] = reinterpret_cast<uint64_t>(&(df_structure->known_identities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["known_events"] = reinterpret_cast<uint64_t>(&(df_structure->known_events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["known_poetic_forms"] = reinterpret_cast<uint64_t>(&(df_structure->known_poetic_forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["known_musical_forms"] = reinterpret_cast<uint64_t>(&(df_structure->known_musical_forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["known_dance_forms"] = reinterpret_cast<uint64_t>(&(df_structure->known_dance_forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["knowledge"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["belief_systems"] = reinterpret_cast<uint64_t>(&(df_structure->belief_systems)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_curse__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_curse::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_curse__T_experiments_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_curse::T_experiments*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["races"] = reinterpret_cast<uint64_t>(&(df_structure->races)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_curse_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_curse*>(p_df_structure);

	p_table["active_interactions"] = reinterpret_cast<uint64_t>(&(df_structure->active_interactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active_effects"] = reinterpret_cast<uint64_t>(&(df_structure->active_effects)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["can_do"] = reinterpret_cast<uint64_t>(&(df_structure->can_do)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_adjective"] = reinterpret_cast<uint64_t>(&(df_structure->name_adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_b0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_b0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->original_histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_race"] = reinterpret_cast<uint64_t>(&(df_structure->original_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_caste"] = reinterpret_cast<uint64_t>(&(df_structure->original_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["root_body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->root_body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["undead_name"] = reinterpret_cast<uint64_t>(&(df_structure->undead_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_fc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_fc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["experiments"] = reinterpret_cast<uint64_t>(&(df_structure->experiments)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_books_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_books*>(p_df_structure);

	p_table["artifacts_held"] = reinterpret_cast<uint64_t>(&(df_structure->artifacts_held)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_reputation__T_wanted__T_unk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_reputation::T_wanted::T_unk*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["types"] = reinterpret_cast<uint64_t>(&(df_structure->types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["levels"] = reinterpret_cast<uint64_t>(&(df_structure->levels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_year"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_time"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unsolved_murders"] = reinterpret_cast<uint64_t>(&(df_structure->unsolved_murders)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_reputation__T_wanted_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_reputation::T_wanted*>(p_df_structure);

	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_reputation__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_reputation::T_anon_1*>(p_df_structure);

	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_year"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_time"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unsolved_murders"] = reinterpret_cast<uint64_t>(&(df_structure->unsolved_murders)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_reputation__T_unk_2c__T_anon_12_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_reputation::T_unk_2c::T_anon_12*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_reputation__T_unk_2c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_reputation::T_unk_2c*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_reputation_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_reputation*>(p_df_structure);

	p_table["wanted"] = reinterpret_cast<uint64_t>(&(df_structure->wanted)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_identity"] = reinterpret_cast<uint64_t>(&(df_structure->cur_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["all_identities"] = reinterpret_cast<uint64_t>(&(df_structure->all_identities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_identity_idx"] = reinterpret_cast<uint64_t>(&(df_structure->next_identity_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_hf_visual_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_hf_visual*>(p_df_structure);

	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["information_source"] = reinterpret_cast<uint64_t>(&(df_structure->information_source)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2v"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2v)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attitude"] = reinterpret_cast<uint64_t>(&(df_structure->attitude)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["counter"] = reinterpret_cast<uint64_t>(&(df_structure->counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rank"] = reinterpret_cast<uint64_t>(&(df_structure->rank)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["loyalty"] = reinterpret_cast<uint64_t>(&(df_structure->loyalty)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["respect"] = reinterpret_cast<uint64_t>(&(df_structure->respect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fear"] = reinterpret_cast<uint64_t>(&(df_structure->fear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["love"] = reinterpret_cast<uint64_t>(&(df_structure->love)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trust"] = reinterpret_cast<uint64_t>(&(df_structure->trust)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_meet_year"] = reinterpret_cast<uint64_t>(&(df_structure->last_meet_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_meet_seconds72"] = reinterpret_cast<uint64_t>(&(df_structure->last_meet_seconds72)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meet_count"] = reinterpret_cast<uint64_t>(&(df_structure->meet_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["first_year"] = reinterpret_cast<uint64_t>(&(df_structure->first_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["first_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->first_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_hf_historical_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_hf_historical*>(p_df_structure);

	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["loyalty"] = reinterpret_cast<uint64_t>(&(df_structure->loyalty)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["respect"] = reinterpret_cast<uint64_t>(&(df_structure->respect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fear"] = reinterpret_cast<uint64_t>(&(df_structure->fear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["love"] = reinterpret_cast<uint64_t>(&(df_structure->love)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trust"] = reinterpret_cast<uint64_t>(&(df_structure->trust)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_artifact_claims_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_artifact_claims*>(p_df_structure);

	p_table["artifact_id"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_intrigues__T_plots__T_plot_data__T_Sabotage_Actor_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_intrigues::T_plots::T_plot_data::T_Sabotage_Actor*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_intrigues__T_plots__T_plot_data__T_Infiltrate_Society_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_intrigues::T_plots::T_plot_data::T_Infiltrate_Society*>(p_df_structure);

	p_table["action"] = reinterpret_cast<uint64_t>(&(df_structure->action)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5_t15_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk5_t15_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5_t15_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk5_t15_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_intrigues__T_plots__T_plot_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_intrigues::T_plots::T_plot_data*>(p_df_structure);

	p_table["None"] = reinterpret_cast<uint64_t>(&(df_structure->None)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Grow_Funding_Network"] = reinterpret_cast<uint64_t>(&(df_structure->Grow_Funding_Network)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Grow_Asset_Network"] = reinterpret_cast<uint64_t>(&(df_structure->Grow_Asset_Network)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Acquire_Artifact"] = reinterpret_cast<uint64_t>(&(df_structure->Acquire_Artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Grow_Corruption_Network"] = reinterpret_cast<uint64_t>(&(df_structure->Grow_Corruption_Network)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Attain_Rank"] = reinterpret_cast<uint64_t>(&(df_structure->Attain_Rank)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Assassinate_Actor"] = reinterpret_cast<uint64_t>(&(df_structure->Assassinate_Actor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5_t6"] = reinterpret_cast<uint64_t>(&(df_structure->unk5_t6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Frame_Actor"] = reinterpret_cast<uint64_t>(&(df_structure->Frame_Actor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Kidnap_Actor"] = reinterpret_cast<uint64_t>(&(df_structure->Kidnap_Actor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Sabotage_Actor"] = reinterpret_cast<uint64_t>(&(df_structure->Sabotage_Actor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Direct_War_To_Actor"] = reinterpret_cast<uint64_t>(&(df_structure->Direct_War_To_Actor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Corrupt_Actors_Government"] = reinterpret_cast<uint64_t>(&(df_structure->Corrupt_Actors_Government)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Counterintelligence"] = reinterpret_cast<uint64_t>(&(df_structure->Counterintelligence)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Become_Immortal"] = reinterpret_cast<uint64_t>(&(df_structure->Become_Immortal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Undead_World_Conquest"] = reinterpret_cast<uint64_t>(&(df_structure->Undead_World_Conquest)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["Infiltrate_Society"] = reinterpret_cast<uint64_t>(&(df_structure->Infiltrate_Society)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_intrigues__T_plots_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_intrigues::T_plots*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plot_type"] = reinterpret_cast<uint64_t>(&(df_structure->plot_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parameter"] = reinterpret_cast<uint64_t>(&(df_structure->parameter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["on_hold"] = reinterpret_cast<uint64_t>(&(df_structure->on_hold)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plot_agreements"] = reinterpret_cast<uint64_t>(&(df_structure->plot_agreements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plot_data"] = reinterpret_cast<uint64_t>(&(df_structure->plot_data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["delegated_plot_id"] = reinterpret_cast<uint64_t>(&(df_structure->delegated_plot_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["delegated_plot_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->delegated_plot_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_plot"] = reinterpret_cast<uint64_t>(&(df_structure->parent_plot)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent_plot_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->parent_plot_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement"] = reinterpret_cast<uint64_t>(&(df_structure->agreement)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["actor_nemesis_id"] = reinterpret_cast<uint64_t>(&(df_structure->actor_nemesis_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5_13"] = reinterpret_cast<uint64_t>(&(df_structure->unk5_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plotter_nemesis_id"] = reinterpret_cast<uint64_t>(&(df_structure->plotter_nemesis_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5_15"] = reinterpret_cast<uint64_t>(&(df_structure->unk5_15)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_intrigues__T_intrigue_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_intrigues::T_intrigue*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk9_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk9_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hf_1"] = reinterpret_cast<uint64_t>(&(df_structure->hf_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hf_2"] = reinterpret_cast<uint64_t>(&(df_structure->hf_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk9_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk9_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk9_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk9_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["handle_actor_id"] = reinterpret_cast<uint64_t>(&(df_structure->handle_actor_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["role"] = reinterpret_cast<uint64_t>(&(df_structure->role)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["strategy"] = reinterpret_cast<uint64_t>(&(df_structure->strategy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk9_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk9_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk9_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk9_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk9_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk9_12)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships__T_intrigues_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships::T_intrigues*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plots"] = reinterpret_cast<uint64_t>(&(df_structure->plots)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_plot_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_plot_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["revealed_agreements"] = reinterpret_cast<uint64_t>(&(df_structure->revealed_agreements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreemeents"] = reinterpret_cast<uint64_t>(&(df_structure->agreemeents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intrigue"] = reinterpret_cast<uint64_t>(&(df_structure->intrigue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_intrigue_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_intrigue_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk11"] = reinterpret_cast<uint64_t>(&(df_structure->unk11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk12"] = reinterpret_cast<uint64_t>(&(df_structure->unk12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk13"] = reinterpret_cast<uint64_t>(&(df_structure->unk13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk14"] = reinterpret_cast<uint64_t>(&(df_structure->unk14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk15"] = reinterpret_cast<uint64_t>(&(df_structure->unk15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk16"] = reinterpret_cast<uint64_t>(&(df_structure->unk16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk17"] = reinterpret_cast<uint64_t>(&(df_structure->unk17)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info__T_relationships_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info::T_relationships*>(p_df_structure);

	p_table["hf_visual"] = reinterpret_cast<uint64_t>(&(df_structure->hf_visual)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hf_historical"] = reinterpret_cast<uint64_t>(&(df_structure->hf_historical)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["identities"] = reinterpret_cast<uint64_t>(&(df_structure->identities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_claims"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_claims)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["intrigues"] = reinterpret_cast<uint64_t>(&(df_structure->intrigues)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_historical_figure_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::historical_figure_info*>(p_df_structure);

	p_table["spheres"] = reinterpret_cast<uint64_t>(&(df_structure->spheres)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skills"] = reinterpret_cast<uint64_t>(&(df_structure->skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pets"] = reinterpret_cast<uint64_t>(&(df_structure->pets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["personality"] = reinterpret_cast<uint64_t>(&(df_structure->personality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["masterpieces"] = reinterpret_cast<uint64_t>(&(df_structure->masterpieces)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["whereabouts"] = reinterpret_cast<uint64_t>(&(df_structure->whereabouts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["kills"] = reinterpret_cast<uint64_t>(&(df_structure->kills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wounds"] = reinterpret_cast<uint64_t>(&(df_structure->wounds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["known_info"] = reinterpret_cast<uint64_t>(&(df_structure->known_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse"] = reinterpret_cast<uint64_t>(&(df_structure->curse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["books"] = reinterpret_cast<uint64_t>(&(df_structure->books)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reputation"] = reinterpret_cast<uint64_t>(&(df_structure->reputation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationships"] = reinterpret_cast<uint64_t>(&(df_structure->relationships)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_soul__T_performance_skills_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_soul::T_performance_skills*>(p_df_structure);

	p_table["musical_instruments"] = reinterpret_cast<uint64_t>(&(df_structure->musical_instruments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["poetic_forms"] = reinterpret_cast<uint64_t>(&(df_structure->poetic_forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["musical_forms"] = reinterpret_cast<uint64_t>(&(df_structure->musical_forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dance_forms"] = reinterpret_cast<uint64_t>(&(df_structure->dance_forms)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_soul_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_soul*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sex"] = reinterpret_cast<uint64_t>(&(df_structure->sex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orientation_flags"] = reinterpret_cast<uint64_t>(&(df_structure->orientation_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mental_attrs"] = reinterpret_cast<uint64_t>(&(df_structure->mental_attrs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skills"] = reinterpret_cast<uint64_t>(&(df_structure->skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["preferences"] = reinterpret_cast<uint64_t>(&(df_structure->preferences)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["personality"] = reinterpret_cast<uint64_t>(&(df_structure->personality)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["performance_skills"] = reinterpret_cast<uint64_t>(&(df_structure->performance_skills)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_attack__T_unk_4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_attack::T_unk_4*>(p_df_structure);

	p_table["wrestle_type"] = reinterpret_cast<uint64_t>(&(df_structure->wrestle_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_attack_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_attack*>(p_df_structure);

	p_table["target_unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->target_unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_item_id"] = reinterpret_cast<uint64_t>(&(df_structure->attack_item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->target_body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->attack_body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_id"] = reinterpret_cast<uint64_t>(&(df_structure->attack_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_velocity"] = reinterpret_cast<uint64_t>(&(df_structure->attack_velocity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_skill"] = reinterpret_cast<uint64_t>(&(df_structure->attack_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack_accuracy"] = reinterpret_cast<uint64_t>(&(df_structure->attack_accuracy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer1"] = reinterpret_cast<uint64_t>(&(df_structure->timer1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer2"] = reinterpret_cast<uint64_t>(&(df_structure->timer2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_data_talk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action_data_talk*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_id"] = reinterpret_cast<uint64_t>(&(df_structure->activity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_event_idx"] = reinterpret_cast<uint64_t>(&(df_structure->activity_event_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event"] = reinterpret_cast<uint64_t>(&(df_structure->event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_48"] = reinterpret_cast<uint64_t>(&(df_structure->unk_48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_54"] = reinterpret_cast<uint64_t>(&(df_structure->unk_54)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action__T_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action::T_data*>(p_df_structure);

	p_table["raw_data"] = reinterpret_cast<uint64_t>(&(df_structure->raw_data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["move"] = reinterpret_cast<uint64_t>(&(df_structure->move)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attack"] = reinterpret_cast<uint64_t>(&(df_structure->attack)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jump"] = reinterpret_cast<uint64_t>(&(df_structure->jump)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["holdterrain"] = reinterpret_cast<uint64_t>(&(df_structure->holdterrain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["releaseterrain"] = reinterpret_cast<uint64_t>(&(df_structure->releaseterrain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["climb"] = reinterpret_cast<uint64_t>(&(df_structure->climb)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job"] = reinterpret_cast<uint64_t>(&(df_structure->job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["talk"] = reinterpret_cast<uint64_t>(&(df_structure->talk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unsteady"] = reinterpret_cast<uint64_t>(&(df_structure->unsteady)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parry"] = reinterpret_cast<uint64_t>(&(df_structure->parry)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block"] = reinterpret_cast<uint64_t>(&(df_structure->block)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dodge"] = reinterpret_cast<uint64_t>(&(df_structure->dodge)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recover"] = reinterpret_cast<uint64_t>(&(df_structure->recover)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["standup"] = reinterpret_cast<uint64_t>(&(df_structure->standup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liedown"] = reinterpret_cast<uint64_t>(&(df_structure->liedown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job2"] = reinterpret_cast<uint64_t>(&(df_structure->job2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pushobject"] = reinterpret_cast<uint64_t>(&(df_structure->pushobject)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["suckblood"] = reinterpret_cast<uint64_t>(&(df_structure->suckblood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["holditem"] = reinterpret_cast<uint64_t>(&(df_structure->holditem)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["releaseitem"] = reinterpret_cast<uint64_t>(&(df_structure->releaseitem)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_action_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_action*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_skill_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_skill*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rating"] = reinterpret_cast<uint64_t>(&(df_structure->rating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["experience"] = reinterpret_cast<uint64_t>(&(df_structure->experience)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unused_counter"] = reinterpret_cast<uint64_t>(&(df_structure->unused_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rusty"] = reinterpret_cast<uint64_t>(&(df_structure->rusty)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rust_counter"] = reinterpret_cast<uint64_t>(&(df_structure->rust_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["demotion_counter"] = reinterpret_cast<uint64_t>(&(df_structure->demotion_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["natural_skill_lvl"] = reinterpret_cast<uint64_t>(&(df_structure->natural_skill_lvl)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_preference_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_preference*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_id"] = reinterpret_cast<uint64_t>(&(df_structure->creature_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color_id"] = reinterpret_cast<uint64_t>(&(df_structure->color_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shape_id"] = reinterpret_cast<uint64_t>(&(df_structure->shape_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plant_id"] = reinterpret_cast<uint64_t>(&(df_structure->plant_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["poetic_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->poetic_form_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["musical_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->musical_form_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dance_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->dance_form_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_state"] = reinterpret_cast<uint64_t>(&(df_structure->mat_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active"] = reinterpret_cast<uint64_t>(&(df_structure->active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prefstring_seed"] = reinterpret_cast<uint64_t>(&(df_structure->prefstring_seed)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_complaint_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_complaint*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guild"] = reinterpret_cast<uint64_t>(&(df_structure->guild)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["age"] = reinterpret_cast<uint64_t>(&(df_structure->age)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_request_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_request*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guild"] = reinterpret_cast<uint64_t>(&(df_structure->guild)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_chunk__T_units_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_chunk::T_units*>(p_df_structure);

	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_chunk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_chunk*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_appearance_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_appearance*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_index"] = reinterpret_cast<uint64_t>(&(df_structure->caste_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["physical_attributes"] = reinterpret_cast<uint64_t>(&(df_structure->physical_attributes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->body_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->bp_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_style"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_style)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_style_civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_style_civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_style_id"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_style_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_style_type"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_style_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_length"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_length)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appearance_genes"] = reinterpret_cast<uint64_t>(&(df_structure->appearance_genes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color_genes"] = reinterpret_cast<uint64_t>(&(df_structure->color_genes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->color_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_19"] = reinterpret_cast<uint64_t>(&(df_structure->unk_19)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen*>(p_df_structure);

	p_table["child"] = reinterpret_cast<uint64_t>(&(df_structure->child)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parent"] = reinterpret_cast<uint64_t>(&(df_structure->parent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["breakdown_level"] = reinterpret_cast<uint64_t>(&(df_structure->breakdown_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["option_key_pressed"] = reinterpret_cast<uint64_t>(&(df_structure->option_key_pressed)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer*>(p_df_structure);

	p_table["layer_objects"] = reinterpret_cast<uint64_t>(&(df_structure->layer_objects)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_interfacest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::interfacest*>(p_df_structure);

	p_table["original_fps"] = reinterpret_cast<uint64_t>(&(df_structure->original_fps)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["view"] = reinterpret_cast<uint64_t>(&(df_structure->view)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flag"] = reinterpret_cast<uint64_t>(&(df_structure->flag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shutdown_interface_tickcount"] = reinterpret_cast<uint64_t>(&(df_structure->shutdown_interface_tickcount)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shutdown_interface_for_ms"] = reinterpret_cast<uint64_t>(&(df_structure->shutdown_interface_for_ms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supermovie_on"] = reinterpret_cast<uint64_t>(&(df_structure->supermovie_on)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supermovie_pos"] = reinterpret_cast<uint64_t>(&(df_structure->supermovie_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supermovie_delayrate"] = reinterpret_cast<uint64_t>(&(df_structure->supermovie_delayrate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supermovie_delaystep"] = reinterpret_cast<uint64_t>(&(df_structure->supermovie_delaystep)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supermovie_sound"] = reinterpret_cast<uint64_t>(&(df_structure->supermovie_sound)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supermovie_sound_time"] = reinterpret_cast<uint64_t>(&(df_structure->supermovie_sound_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supermoviebuffer"] = reinterpret_cast<uint64_t>(&(df_structure->supermoviebuffer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supermoviebuffer_comp"] = reinterpret_cast<uint64_t>(&(df_structure->supermoviebuffer_comp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["currentblocksize"] = reinterpret_cast<uint64_t>(&(df_structure->currentblocksize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nextfilepos"] = reinterpret_cast<uint64_t>(&(df_structure->nextfilepos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["first_movie_write"] = reinterpret_cast<uint64_t>(&(df_structure->first_movie_write)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["movie_file"] = reinterpret_cast<uint64_t>(&(df_structure->movie_file)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_layer_object_listst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::layer_object_listst*>(p_df_structure);

	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_entries"] = reinterpret_cast<uint64_t>(&(df_structure->num_entries)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_size"] = reinterpret_cast<uint64_t>(&(df_structure->page_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_l_cur"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_l_cur)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mouse_r_cur"] = reinterpret_cast<uint64_t>(&(df_structure->mouse_r_cur)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rclick_scrolls"] = reinterpret_cast<uint64_t>(&(df_structure->rclick_scrolls)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flag"] = reinterpret_cast<uint64_t>(&(df_structure->flag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["key_lclick"] = reinterpret_cast<uint64_t>(&(df_structure->key_lclick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["key_rclick"] = reinterpret_cast<uint64_t>(&(df_structure->key_rclick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_KeybindingScreen_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::KeybindingScreen*>(p_df_structure);

	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["main"] = reinterpret_cast<uint64_t>(&(df_structure->main)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["keyL"] = reinterpret_cast<uint64_t>(&(df_structure->keyL)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["keyR"] = reinterpret_cast<uint64_t>(&(df_structure->keyR)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["macro"] = reinterpret_cast<uint64_t>(&(df_structure->macro)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["keyRegister"] = reinterpret_cast<uint64_t>(&(df_structure->keyRegister)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_MacroScreenLoad_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::MacroScreenLoad*>(p_df_structure);

	p_table["menu"] = reinterpret_cast<uint64_t>(&(df_structure->menu)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["width"] = reinterpret_cast<uint64_t>(&(df_structure->width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["height"] = reinterpret_cast<uint64_t>(&(df_structure->height)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_MacroScreenSave_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::MacroScreenSave*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_dat_summary_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_dat_summary*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["save_info"] = reinterpret_cast<uint64_t>(&(df_structure->save_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_adventure_logst__T_unk_68_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_adventure_logst::T_unk_68*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_48"] = reinterpret_cast<uint64_t>(&(df_structure->unk_48)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_adventure_logst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_adventure_logst*>(p_df_structure);

	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_68"] = reinterpret_cast<uint64_t>(&(df_structure->unk_68)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_islocalview"] = reinterpret_cast<uint64_t>(&(df_structure->map_islocalview)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_hidden"] = reinterpret_cast<uint64_t>(&(df_structure->map_hidden)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["player_region_x"] = reinterpret_cast<uint64_t>(&(df_structure->player_region_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["player_region_y"] = reinterpret_cast<uint64_t>(&(df_structure->player_region_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["player_local_x"] = reinterpret_cast<uint64_t>(&(df_structure->player_local_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["player_local_y"] = reinterpret_cast<uint64_t>(&(df_structure->player_local_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_x"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_y"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local_area_x1"] = reinterpret_cast<uint64_t>(&(df_structure->local_area_x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local_area_x2"] = reinterpret_cast<uint64_t>(&(df_structure->local_area_x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local_area_y1"] = reinterpret_cast<uint64_t>(&(df_structure->local_area_y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local_area_y2"] = reinterpret_cast<uint64_t>(&(df_structure->local_area_y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_draw_line"] = reinterpret_cast<uint64_t>(&(df_structure->map_draw_line)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["info_mode"] = reinterpret_cast<uint64_t>(&(df_structure->info_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1f"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1f)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter_str"] = reinterpret_cast<uint64_t>(&(df_structure->filter_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_filter"] = reinterpret_cast<uint64_t>(&(df_structure->in_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filtered_items"] = reinterpret_cast<uint64_t>(&(df_structure->filtered_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_23"] = reinterpret_cast<uint64_t>(&(df_structure->anon_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_24"] = reinterpret_cast<uint64_t>(&(df_structure->anon_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_25"] = reinterpret_cast<uint64_t>(&(df_structure->anon_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_26"] = reinterpret_cast<uint64_t>(&(df_structure->anon_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_27"] = reinterpret_cast<uint64_t>(&(df_structure->anon_27)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_announcelistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_announcelistst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["report_type"] = reinterpret_cast<uint64_t>(&(df_structure->report_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reports"] = reinterpret_cast<uint64_t>(&(df_structure->reports)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_assign_display_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_assign_display_itemst*>(p_df_structure);

	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_type"] = reinterpret_cast<uint64_t>(&(df_structure->sel_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_item"] = reinterpret_cast<uint64_t>(&(df_structure->sel_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_item_ids"] = reinterpret_cast<uint64_t>(&(df_structure->selected_item_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_column"] = reinterpret_cast<uint64_t>(&(df_structure->sel_column)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->artifacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items_populated"] = reinterpret_cast<uint64_t>(&(df_structure->items_populated)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["description"] = reinterpret_cast<uint64_t>(&(df_structure->description)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_barterst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_barterst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_ask"] = reinterpret_cast<uint64_t>(&(df_structure->max_ask)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_offer"] = reinterpret_cast<uint64_t>(&(df_structure->max_offer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_ask"] = reinterpret_cast<uint64_t>(&(df_structure->cur_ask)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_offer"] = reinterpret_cast<uint64_t>(&(df_structure->cur_offer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_buildingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_buildingst*>(p_df_structure);

	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_buildinglistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_buildinglistst*>(p_df_structure);

	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["alt_right_panel"] = reinterpret_cast<uint64_t>(&(df_structure->alt_right_panel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildings"] = reinterpret_cast<uint64_t>(&(df_structure->buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildings2"] = reinterpret_cast<uint64_t>(&(df_structure->buildings2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["room_value"] = reinterpret_cast<uint64_t>(&(df_structure->room_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["room_value2"] = reinterpret_cast<uint64_t>(&(df_structure->room_value2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_embark_location_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::embark_location*>(p_df_structure);

	p_table["region_pos"] = reinterpret_cast<uint64_t>(&(df_structure->region_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reclaim_site"] = reinterpret_cast<uint64_t>(&(df_structure->reclaim_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reclaim_idx"] = reinterpret_cast<uint64_t>(&(df_structure->reclaim_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["biome_rgn"] = reinterpret_cast<uint64_t>(&(df_structure->biome_rgn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_pos_min"] = reinterpret_cast<uint64_t>(&(df_structure->embark_pos_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_pos_max"] = reinterpret_cast<uint64_t>(&(df_structure->embark_pos_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_biome_rgn"] = reinterpret_cast<uint64_t>(&(df_structure->embark_biome_rgn)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_choose_start_sitest__T_finder_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_choose_start_sitest::T_finder*>(p_df_structure);

	p_table["search_x"] = reinterpret_cast<uint64_t>(&(df_structure->search_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["search_y"] = reinterpret_cast<uint64_t>(&(df_structure->search_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["options"] = reinterpret_cast<uint64_t>(&(df_structure->options)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unmatched"] = reinterpret_cast<uint64_t>(&(df_structure->unmatched)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["visible_options"] = reinterpret_cast<uint64_t>(&(df_structure->visible_options)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finder_state"] = reinterpret_cast<uint64_t>(&(df_structure->finder_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_11e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_11e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_120"] = reinterpret_cast<uint64_t>(&(df_structure->unk_120)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_122"] = reinterpret_cast<uint64_t>(&(df_structure->unk_122)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_124"] = reinterpret_cast<uint64_t>(&(df_structure->unk_124)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_126"] = reinterpret_cast<uint64_t>(&(df_structure->unk_126)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_128"] = reinterpret_cast<uint64_t>(&(df_structure->unk_128)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_choose_start_sitest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_choose_start_sitest*>(p_df_structure);

	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location"] = reinterpret_cast<uint64_t>(&(df_structure->location)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["biome_idx"] = reinterpret_cast<uint64_t>(&(df_structure->biome_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["biome_highlighted"] = reinterpret_cast<uint64_t>(&(df_structure->biome_highlighted)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_embark_aquifer"] = reinterpret_cast<uint64_t>(&(df_structure->in_embark_aquifer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_embark_salt"] = reinterpret_cast<uint64_t>(&(df_structure->in_embark_salt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_embark_large"] = reinterpret_cast<uint64_t>(&(df_structure->in_embark_large)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_embark_narrow"] = reinterpret_cast<uint64_t>(&(df_structure->in_embark_narrow)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_embark_only_warning"] = reinterpret_cast<uint64_t>(&(df_structure->in_embark_only_warning)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_embark_civ_dying"] = reinterpret_cast<uint64_t>(&(df_structure->in_embark_civ_dying)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["highlighted_sites"] = reinterpret_cast<uint64_t>(&(df_structure->highlighted_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local_sites"] = reinterpret_cast<uint64_t>(&(df_structure->local_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reclaim_idx"] = reinterpret_cast<uint64_t>(&(df_structure->reclaim_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_idx"] = reinterpret_cast<uint64_t>(&(df_structure->civ_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["available_civs"] = reinterpret_cast<uint64_t>(&(df_structure->available_civs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_info"] = reinterpret_cast<uint64_t>(&(df_structure->site_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_abandoned"] = reinterpret_cast<uint64_t>(&(df_structure->site_abandoned)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_created"] = reinterpret_cast<uint64_t>(&(df_structure->site_created)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finder"] = reinterpret_cast<uint64_t>(&(df_structure->finder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["notes_order"] = reinterpret_cast<uint64_t>(&(df_structure->notes_order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_note_name"] = reinterpret_cast<uint64_t>(&(df_structure->cur_note_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_150"] = reinterpret_cast<uint64_t>(&(df_structure->unk_150)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_154"] = reinterpret_cast<uint64_t>(&(df_structure->unk_154)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["note_tile"] = reinterpret_cast<uint64_t>(&(df_structure->note_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["note_fg_color"] = reinterpret_cast<uint64_t>(&(df_structure->note_fg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["note_bg_color"] = reinterpret_cast<uint64_t>(&(df_structure->note_bg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_15c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_15c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mission__T_details__T_raid_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mission::T_details::T_raid*>(p_df_structure);

	p_table["raid_type"] = reinterpret_cast<uint64_t>(&(df_structure->raid_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["raid_flags"] = reinterpret_cast<uint64_t>(&(df_structure->raid_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_23"] = reinterpret_cast<uint64_t>(&(df_structure->anon_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_24"] = reinterpret_cast<uint64_t>(&(df_structure->anon_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_25"] = reinterpret_cast<uint64_t>(&(df_structure->anon_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_26"] = reinterpret_cast<uint64_t>(&(df_structure->anon_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_27"] = reinterpret_cast<uint64_t>(&(df_structure->anon_27)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mission__T_details__T_recovery_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mission::T_details::T_recovery*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mission__T_details__T_rescue_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mission::T_details::T_rescue*>(p_df_structure);

	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mission__T_details__T_request_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mission::T_details::T_request*>(p_df_structure);

	p_table["workers"] = reinterpret_cast<uint64_t>(&(df_structure->workers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mission__T_details_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mission::T_details*>(p_df_structure);

	p_table["raid"] = reinterpret_cast<uint64_t>(&(df_structure->raid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recovery"] = reinterpret_cast<uint64_t>(&(df_structure->recovery)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rescue"] = reinterpret_cast<uint64_t>(&(df_structure->rescue)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["request"] = reinterpret_cast<uint64_t>(&(df_structure->request)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mission_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mission*>(p_df_structure);

	p_table["army_controller"] = reinterpret_cast<uint64_t>(&(df_structure->army_controller)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_site"] = reinterpret_cast<uint64_t>(&(df_structure->target_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_x"] = reinterpret_cast<uint64_t>(&(df_structure->target_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_y"] = reinterpret_cast<uint64_t>(&(df_structure->target_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_controller2"] = reinterpret_cast<uint64_t>(&(df_structure->army_controller2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_15"] = reinterpret_cast<uint64_t>(&(df_structure->unk_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["messengers"] = reinterpret_cast<uint64_t>(&(df_structure->messengers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["details"] = reinterpret_cast<uint64_t>(&(df_structure->details)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_civlistst__T_artifact_details_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_civlistst::T_artifact_details*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_site"] = reinterpret_cast<uint64_t>(&(df_structure->last_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_holder_hf"] = reinterpret_cast<uint64_t>(&(df_structure->last_holder_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_civlistst__T_rumors_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_civlistst::T_rumors*>(p_df_structure);

	p_table["artifact_or_entity"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_or_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_or_entity"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_or_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year1"] = reinterpret_cast<uint64_t>(&(df_structure->year1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick1"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year2"] = reinterpret_cast<uint64_t>(&(df_structure->year2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick2"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_civlistst__T_unk_cache__T_tmp1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_civlistst::T_unk_cache::T_tmp1*>(p_df_structure);

	p_table["values"] = reinterpret_cast<uint64_t>(&(df_structure->values)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_civlistst__T_unk_cache__T_tmp2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_civlistst::T_unk_cache::T_tmp2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_civlistst__T_unk_cache_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_civlistst::T_unk_cache*>(p_df_structure);

	p_table["tmp1"] = reinterpret_cast<uint64_t>(&(df_structure->tmp1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tmp2"] = reinterpret_cast<uint64_t>(&(df_structure->tmp2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_civlistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_civlistst*>(p_df_structure);

	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities"] = reinterpret_cast<uint64_t>(&(df_structure->entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_x"] = reinterpret_cast<uint64_t>(&(df_structure->map_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_y"] = reinterpret_cast<uint64_t>(&(df_structure->map_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->site_artifacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_prisoners"] = reinterpret_cast<uint64_t>(&(df_structure->site_prisoners)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_is_linked"] = reinterpret_cast<uint64_t>(&(df_structure->site_is_linked)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_site_nemesis"] = reinterpret_cast<uint64_t>(&(df_structure->unk_site_nemesis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["missions"] = reinterpret_cast<uint64_t>(&(df_structure->missions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_idx"] = reinterpret_cast<uint64_t>(&(df_structure->mission_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads_travelling"] = reinterpret_cast<uint64_t>(&(df_structure->squads_travelling)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_idx"] = reinterpret_cast<uint64_t>(&(df_structure->squad_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["messengers"] = reinterpret_cast<uint64_t>(&(df_structure->messengers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["messengers_travelling"] = reinterpret_cast<uint64_t>(&(df_structure->messengers_travelling)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["messenger_idx"] = reinterpret_cast<uint64_t>(&(df_structure->messenger_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workers"] = reinterpret_cast<uint64_t>(&(df_structure->workers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worker_idx"] = reinterpret_cast<uint64_t>(&(df_structure->worker_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["people"] = reinterpret_cast<uint64_t>(&(df_structure->people)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["person_idx"] = reinterpret_cast<uint64_t>(&(df_structure->person_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["person_x"] = reinterpret_cast<uint64_t>(&(df_structure->person_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["person_y"] = reinterpret_cast<uint64_t>(&(df_structure->person_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_records"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_records)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_details"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_details)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_idx"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_x"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_y"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_desc"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_desc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_claimed_by_unk1"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_claimed_by_unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_claimed_by_unk2"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_claimed_by_unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_claimed_by_hf"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_claimed_by_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig2"] = reinterpret_cast<uint64_t>(&(df_structure->histfig2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rumors"] = reinterpret_cast<uint64_t>(&(df_structure->rumors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_25"] = reinterpret_cast<uint64_t>(&(df_structure->unk_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["news_x"] = reinterpret_cast<uint64_t>(&(df_structure->news_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["news_y"] = reinterpret_cast<uint64_t>(&(df_structure->news_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_29"] = reinterpret_cast<uint64_t>(&(df_structure->unk_29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_cache_ptr"] = reinterpret_cast<uint64_t>(&(df_structure->unk_cache_ptr)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_cache"] = reinterpret_cast<uint64_t>(&(df_structure->unk_cache)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["news_text"] = reinterpret_cast<uint64_t>(&(df_structure->news_text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_holdings"] = reinterpret_cast<uint64_t>(&(df_structure->show_holdings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_legend"] = reinterpret_cast<uint64_t>(&(df_structure->show_legend)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_counterintelligencest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_counterintelligencest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_createquotast_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_createquotast*>(p_df_structure);

	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_filter"] = reinterpret_cast<uint64_t>(&(df_structure->str_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orders"] = reinterpret_cast<uint64_t>(&(df_structure->orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["all_orders"] = reinterpret_cast<uint64_t>(&(df_structure->all_orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["want_quantity"] = reinterpret_cast<uint64_t>(&(df_structure->want_quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_quantity"] = reinterpret_cast<uint64_t>(&(df_structure->str_quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workshop_profile_orders"] = reinterpret_cast<uint64_t>(&(df_structure->workshop_profile_orders)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_customize_unitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_customize_unitst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_nickname"] = reinterpret_cast<uint64_t>(&(df_structure->editing_nickname)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_profession"] = reinterpret_cast<uint64_t>(&(df_structure->editing_profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["previous_name"] = reinterpret_cast<uint64_t>(&(df_structure->previous_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_name"] = reinterpret_cast<uint64_t>(&(df_structure->has_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_dungeon_monsterstatusst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_dungeon_monsterstatusst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inventory_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->inventory_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part"] = reinterpret_cast<uint64_t>(&(df_structure->body_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["view_skills"] = reinterpret_cast<uint64_t>(&(df_structure->view_skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["length"] = reinterpret_cast<uint64_t>(&(df_structure->length)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["scroll_pos"] = reinterpret_cast<uint64_t>(&(df_structure->scroll_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inventory"] = reinterpret_cast<uint64_t>(&(df_structure->inventory)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatters"] = reinterpret_cast<uint64_t>(&(df_structure->spatters)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_dungeon_wrestlest__T_unk1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_dungeon_wrestlest::T_unk1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapons"] = reinterpret_cast<uint64_t>(&(df_structure->weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_dungeon_wrestlest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_dungeon_wrestlest*>(p_df_structure);

	p_table["player"] = reinterpret_cast<uint64_t>(&(df_structure->player)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target"] = reinterpret_cast<uint64_t>(&(df_structure->target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_dungeonmodest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_dungeonmodest*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["announce_y"] = reinterpret_cast<uint64_t>(&(df_structure->announce_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["announce_idx"] = reinterpret_cast<uint64_t>(&(df_structure->announce_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["announce_more"] = reinterpret_cast<uint64_t>(&(df_structure->announce_more)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_dwarfmodest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_dwarfmodest*>(p_df_structure);

	p_table["shown_site_name"] = reinterpret_cast<uint64_t>(&(df_structure->shown_site_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jeweler_mat_count"] = reinterpret_cast<uint64_t>(&(df_structure->jeweler_mat_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jeweler_cutgem"] = reinterpret_cast<uint64_t>(&(df_structure->jeweler_cutgem)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jeweler_encrust"] = reinterpret_cast<uint64_t>(&(df_structure->jeweler_encrust)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_labors_sidemenu"] = reinterpret_cast<uint64_t>(&(df_structure->unit_labors_sidemenu)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_labors_sidemenu_uplevel"] = reinterpret_cast<uint64_t>(&(df_structure->unit_labors_sidemenu_uplevel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_labors_sidemenu_uplevel_idx"] = reinterpret_cast<uint64_t>(&(df_structure->unit_labors_sidemenu_uplevel_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sideSubmenu"] = reinterpret_cast<uint64_t>(&(df_structure->sideSubmenu)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["keyRepeat"] = reinterpret_cast<uint64_t>(&(df_structure->keyRepeat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trained_animals"] = reinterpret_cast<uint64_t>(&(df_structure->trained_animals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trained_animal_idx"] = reinterpret_cast<uint64_t>(&(df_structure->trained_animal_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number_assigned_hunt"] = reinterpret_cast<uint64_t>(&(df_structure->number_assigned_hunt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number_assigned_war"] = reinterpret_cast<uint64_t>(&(df_structure->number_assigned_war)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_entityst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_entityst*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["important_leader_nemesis"] = reinterpret_cast<uint64_t>(&(df_structure->important_leader_nemesis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_idx"] = reinterpret_cast<uint64_t>(&(df_structure->start_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreements"] = reinterpret_cast<uint64_t>(&(df_structure->agreements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_status"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreement_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->agreement_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_export_graphical_mapst__T_rgb_buffer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_export_graphical_mapst::T_rgb_buffer*>(p_df_structure);

	p_table["r"] = reinterpret_cast<uint64_t>(&(df_structure->r)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["g"] = reinterpret_cast<uint64_t>(&(df_structure->g)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["b"] = reinterpret_cast<uint64_t>(&(df_structure->b)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_export_graphical_mapst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_export_graphical_mapst*>(p_df_structure);

	p_table["in_select"] = reinterpret_cast<uint64_t>(&(df_structure->in_select)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_type"] = reinterpret_cast<uint64_t>(&(df_structure->sel_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x0"] = reinterpret_cast<uint64_t>(&(df_structure->x0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y0"] = reinterpret_cast<uint64_t>(&(df_structure->y0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_x"] = reinterpret_cast<uint64_t>(&(df_structure->cur_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_y"] = reinterpret_cast<uint64_t>(&(df_structure->cur_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rgb_buffer"] = reinterpret_cast<uint64_t>(&(df_structure->rgb_buffer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_width"] = reinterpret_cast<uint64_t>(&(df_structure->map_width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_height"] = reinterpret_cast<uint64_t>(&(df_structure->map_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["numtiles_map_width"] = reinterpret_cast<uint64_t>(&(df_structure->numtiles_map_width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["numtiles_map_height"] = reinterpret_cast<uint64_t>(&(df_structure->numtiles_map_height)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_export_regionst__T_unk1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_export_regionst::T_unk1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_export_regionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_export_regionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["compressor"] = reinterpret_cast<uint64_t>(&(df_structure->compressor)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_game_cleanerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_game_cleanerst*>(p_df_structure);

	p_table["state"] = reinterpret_cast<uint64_t>(&(df_structure->state)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_sites_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_sites*>(p_df_structure);

	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trans_name"] = reinterpret_cast<uint64_t>(&(df_structure->trans_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_entities_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_entities*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trans_name"] = reinterpret_cast<uint64_t>(&(df_structure->trans_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_plants_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_plants*>(p_df_structure);

	p_table["plant"] = reinterpret_cast<uint64_t>(&(df_structure->plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_trees_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_trees*>(p_df_structure);

	p_table["tree"] = reinterpret_cast<uint64_t>(&(df_structure->tree)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_shapes_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_shapes*>(p_df_structure);

	p_table["shape"] = reinterpret_cast<uint64_t>(&(df_structure->shape)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shape2"] = reinterpret_cast<uint64_t>(&(df_structure->shape2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_objects_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_objects*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_artifacts_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_artifacts*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trans_name"] = reinterpret_cast<uint64_t>(&(df_structure->trans_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_histfigs_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_histfigs*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trans_name"] = reinterpret_cast<uint64_t>(&(df_structure->trans_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst__T_relationships_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst::T_relationships*>(p_df_structure);

	p_table["verb"] = reinterpret_cast<uint64_t>(&(df_structure->verb)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["binary"] = reinterpret_cast<uint64_t>(&(df_structure->binary)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_image_creatorst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_image_creatorst*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["modes"] = reinterpret_cast<uint64_t>(&(df_structure->modes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->mode_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_idx"] = reinterpret_cast<uint64_t>(&(df_structure->item_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_filter"] = reinterpret_cast<uint64_t>(&(df_structure->in_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["descriptions"] = reinterpret_cast<uint64_t>(&(df_structure->descriptions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites"] = reinterpret_cast<uint64_t>(&(df_structure->sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities"] = reinterpret_cast<uint64_t>(&(df_structure->entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trees"] = reinterpret_cast<uint64_t>(&(df_structure->trees)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shapes"] = reinterpret_cast<uint64_t>(&(df_structure->shapes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["objects"] = reinterpret_cast<uint64_t>(&(df_structure->objects)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->artifacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationships"] = reinterpret_cast<uint64_t>(&(df_structure->relationships)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfigs_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->sites_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->entities_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unkvec_1"] = reinterpret_cast<uint64_t>(&(df_structure->unkvec_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["existing_images_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->existing_images_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["image"] = reinterpret_cast<uint64_t>(&(df_structure->image)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["races_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->races_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["castes_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->castes_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfigs_filtered2"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs_filtered2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->plants_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trees_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->trees_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shapes_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->shapes_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shapes_filtered_adj"] = reinterpret_cast<uint64_t>(&(df_structure->shapes_filtered_adj)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_types_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->item_types_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtypes_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtypes_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifacts_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->artifacts_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationships_filtered_verb"] = reinterpret_cast<uint64_t>(&(df_structure->relationships_filtered_verb)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationships_filtered_binary"] = reinterpret_cast<uint64_t>(&(df_structure->relationships_filtered_binary)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationship_targets"] = reinterpret_cast<uint64_t>(&(df_structure->relationship_targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deletable_elements"] = reinterpret_cast<uint64_t>(&(df_structure->deletable_elements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["text_pos"] = reinterpret_cast<uint64_t>(&(df_structure->text_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_13"] = reinterpret_cast<uint64_t>(&(df_structure->unk_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["order"] = reinterpret_cast<uint64_t>(&(df_structure->order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_15"] = reinterpret_cast<uint64_t>(&(df_structure->unk_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_16"] = reinterpret_cast<uint64_t>(&(df_structure->unk_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_17"] = reinterpret_cast<uint64_t>(&(df_structure->unk_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_50"] = reinterpret_cast<uint64_t>(&(df_structure->unk_50)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_itemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_itemst*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entry_ref"] = reinterpret_cast<uint64_t>(&(df_structure->entry_ref)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entry_indent"] = reinterpret_cast<uint64_t>(&(df_structure->entry_indent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entry_spatters"] = reinterpret_cast<uint64_t>(&(df_structure->entry_spatters)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entry_string"] = reinterpret_cast<uint64_t>(&(df_structure->entry_string)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entry_reaction"] = reinterpret_cast<uint64_t>(&(df_structure->entry_reaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_pos"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caption_uses"] = reinterpret_cast<uint64_t>(&(df_structure->caption_uses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caption_contents"] = reinterpret_cast<uint64_t>(&(df_structure->caption_contents)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_jobst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_jobst*>(p_df_structure);

	p_table["job"] = reinterpret_cast<uint64_t>(&(df_structure->job)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_joblistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_joblistst*>(p_df_structure);

	p_table["allow_zoom"] = reinterpret_cast<uint64_t>(&(df_structure->allow_zoom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_pos"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jobs"] = reinterpret_cast<uint64_t>(&(df_structure->jobs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_jobmanagementst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_jobmanagementst*>(p_df_structure);

	p_table["sel_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_max_workshops"] = reinterpret_cast<uint64_t>(&(df_structure->in_max_workshops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_workshops"] = reinterpret_cast<uint64_t>(&(df_structure->max_workshops)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_justicest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_justicest*>(p_df_structure);

	p_table["jails_needed"] = reinterpret_cast<uint64_t>(&(df_structure->jails_needed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jails_present"] = reinterpret_cast<uint64_t>(&(df_structure->jails_present)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_column"] = reinterpret_cast<uint64_t>(&(df_structure->cur_column)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convicts"] = reinterpret_cast<uint64_t>(&(df_structure->convicts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cases"] = reinterpret_cast<uint64_t>(&(df_structure->cases)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_idx_current"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx_current)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_idx_cold"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx_cold)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_idx_recent"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx_recent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cold_cases"] = reinterpret_cast<uint64_t>(&(df_structure->cold_cases)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_cold"] = reinterpret_cast<uint64_t>(&(df_structure->count_cold)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_recent"] = reinterpret_cast<uint64_t>(&(df_structure->count_recent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_right"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_right)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convictions"] = reinterpret_cast<uint64_t>(&(df_structure->convictions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["punishment"] = reinterpret_cast<uint64_t>(&(df_structure->punishment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convict_choices"] = reinterpret_cast<uint64_t>(&(df_structure->convict_choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interrogate_choices"] = reinterpret_cast<uint64_t>(&(df_structure->interrogate_choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interrogate_status"] = reinterpret_cast<uint64_t>(&(df_structure->interrogate_status)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_kitchenprefst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_kitchenprefst*>(p_df_structure);

	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forbidden"] = reinterpret_cast<uint64_t>(&(df_structure->forbidden)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["possible"] = reinterpret_cast<uint64_t>(&(df_structure->possible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_str"] = reinterpret_cast<uint64_t>(&(df_structure->item_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_arena_creaturest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_arena_creaturest*>(p_df_structure);

	p_table["in_adding_item"] = reinterpret_cast<uint64_t>(&(df_structure->in_adding_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_side"] = reinterpret_cast<uint64_t>(&(df_structure->cur_side)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_interaction"] = reinterpret_cast<uint64_t>(&(df_structure->cur_interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_assign_trade_status_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::assign_trade_status*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["distance"] = reinterpret_cast<uint64_t>(&(df_structure->distance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status"] = reinterpret_cast<uint64_t>(&(df_structure->status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["value"] = reinterpret_cast<uint64_t>(&(df_structure->value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weight"] = reinterpret_cast<uint64_t>(&(df_structure->weight)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_assigntradest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_assigntradest*>(p_df_structure);

	p_table["info"] = reinterpret_cast<uint64_t>(&(df_structure->info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["depot"] = reinterpret_cast<uint64_t>(&(df_structure->depot)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lists"] = reinterpret_cast<uint64_t>(&(df_structure->lists)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["visible_lists"] = reinterpret_cast<uint64_t>(&(df_structure->visible_lists)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sort_distance"] = reinterpret_cast<uint64_t>(&(df_structure->sort_distance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pending_on_top"] = reinterpret_cast<uint64_t>(&(df_structure->pending_on_top)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter_mandates"] = reinterpret_cast<uint64_t>(&(df_structure->filter_mandates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_choose_language_namest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_choose_language_namest*>(p_df_structure);

	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1a"] = reinterpret_cast<uint64_t>(&(df_structure->unk1a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["current_component"] = reinterpret_cast<uint64_t>(&(df_structure->current_component)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dictionary"] = reinterpret_cast<uint64_t>(&(df_structure->dictionary)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_word"] = reinterpret_cast<uint64_t>(&(df_structure->list_word)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_part"] = reinterpret_cast<uint64_t>(&(df_structure->list_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selector"] = reinterpret_cast<uint64_t>(&(df_structure->selector)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_currencyst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_currencyst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_export_play_mapst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_export_play_mapst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_squads_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_squads*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leader_positions"] = reinterpret_cast<uint64_t>(&(df_structure->leader_positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leader_assignments"] = reinterpret_cast<uint64_t>(&(df_structure->leader_assignments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["can_appoint"] = reinterpret_cast<uint64_t>(&(df_structure->can_appoint)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_positions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_positions*>(p_df_structure);

	p_table["assigned"] = reinterpret_cast<uint64_t>(&(df_structure->assigned)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill"] = reinterpret_cast<uint64_t>(&(df_structure->skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_84"] = reinterpret_cast<uint64_t>(&(df_structure->unk_84)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["candidates"] = reinterpret_cast<uint64_t>(&(df_structure->candidates)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_squad_members_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_squad_members*>(p_df_structure);

	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_count"] = reinterpret_cast<uint64_t>(&(df_structure->max_count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_equip__T_assigned_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_equip::T_assigned*>(p_df_structure);

	p_table["spec"] = reinterpret_cast<uint64_t>(&(df_structure->spec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category"] = reinterpret_cast<uint64_t>(&(df_structure->category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_equip__T_uniform_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_equip::T_uniform*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category"] = reinterpret_cast<uint64_t>(&(df_structure->category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["info"] = reinterpret_cast<uint64_t>(&(df_structure->info)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_equip__T_add_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_equip::T_add_item*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["indiv_choice"] = reinterpret_cast<uint64_t>(&(df_structure->indiv_choice)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["foreign"] = reinterpret_cast<uint64_t>(&(df_structure->foreign)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_equip__T_material_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_equip::T_material*>(p_df_structure);

	p_table["generic"] = reinterpret_cast<uint64_t>(&(df_structure->generic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific"] = reinterpret_cast<uint64_t>(&(df_structure->specific)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_equip__T_color_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_equip::T_color*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dye"] = reinterpret_cast<uint64_t>(&(df_structure->dye)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_equip_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_equip*>(p_df_structure);

	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_items"] = reinterpret_cast<uint64_t>(&(df_structure->specific_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prio_in_move"] = reinterpret_cast<uint64_t>(&(df_structure->prio_in_move)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assigned"] = reinterpret_cast<uint64_t>(&(df_structure->assigned)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assigned_items"] = reinterpret_cast<uint64_t>(&(df_structure->assigned_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["edit_spec"] = reinterpret_cast<uint64_t>(&(df_structure->edit_spec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniforms"] = reinterpret_cast<uint64_t>(&(df_structure->uniforms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform"] = reinterpret_cast<uint64_t>(&(df_structure->uniform)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["edit_mode"] = reinterpret_cast<uint64_t>(&(df_structure->edit_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1ec"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1ec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_item"] = reinterpret_cast<uint64_t>(&(df_structure->add_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["color"] = reinterpret_cast<uint64_t>(&(df_structure->color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_name_uniform"] = reinterpret_cast<uint64_t>(&(df_structure->in_name_uniform)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_ammo__T_add_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_ammo::T_add_item*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype"] = reinterpret_cast<uint64_t>(&(df_structure->subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["foreign"] = reinterpret_cast<uint64_t>(&(df_structure->foreign)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_ammo__T_material_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_ammo::T_material*>(p_df_structure);

	p_table["generic"] = reinterpret_cast<uint64_t>(&(df_structure->generic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific"] = reinterpret_cast<uint64_t>(&(df_structure->specific)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst__T_ammo_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst::T_ammo*>(p_df_structure);

	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_add_item"] = reinterpret_cast<uint64_t>(&(df_structure->in_add_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_set_material"] = reinterpret_cast<uint64_t>(&(df_structure->in_set_material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_item"] = reinterpret_cast<uint64_t>(&(df_structure->add_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_militaryst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_militaryst*>(p_df_structure);

	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["positions"] = reinterpret_cast<uint64_t>(&(df_structure->positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_squads"] = reinterpret_cast<uint64_t>(&(df_structure->num_squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_soldiers"] = reinterpret_cast<uint64_t>(&(df_structure->num_soldiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_active"] = reinterpret_cast<uint64_t>(&(df_structure->num_active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_members"] = reinterpret_cast<uint64_t>(&(df_structure->squad_members)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_create_squad"] = reinterpret_cast<uint64_t>(&(df_structure->in_create_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_new_squad"] = reinterpret_cast<uint64_t>(&(df_structure->in_new_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_e6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_e6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["captain_positions"] = reinterpret_cast<uint64_t>(&(df_structure->captain_positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["new_position"] = reinterpret_cast<uint64_t>(&(df_structure->new_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_fc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_fc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_rename_alert"] = reinterpret_cast<uint64_t>(&(df_structure->in_rename_alert)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_delete_alert"] = reinterpret_cast<uint64_t>(&(df_structure->in_delete_alert)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_ff"] = reinterpret_cast<uint64_t>(&(df_structure->unk_ff)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["alert_squads"] = reinterpret_cast<uint64_t>(&(df_structure->alert_squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["equip"] = reinterpret_cast<uint64_t>(&(df_structure->equip)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo"] = reinterpret_cast<uint64_t>(&(df_structure->ammo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supplies_squads"] = reinterpret_cast<uint64_t>(&(df_structure->supplies_squads)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_musicsoundst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_musicsoundst*>(p_df_structure);

}

void generate_unit_storage_status_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit_storage_status*>(p_df_structure);

	p_table["floor_pos"] = reinterpret_cast<uint64_t>(&(df_structure->floor_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chest_pos"] = reinterpret_cast<uint64_t>(&(df_structure->chest_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["chest_capacity"] = reinterpret_cast<uint64_t>(&(df_structure->chest_capacity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cabinet_pos"] = reinterpret_cast<uint64_t>(&(df_structure->cabinet_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cabinet_capacity"] = reinterpret_cast<uint64_t>(&(df_structure->cabinet_capacity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weaponrack_pos"] = reinterpret_cast<uint64_t>(&(df_structure->weaponrack_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weaponrack_capacity"] = reinterpret_cast<uint64_t>(&(df_structure->weaponrack_capacity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorstand_capacity"] = reinterpret_cast<uint64_t>(&(df_structure->armorstand_capacity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armorstand_pos"] = reinterpret_cast<uint64_t>(&(df_structure->armorstand_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_owned_items"] = reinterpret_cast<uint64_t>(&(df_structure->num_owned_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_owned_chests"] = reinterpret_cast<uint64_t>(&(df_structure->num_owned_chests)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_owned_cabinets"] = reinterpret_cast<uint64_t>(&(df_structure->num_owned_cabinets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_owned_weaponracks"] = reinterpret_cast<uint64_t>(&(df_structure->num_owned_weaponracks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_owned_armorstands"] = reinterpret_cast<uint64_t>(&(df_structure->num_owned_armorstands)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_noblelistst__T_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_noblelistst::T_info*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["storage_status"] = reinterpret_cast<uint64_t>(&(df_structure->storage_status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position"] = reinterpret_cast<uint64_t>(&(df_structure->position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assignment"] = reinterpret_cast<uint64_t>(&(df_structure->assignment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group"] = reinterpret_cast<uint64_t>(&(df_structure->group)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["precedence"] = reinterpret_cast<uint64_t>(&(df_structure->precedence)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_noblelistst__T_candidates_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_noblelistst::T_candidates*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weight"] = reinterpret_cast<uint64_t>(&(df_structure->weight)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_noblelistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_noblelistst*>(p_df_structure);

	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["info"] = reinterpret_cast<uint64_t>(&(df_structure->info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["candidates"] = reinterpret_cast<uint64_t>(&(df_structure->candidates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["assignments"] = reinterpret_cast<uint64_t>(&(df_structure->assignments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["groups"] = reinterpret_cast<uint64_t>(&(df_structure->groups)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_overall_healthst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_overall_healthst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bits1"] = reinterpret_cast<uint64_t>(&(df_structure->bits1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bits2"] = reinterpret_cast<uint64_t>(&(df_structure->bits2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bits3"] = reinterpret_cast<uint64_t>(&(df_structure->bits3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x_cursor_pos"] = reinterpret_cast<uint64_t>(&(df_structure->x_cursor_pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_reactionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_reactionst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_squad_schedulest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_squad_schedulest*>(p_df_structure);

	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["swapped"] = reinterpret_cast<uint64_t>(&(df_structure->swapped)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_month"] = reinterpret_cast<uint64_t>(&(df_structure->page_month)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_alert"] = reinterpret_cast<uint64_t>(&(df_structure->cur_alert)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_name_cell"] = reinterpret_cast<uint64_t>(&(df_structure->in_name_cell)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_give_order"] = reinterpret_cast<uint64_t>(&(df_structure->in_give_order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_edit_order"] = reinterpret_cast<uint64_t>(&(df_structure->in_edit_order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["order_list"] = reinterpret_cast<uint64_t>(&(df_structure->order_list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["order_month"] = reinterpret_cast<uint64_t>(&(df_structure->order_month)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["order_type"] = reinterpret_cast<uint64_t>(&(df_structure->order_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["burrows"] = reinterpret_cast<uint64_t>(&(df_structure->burrows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["patrol_route"] = reinterpret_cast<uint64_t>(&(df_structure->patrol_route)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_soldiers"] = reinterpret_cast<uint64_t>(&(df_structure->min_soldiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["positions"] = reinterpret_cast<uint64_t>(&(df_structure->positions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["station_point"] = reinterpret_cast<uint64_t>(&(df_structure->station_point)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["copy_item"] = reinterpret_cast<uint64_t>(&(df_structure->copy_item)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_stockpilest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_stockpilest*>(p_df_structure);

	p_table["settings"] = reinterpret_cast<uint64_t>(&(df_structure->settings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_group"] = reinterpret_cast<uint64_t>(&(df_structure->cur_group)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_list"] = reinterpret_cast<uint64_t>(&(df_structure->cur_list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_ids"] = reinterpret_cast<uint64_t>(&(df_structure->group_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_bits"] = reinterpret_cast<uint64_t>(&(df_structure->group_bits)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_ids"] = reinterpret_cast<uint64_t>(&(df_structure->list_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_names"] = reinterpret_cast<uint64_t>(&(df_structure->item_names)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_status"] = reinterpret_cast<uint64_t>(&(df_structure->item_status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_stone_restrictionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_stone_restrictionst*>(p_df_structure);

	p_table["stone_type"] = reinterpret_cast<uint64_t>(&(df_structure->stone_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stone_economic"] = reinterpret_cast<uint64_t>(&(df_structure->stone_economic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_tab"] = reinterpret_cast<uint64_t>(&(df_structure->type_tab)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_name"] = reinterpret_cast<uint64_t>(&(df_structure->use_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["use_id"] = reinterpret_cast<uint64_t>(&(df_structure->use_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_unit_actionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_unit_actionst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["held_items"] = reinterpret_cast<uint64_t>(&(df_structure->held_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reactions"] = reinterpret_cast<uint64_t>(&(df_structure->reactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_name"] = reinterpret_cast<uint64_t>(&(df_structure->group_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choice_items"] = reinterpret_cast<uint64_t>(&(df_structure->choice_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_items"] = reinterpret_cast<uint64_t>(&(df_structure->sel_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_reagents"] = reinterpret_cast<uint64_t>(&(df_structure->sel_reagents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_reaction"] = reinterpret_cast<uint64_t>(&(df_structure->cur_reaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reagent"] = reinterpret_cast<uint64_t>(&(df_structure->reagent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reagent_amnt_left"] = reinterpret_cast<uint64_t>(&(df_structure->reagent_amnt_left)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_21"] = reinterpret_cast<uint64_t>(&(df_structure->unk_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_unit_healthst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_unit_healthst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["text"] = reinterpret_cast<uint64_t>(&(df_structure->text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["text_fg"] = reinterpret_cast<uint64_t>(&(df_structure->text_fg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["text_bg"] = reinterpret_cast<uint64_t>(&(df_structure->text_bg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["text_bold"] = reinterpret_cast<uint64_t>(&(df_structure->text_bold)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_unit_relationshipst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_unit_relationshipst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relation_textline"] = reinterpret_cast<uint64_t>(&(df_structure->relation_textline)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relation_unit_type"] = reinterpret_cast<uint64_t>(&(df_structure->relation_unit_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relation_histfig_type"] = reinterpret_cast<uint64_t>(&(df_structure->relation_histfig_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relation_unit"] = reinterpret_cast<uint64_t>(&(df_structure->relation_unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relation_hf"] = reinterpret_cast<uint64_t>(&(df_structure->relation_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["level"] = reinterpret_cast<uint64_t>(&(df_structure->level)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_world_gen_paramst__T_unk1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_world_gen_paramst::T_unk1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_world_gen_paramst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_world_gen_paramst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_layer_world_gen_param_presetst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_layer_world_gen_param_presetst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_legendsst__T_anon_7__T_anon_3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_legendsst::T_anon_7::T_anon_3*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_legendsst__T_anon_7_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_legendsst::T_anon_7*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_legendsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_legendsst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["init_step"] = reinterpret_cast<uint64_t>(&(df_structure->init_step)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["init_era"] = reinterpret_cast<uint64_t>(&(df_structure->init_era)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["init_progress"] = reinterpret_cast<uint64_t>(&(df_structure->init_progress)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites"] = reinterpret_cast<uint64_t>(&(df_structure->sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->artifacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["codices"] = reinterpret_cast<uint64_t>(&(df_structure->codices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["regions"] = reinterpret_cast<uint64_t>(&(df_structure->regions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layers"] = reinterpret_cast<uint64_t>(&(df_structure->layers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities"] = reinterpret_cast<uint64_t>(&(df_structure->entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structure_sites"] = reinterpret_cast<uint64_t>(&(df_structure->structure_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structures_indices"] = reinterpret_cast<uint64_t>(&(df_structure->structures_indices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["header_text"] = reinterpret_cast<uint64_t>(&(df_structure->header_text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_collections"] = reinterpret_cast<uint64_t>(&(df_structure->event_collections)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events_text"] = reinterpret_cast<uint64_t>(&(df_structure->events_text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stack_collections"] = reinterpret_cast<uint64_t>(&(df_structure->stack_collections)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stack_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->stack_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["collection_name"] = reinterpret_cast<uint64_t>(&(df_structure->collection_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_page"] = reinterpret_cast<uint64_t>(&(df_structure->cur_page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["main_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->main_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["main_row_type"] = reinterpret_cast<uint64_t>(&(df_structure->main_row_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["main_row_arg1"] = reinterpret_cast<uint64_t>(&(df_structure->main_row_arg1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["main_row_arg2"] = reinterpret_cast<uint64_t>(&(df_structure->main_row_arg2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["main_row_arg3"] = reinterpret_cast<uint64_t>(&(df_structure->main_row_arg3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sub_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->sub_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["important_events_only"] = reinterpret_cast<uint64_t>(&(df_structure->important_events_only)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_x"] = reinterpret_cast<uint64_t>(&(df_structure->map_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_y"] = reinterpret_cast<uint64_t>(&(df_structure->map_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hide_territories"] = reinterpret_cast<uint64_t>(&(df_structure->hide_territories)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_site_mode"] = reinterpret_cast<uint64_t>(&(df_structure->civ_site_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["decade"] = reinterpret_cast<uint64_t>(&(df_structure->decade)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter_text"] = reinterpret_cast<uint64_t>(&(df_structure->filter_text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter_editing"] = reinterpret_cast<uint64_t>(&(df_structure->filter_editing)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfigs_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->sites_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifacts_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->artifacts_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["codices_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->codices_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["regions_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->regions_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layers_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->layers_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->entities_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["structures_filtered"] = reinterpret_cast<uint64_t>(&(df_structure->structures_filtered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_codices"] = reinterpret_cast<uint64_t>(&(df_structure->total_codices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->total_artifacts)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_locationsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_locationsst*>(p_df_structure);

	p_table["locations"] = reinterpret_cast<uint64_t>(&(df_structure->locations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dance_floor_x"] = reinterpret_cast<uint64_t>(&(df_structure->dance_floor_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dance_floor_y"] = reinterpret_cast<uint64_t>(&(df_structure->dance_floor_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_idx"] = reinterpret_cast<uint64_t>(&(df_structure->location_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occupations"] = reinterpret_cast<uint64_t>(&(df_structure->occupations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occupation_idx"] = reinterpret_cast<uint64_t>(&(df_structure->occupation_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_idx"] = reinterpret_cast<uint64_t>(&(df_structure->unit_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_edit"] = reinterpret_cast<uint64_t>(&(df_structure->in_edit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["edit_input"] = reinterpret_cast<uint64_t>(&(df_structure->edit_input)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["menu"] = reinterpret_cast<uint64_t>(&(df_structure->menu)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_loadgame_save_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::loadgame_save_info*>(p_df_structure);

	p_table["next_ids"] = reinterpret_cast<uint64_t>(&(df_structure->next_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["game_type"] = reinterpret_cast<uint64_t>(&(df_structure->game_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fort_name"] = reinterpret_cast<uint64_t>(&(df_structure->fort_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_name"] = reinterpret_cast<uint64_t>(&(df_structure->world_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["folder_name"] = reinterpret_cast<uint64_t>(&(df_structure->folder_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_matgloss_list__T_unk_0_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::matgloss_list::T_unk_0*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_matgloss_list_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::matgloss_list*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generated_inorganics"] = reinterpret_cast<uint64_t>(&(df_structure->generated_inorganics)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generated_plants"] = reinterpret_cast<uint64_t>(&(df_structure->generated_plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generated_items"] = reinterpret_cast<uint64_t>(&(df_structure->generated_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generated_creatures"] = reinterpret_cast<uint64_t>(&(df_structure->generated_creatures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generated_entities"] = reinterpret_cast<uint64_t>(&(df_structure->generated_entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generated_reactions"] = reinterpret_cast<uint64_t>(&(df_structure->generated_reactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generated_interactions"] = reinterpret_cast<uint64_t>(&(df_structure->generated_interactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generated_languages"] = reinterpret_cast<uint64_t>(&(df_structure->generated_languages)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inorganics"] = reinterpret_cast<uint64_t>(&(df_structure->inorganics)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bodies"] = reinterpret_cast<uint64_t>(&(df_structure->bodies)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bodyglosses"] = reinterpret_cast<uint64_t>(&(df_structure->bodyglosses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creatures"] = reinterpret_cast<uint64_t>(&(df_structure->creatures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildings"] = reinterpret_cast<uint64_t>(&(df_structure->buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities"] = reinterpret_cast<uint64_t>(&(df_structure->entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["words"] = reinterpret_cast<uint64_t>(&(df_structure->words)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["symbols"] = reinterpret_cast<uint64_t>(&(df_structure->symbols)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["translations"] = reinterpret_cast<uint64_t>(&(df_structure->translations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colors"] = reinterpret_cast<uint64_t>(&(df_structure->colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shapes"] = reinterpret_cast<uint64_t>(&(df_structure->shapes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["patterns"] = reinterpret_cast<uint64_t>(&(df_structure->patterns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reactions"] = reinterpret_cast<uint64_t>(&(df_structure->reactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material_templates"] = reinterpret_cast<uint64_t>(&(df_structure->material_templates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_templates"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_templates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_detail_plans"] = reinterpret_cast<uint64_t>(&(df_structure->body_detail_plans)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_variations"] = reinterpret_cast<uint64_t>(&(df_structure->creature_variations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interactions"] = reinterpret_cast<uint64_t>(&(df_structure->interactions)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_adopt_regionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_adopt_regionst*>(p_df_structure);

	p_table["compressor"] = reinterpret_cast<uint64_t>(&(df_structure->compressor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_step"] = reinterpret_cast<uint64_t>(&(df_structure->cur_step)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["save_version"] = reinterpret_cast<uint64_t>(&(df_structure->save_version)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_save"] = reinterpret_cast<uint64_t>(&(df_structure->cur_save)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glosses"] = reinterpret_cast<uint64_t>(&(df_structure->glosses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_loadgamest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_loadgamest*>(p_df_structure);

	p_table["cur_step"] = reinterpret_cast<uint64_t>(&(df_structure->cur_step)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["loading"] = reinterpret_cast<uint64_t>(&(df_structure->loading)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["saves"] = reinterpret_cast<uint64_t>(&(df_structure->saves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["compressor"] = reinterpret_cast<uint64_t>(&(df_structure->compressor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glosses"] = reinterpret_cast<uint64_t>(&(df_structure->glosses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["save_version"] = reinterpret_cast<uint64_t>(&(df_structure->save_version)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_save"] = reinterpret_cast<uint64_t>(&(df_structure->cur_save)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_meetingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_meetingst*>(p_df_structure);

	p_table["dipscript_popup"] = reinterpret_cast<uint64_t>(&(df_structure->dipscript_popup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity"] = reinterpret_cast<uint64_t>(&(df_structure->activity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["holder"] = reinterpret_cast<uint64_t>(&(df_structure->holder)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_movieplayerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_movieplayerst*>(p_df_structure);

	p_table["saving"] = reinterpret_cast<uint64_t>(&(df_structure->saving)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["loading"] = reinterpret_cast<uint64_t>(&(df_structure->loading)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing"] = reinterpret_cast<uint64_t>(&(df_structure->editing)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["text_mode"] = reinterpret_cast<uint64_t>(&(df_structure->text_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_char"] = reinterpret_cast<uint64_t>(&(df_structure->editing_char)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_copy_from"] = reinterpret_cast<uint64_t>(&(df_structure->editing_copy_from)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_screenf"] = reinterpret_cast<uint64_t>(&(df_structure->editing_screenf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_screenb"] = reinterpret_cast<uint64_t>(&(df_structure->editing_screenb)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_screenbright"] = reinterpret_cast<uint64_t>(&(df_structure->editing_screenbright)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_selected_sound"] = reinterpret_cast<uint64_t>(&(df_structure->editing_selected_sound)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_menu"] = reinterpret_cast<uint64_t>(&(df_structure->editing_menu)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["savename"] = reinterpret_cast<uint64_t>(&(df_structure->savename)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["force_file"] = reinterpret_cast<uint64_t>(&(df_structure->force_file)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_playing"] = reinterpret_cast<uint64_t>(&(df_structure->is_playing)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_forced_play"] = reinterpret_cast<uint64_t>(&(df_structure->is_forced_play)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quit_if_no_play"] = reinterpret_cast<uint64_t>(&(df_structure->quit_if_no_play)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["maxmoviepos"] = reinterpret_cast<uint64_t>(&(df_structure->maxmoviepos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_frame_pos"] = reinterpret_cast<uint64_t>(&(df_structure->end_frame_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selfile"] = reinterpret_cast<uint64_t>(&(df_structure->selfile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filelist"] = reinterpret_cast<uint64_t>(&(df_structure->filelist)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_new_regionst__T_worldgen_presets_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_new_regionst::T_worldgen_presets*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_23"] = reinterpret_cast<uint64_t>(&(df_structure->anon_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_24"] = reinterpret_cast<uint64_t>(&(df_structure->anon_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_25"] = reinterpret_cast<uint64_t>(&(df_structure->anon_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_26"] = reinterpret_cast<uint64_t>(&(df_structure->anon_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_27"] = reinterpret_cast<uint64_t>(&(df_structure->anon_27)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_28"] = reinterpret_cast<uint64_t>(&(df_structure->anon_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_29"] = reinterpret_cast<uint64_t>(&(df_structure->anon_29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_30"] = reinterpret_cast<uint64_t>(&(df_structure->anon_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_31"] = reinterpret_cast<uint64_t>(&(df_structure->anon_31)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_32"] = reinterpret_cast<uint64_t>(&(df_structure->anon_32)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_33"] = reinterpret_cast<uint64_t>(&(df_structure->anon_33)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_34"] = reinterpret_cast<uint64_t>(&(df_structure->anon_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_35"] = reinterpret_cast<uint64_t>(&(df_structure->anon_35)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_36"] = reinterpret_cast<uint64_t>(&(df_structure->anon_36)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_37"] = reinterpret_cast<uint64_t>(&(df_structure->anon_37)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_38"] = reinterpret_cast<uint64_t>(&(df_structure->anon_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_39"] = reinterpret_cast<uint64_t>(&(df_structure->anon_39)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_40"] = reinterpret_cast<uint64_t>(&(df_structure->anon_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_41"] = reinterpret_cast<uint64_t>(&(df_structure->anon_41)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_42"] = reinterpret_cast<uint64_t>(&(df_structure->anon_42)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_43"] = reinterpret_cast<uint64_t>(&(df_structure->anon_43)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_44"] = reinterpret_cast<uint64_t>(&(df_structure->anon_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_45"] = reinterpret_cast<uint64_t>(&(df_structure->anon_45)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_46"] = reinterpret_cast<uint64_t>(&(df_structure->anon_46)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_47"] = reinterpret_cast<uint64_t>(&(df_structure->anon_47)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_48"] = reinterpret_cast<uint64_t>(&(df_structure->anon_48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_49"] = reinterpret_cast<uint64_t>(&(df_structure->anon_49)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_50"] = reinterpret_cast<uint64_t>(&(df_structure->anon_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_51"] = reinterpret_cast<uint64_t>(&(df_structure->anon_51)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_52"] = reinterpret_cast<uint64_t>(&(df_structure->anon_52)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_53"] = reinterpret_cast<uint64_t>(&(df_structure->anon_53)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_54"] = reinterpret_cast<uint64_t>(&(df_structure->anon_54)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_55"] = reinterpret_cast<uint64_t>(&(df_structure->anon_55)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_56"] = reinterpret_cast<uint64_t>(&(df_structure->anon_56)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_57"] = reinterpret_cast<uint64_t>(&(df_structure->anon_57)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_58"] = reinterpret_cast<uint64_t>(&(df_structure->anon_58)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_59"] = reinterpret_cast<uint64_t>(&(df_structure->anon_59)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_60"] = reinterpret_cast<uint64_t>(&(df_structure->anon_60)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_61"] = reinterpret_cast<uint64_t>(&(df_structure->anon_61)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_62"] = reinterpret_cast<uint64_t>(&(df_structure->anon_62)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_63"] = reinterpret_cast<uint64_t>(&(df_structure->anon_63)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_64"] = reinterpret_cast<uint64_t>(&(df_structure->anon_64)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_65"] = reinterpret_cast<uint64_t>(&(df_structure->anon_65)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_66"] = reinterpret_cast<uint64_t>(&(df_structure->anon_66)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_67"] = reinterpret_cast<uint64_t>(&(df_structure->anon_67)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_68"] = reinterpret_cast<uint64_t>(&(df_structure->anon_68)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_69"] = reinterpret_cast<uint64_t>(&(df_structure->anon_69)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_70"] = reinterpret_cast<uint64_t>(&(df_structure->anon_70)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_71"] = reinterpret_cast<uint64_t>(&(df_structure->anon_71)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_72"] = reinterpret_cast<uint64_t>(&(df_structure->anon_72)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_73"] = reinterpret_cast<uint64_t>(&(df_structure->anon_73)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_74"] = reinterpret_cast<uint64_t>(&(df_structure->anon_74)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_75"] = reinterpret_cast<uint64_t>(&(df_structure->anon_75)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_76"] = reinterpret_cast<uint64_t>(&(df_structure->anon_76)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_77"] = reinterpret_cast<uint64_t>(&(df_structure->anon_77)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_78"] = reinterpret_cast<uint64_t>(&(df_structure->anon_78)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_79"] = reinterpret_cast<uint64_t>(&(df_structure->anon_79)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_80"] = reinterpret_cast<uint64_t>(&(df_structure->anon_80)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_81"] = reinterpret_cast<uint64_t>(&(df_structure->anon_81)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_82"] = reinterpret_cast<uint64_t>(&(df_structure->anon_82)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_83"] = reinterpret_cast<uint64_t>(&(df_structure->anon_83)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_84"] = reinterpret_cast<uint64_t>(&(df_structure->anon_84)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_85"] = reinterpret_cast<uint64_t>(&(df_structure->anon_85)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_86"] = reinterpret_cast<uint64_t>(&(df_structure->anon_86)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_87"] = reinterpret_cast<uint64_t>(&(df_structure->anon_87)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_88"] = reinterpret_cast<uint64_t>(&(df_structure->anon_88)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_89"] = reinterpret_cast<uint64_t>(&(df_structure->anon_89)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_90"] = reinterpret_cast<uint64_t>(&(df_structure->anon_90)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_91"] = reinterpret_cast<uint64_t>(&(df_structure->anon_91)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_92"] = reinterpret_cast<uint64_t>(&(df_structure->anon_92)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_93"] = reinterpret_cast<uint64_t>(&(df_structure->anon_93)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_94"] = reinterpret_cast<uint64_t>(&(df_structure->anon_94)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_95"] = reinterpret_cast<uint64_t>(&(df_structure->anon_95)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_96"] = reinterpret_cast<uint64_t>(&(df_structure->anon_96)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_97"] = reinterpret_cast<uint64_t>(&(df_structure->anon_97)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_98"] = reinterpret_cast<uint64_t>(&(df_structure->anon_98)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_99"] = reinterpret_cast<uint64_t>(&(df_structure->anon_99)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_100"] = reinterpret_cast<uint64_t>(&(df_structure->anon_100)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_101"] = reinterpret_cast<uint64_t>(&(df_structure->anon_101)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_102"] = reinterpret_cast<uint64_t>(&(df_structure->anon_102)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_103"] = reinterpret_cast<uint64_t>(&(df_structure->anon_103)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_104"] = reinterpret_cast<uint64_t>(&(df_structure->anon_104)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_105"] = reinterpret_cast<uint64_t>(&(df_structure->anon_105)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_106"] = reinterpret_cast<uint64_t>(&(df_structure->anon_106)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_107"] = reinterpret_cast<uint64_t>(&(df_structure->anon_107)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_108"] = reinterpret_cast<uint64_t>(&(df_structure->anon_108)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_109"] = reinterpret_cast<uint64_t>(&(df_structure->anon_109)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_110"] = reinterpret_cast<uint64_t>(&(df_structure->anon_110)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_111"] = reinterpret_cast<uint64_t>(&(df_structure->anon_111)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_112"] = reinterpret_cast<uint64_t>(&(df_structure->anon_112)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_113"] = reinterpret_cast<uint64_t>(&(df_structure->anon_113)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_114"] = reinterpret_cast<uint64_t>(&(df_structure->anon_114)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_115"] = reinterpret_cast<uint64_t>(&(df_structure->anon_115)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_116"] = reinterpret_cast<uint64_t>(&(df_structure->anon_116)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_117"] = reinterpret_cast<uint64_t>(&(df_structure->anon_117)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_118"] = reinterpret_cast<uint64_t>(&(df_structure->anon_118)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_119"] = reinterpret_cast<uint64_t>(&(df_structure->anon_119)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_120"] = reinterpret_cast<uint64_t>(&(df_structure->anon_120)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_121"] = reinterpret_cast<uint64_t>(&(df_structure->anon_121)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_122"] = reinterpret_cast<uint64_t>(&(df_structure->anon_122)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_123"] = reinterpret_cast<uint64_t>(&(df_structure->anon_123)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_124"] = reinterpret_cast<uint64_t>(&(df_structure->anon_124)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_125"] = reinterpret_cast<uint64_t>(&(df_structure->anon_125)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_126"] = reinterpret_cast<uint64_t>(&(df_structure->anon_126)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_127"] = reinterpret_cast<uint64_t>(&(df_structure->anon_127)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_128"] = reinterpret_cast<uint64_t>(&(df_structure->anon_128)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_129"] = reinterpret_cast<uint64_t>(&(df_structure->anon_129)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_130"] = reinterpret_cast<uint64_t>(&(df_structure->anon_130)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_131"] = reinterpret_cast<uint64_t>(&(df_structure->anon_131)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_132"] = reinterpret_cast<uint64_t>(&(df_structure->anon_132)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_133"] = reinterpret_cast<uint64_t>(&(df_structure->anon_133)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_134"] = reinterpret_cast<uint64_t>(&(df_structure->anon_134)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_135"] = reinterpret_cast<uint64_t>(&(df_structure->anon_135)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_136"] = reinterpret_cast<uint64_t>(&(df_structure->anon_136)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_137"] = reinterpret_cast<uint64_t>(&(df_structure->anon_137)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_138"] = reinterpret_cast<uint64_t>(&(df_structure->anon_138)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_139"] = reinterpret_cast<uint64_t>(&(df_structure->anon_139)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_140"] = reinterpret_cast<uint64_t>(&(df_structure->anon_140)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_141"] = reinterpret_cast<uint64_t>(&(df_structure->anon_141)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_142"] = reinterpret_cast<uint64_t>(&(df_structure->anon_142)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_143"] = reinterpret_cast<uint64_t>(&(df_structure->anon_143)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_144"] = reinterpret_cast<uint64_t>(&(df_structure->anon_144)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_145"] = reinterpret_cast<uint64_t>(&(df_structure->anon_145)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_146"] = reinterpret_cast<uint64_t>(&(df_structure->anon_146)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_147"] = reinterpret_cast<uint64_t>(&(df_structure->anon_147)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_148"] = reinterpret_cast<uint64_t>(&(df_structure->anon_148)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_149"] = reinterpret_cast<uint64_t>(&(df_structure->anon_149)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_150"] = reinterpret_cast<uint64_t>(&(df_structure->anon_150)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_151"] = reinterpret_cast<uint64_t>(&(df_structure->anon_151)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_152"] = reinterpret_cast<uint64_t>(&(df_structure->anon_152)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_153"] = reinterpret_cast<uint64_t>(&(df_structure->anon_153)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_154"] = reinterpret_cast<uint64_t>(&(df_structure->anon_154)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_155"] = reinterpret_cast<uint64_t>(&(df_structure->anon_155)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_156"] = reinterpret_cast<uint64_t>(&(df_structure->anon_156)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_157"] = reinterpret_cast<uint64_t>(&(df_structure->anon_157)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_158"] = reinterpret_cast<uint64_t>(&(df_structure->anon_158)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_159"] = reinterpret_cast<uint64_t>(&(df_structure->anon_159)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_160"] = reinterpret_cast<uint64_t>(&(df_structure->anon_160)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_161"] = reinterpret_cast<uint64_t>(&(df_structure->anon_161)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_162"] = reinterpret_cast<uint64_t>(&(df_structure->anon_162)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_163"] = reinterpret_cast<uint64_t>(&(df_structure->anon_163)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_164"] = reinterpret_cast<uint64_t>(&(df_structure->anon_164)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_165"] = reinterpret_cast<uint64_t>(&(df_structure->anon_165)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_166"] = reinterpret_cast<uint64_t>(&(df_structure->anon_166)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_167"] = reinterpret_cast<uint64_t>(&(df_structure->anon_167)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_168"] = reinterpret_cast<uint64_t>(&(df_structure->anon_168)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_169"] = reinterpret_cast<uint64_t>(&(df_structure->anon_169)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_170"] = reinterpret_cast<uint64_t>(&(df_structure->anon_170)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_171"] = reinterpret_cast<uint64_t>(&(df_structure->anon_171)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_172"] = reinterpret_cast<uint64_t>(&(df_structure->anon_172)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_173"] = reinterpret_cast<uint64_t>(&(df_structure->anon_173)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_174"] = reinterpret_cast<uint64_t>(&(df_structure->anon_174)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_175"] = reinterpret_cast<uint64_t>(&(df_structure->anon_175)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_176"] = reinterpret_cast<uint64_t>(&(df_structure->anon_176)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_177"] = reinterpret_cast<uint64_t>(&(df_structure->anon_177)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_178"] = reinterpret_cast<uint64_t>(&(df_structure->anon_178)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_179"] = reinterpret_cast<uint64_t>(&(df_structure->anon_179)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_180"] = reinterpret_cast<uint64_t>(&(df_structure->anon_180)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_181"] = reinterpret_cast<uint64_t>(&(df_structure->anon_181)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_182"] = reinterpret_cast<uint64_t>(&(df_structure->anon_182)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_183"] = reinterpret_cast<uint64_t>(&(df_structure->anon_183)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_184"] = reinterpret_cast<uint64_t>(&(df_structure->anon_184)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_185"] = reinterpret_cast<uint64_t>(&(df_structure->anon_185)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_186"] = reinterpret_cast<uint64_t>(&(df_structure->anon_186)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_187"] = reinterpret_cast<uint64_t>(&(df_structure->anon_187)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_188"] = reinterpret_cast<uint64_t>(&(df_structure->anon_188)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_189"] = reinterpret_cast<uint64_t>(&(df_structure->anon_189)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_190"] = reinterpret_cast<uint64_t>(&(df_structure->anon_190)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_191"] = reinterpret_cast<uint64_t>(&(df_structure->anon_191)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_192"] = reinterpret_cast<uint64_t>(&(df_structure->anon_192)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_193"] = reinterpret_cast<uint64_t>(&(df_structure->anon_193)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_194"] = reinterpret_cast<uint64_t>(&(df_structure->anon_194)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_195"] = reinterpret_cast<uint64_t>(&(df_structure->anon_195)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_196"] = reinterpret_cast<uint64_t>(&(df_structure->anon_196)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_197"] = reinterpret_cast<uint64_t>(&(df_structure->anon_197)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_198"] = reinterpret_cast<uint64_t>(&(df_structure->anon_198)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_199"] = reinterpret_cast<uint64_t>(&(df_structure->anon_199)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_200"] = reinterpret_cast<uint64_t>(&(df_structure->anon_200)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_201"] = reinterpret_cast<uint64_t>(&(df_structure->anon_201)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_202"] = reinterpret_cast<uint64_t>(&(df_structure->anon_202)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_203"] = reinterpret_cast<uint64_t>(&(df_structure->anon_203)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_204"] = reinterpret_cast<uint64_t>(&(df_structure->anon_204)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_205"] = reinterpret_cast<uint64_t>(&(df_structure->anon_205)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_new_regionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_new_regionst*>(p_df_structure);

	p_table["worldgen_presets"] = reinterpret_cast<uint64_t>(&(df_structure->worldgen_presets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_worldgen"] = reinterpret_cast<uint64_t>(&(df_structure->in_worldgen)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_paramset"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_paramset)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["random_seed"] = reinterpret_cast<uint64_t>(&(df_structure->random_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_randseed"] = reinterpret_cast<uint64_t>(&(df_structure->editing_randseed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_customname"] = reinterpret_cast<uint64_t>(&(df_structure->editing_customname)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["editing_title"] = reinterpret_cast<uint64_t>(&(df_structure->editing_title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["popup_deleteset"] = reinterpret_cast<uint64_t>(&(df_structure->popup_deleteset)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["popup_changedimensions"] = reinterpret_cast<uint64_t>(&(df_structure->popup_changedimensions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_size_x"] = reinterpret_cast<uint64_t>(&(df_structure->custom_size_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_size_y"] = reinterpret_cast<uint64_t>(&(df_structure->custom_size_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["popup_abort"] = reinterpret_cast<uint64_t>(&(df_structure->popup_abort)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["popup_goon"] = reinterpret_cast<uint64_t>(&(df_structure->popup_goon)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unsaved_changes"] = reinterpret_cast<uint64_t>(&(df_structure->unsaved_changes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["simple_mode"] = reinterpret_cast<uint64_t>(&(df_structure->simple_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_21"] = reinterpret_cast<uint64_t>(&(df_structure->unk_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_line"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_line)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_size"] = reinterpret_cast<uint64_t>(&(df_structure->world_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["history"] = reinterpret_cast<uint64_t>(&(df_structure->history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number_civs"] = reinterpret_cast<uint64_t>(&(df_structure->number_civs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number_sites"] = reinterpret_cast<uint64_t>(&(df_structure->number_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["number_beasts"] = reinterpret_cast<uint64_t>(&(df_structure->number_beasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["savagery"] = reinterpret_cast<uint64_t>(&(df_structure->savagery)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mineral_occurence"] = reinterpret_cast<uint64_t>(&(df_structure->mineral_occurence)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worldgen_paused"] = reinterpret_cast<uint64_t>(&(df_structure->worldgen_paused)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worldgen_rejected"] = reinterpret_cast<uint64_t>(&(df_structure->worldgen_rejected)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rejection_msg"] = reinterpret_cast<uint64_t>(&(df_structure->rejection_msg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["welcome_msg"] = reinterpret_cast<uint64_t>(&(df_structure->welcome_msg)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["raw_folder"] = reinterpret_cast<uint64_t>(&(df_structure->raw_folder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["load_world_params"] = reinterpret_cast<uint64_t>(&(df_structure->load_world_params)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_b8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_b8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_bc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_bc)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_noblest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_noblest*>(p_df_structure);

	p_table["become_capital_offerings"] = reinterpret_cast<uint64_t>(&(df_structure->become_capital_offerings)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_optionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_optionst*>(p_df_structure);

	p_table["msg_quit"] = reinterpret_cast<uint64_t>(&(df_structure->msg_quit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_retire_adv"] = reinterpret_cast<uint64_t>(&(df_structure->in_retire_adv)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["msg_peasant"] = reinterpret_cast<uint64_t>(&(df_structure->msg_peasant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_retire_dwf_abandon_adv"] = reinterpret_cast<uint64_t>(&(df_structure->in_retire_dwf_abandon_adv)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_abandon_dwf"] = reinterpret_cast<uint64_t>(&(df_structure->in_abandon_dwf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ending_game"] = reinterpret_cast<uint64_t>(&(df_structure->ending_game)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["options"] = reinterpret_cast<uint64_t>(&(df_structure->options)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_overallstatusst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_overallstatusst*>(p_df_structure);

	p_table["visible_pages"] = reinterpret_cast<uint64_t>(&(df_structure->visible_pages)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->page_cursor)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_petitionsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_petitionsst*>(p_df_structure);

	p_table["can_manage"] = reinterpret_cast<uint64_t>(&(df_structure->can_manage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_petst__T_animal_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_petst::T_animal*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_petst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_petst*>(p_df_structure);

	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animal"] = reinterpret_cast<uint64_t>(&(df_structure->animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_vermin"] = reinterpret_cast<uint64_t>(&(df_structure->is_vermin)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_tame"] = reinterpret_cast<uint64_t>(&(df_structure->is_tame)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_adopting"] = reinterpret_cast<uint64_t>(&(df_structure->is_adopting)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["knowledge_page"] = reinterpret_cast<uint64_t>(&(df_structure->knowledge_page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["known"] = reinterpret_cast<uint64_t>(&(df_structure->known)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trainer_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->trainer_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trainer_unit"] = reinterpret_cast<uint64_t>(&(df_structure->trainer_unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trainer_mode"] = reinterpret_cast<uint64_t>(&(df_structure->trainer_mode)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_pricest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_pricest*>(p_df_structure);

	p_table["category_idx"] = reinterpret_cast<uint64_t>(&(df_structure->category_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_idx"] = reinterpret_cast<uint64_t>(&(df_structure->item_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_reportlistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_reportlistst*>(p_df_structure);

	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["types"] = reinterpret_cast<uint64_t>(&(df_structure->types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_id"] = reinterpret_cast<uint64_t>(&(df_structure->last_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_reports"] = reinterpret_cast<uint64_t>(&(df_structure->mission_reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spoils_reports"] = reinterpret_cast<uint64_t>(&(df_structure->spoils_reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_report"] = reinterpret_cast<uint64_t>(&(df_structure->mission_report)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_cursor_x"] = reinterpret_cast<uint64_t>(&(df_structure->map_cursor_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_cursor_y"] = reinterpret_cast<uint64_t>(&(df_structure->map_cursor_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_path_finished"] = reinterpret_cast<uint64_t>(&(df_structure->mission_path_finished)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_path_progress"] = reinterpret_cast<uint64_t>(&(df_structure->mission_path_progress)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_text_finished"] = reinterpret_cast<uint64_t>(&(df_structure->mission_text_finished)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_text_progress"] = reinterpret_cast<uint64_t>(&(df_structure->mission_text_progress)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_report_text"] = reinterpret_cast<uint64_t>(&(df_structure->mission_report_text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_report_colors"] = reinterpret_cast<uint64_t>(&(df_structure->mission_report_colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_year"] = reinterpret_cast<uint64_t>(&(df_structure->mission_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->mission_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_path_speed"] = reinterpret_cast<uint64_t>(&(df_structure->mission_path_speed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_report_paused"] = reinterpret_cast<uint64_t>(&(df_structure->mission_report_paused)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_report_fade"] = reinterpret_cast<uint64_t>(&(df_structure->mission_report_fade)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_report_fade_line"] = reinterpret_cast<uint64_t>(&(df_structure->mission_report_fade_line)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_report_scroll"] = reinterpret_cast<uint64_t>(&(df_structure->mission_report_scroll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spoils_report_title"] = reinterpret_cast<uint64_t>(&(df_structure->spoils_report_title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spoils_report_scroll"] = reinterpret_cast<uint64_t>(&(df_structure->spoils_report_scroll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_requestagreementst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_requestagreementst*>(p_df_structure);

	p_table["requests"] = reinterpret_cast<uint64_t>(&(df_structure->requests)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_nemesis_offload_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::nemesis_offload*>(p_df_structure);

	p_table["nemesis_save_file_id"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_save_file_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis_member_idx"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_member_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_unit_chunk"] = reinterpret_cast<uint64_t>(&(df_structure->cur_unit_chunk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_unit_chunk_num"] = reinterpret_cast<uint64_t>(&(df_structure->cur_unit_chunk_num)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units_offloaded"] = reinterpret_cast<uint64_t>(&(df_structure->units_offloaded)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_tax_collection_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_tax_collection*>(p_df_structure);

	p_table["state"] = reinterpret_cast<uint64_t>(&(df_structure->state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["check_timer"] = reinterpret_cast<uint64_t>(&(df_structure->check_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rooms"] = reinterpret_cast<uint64_t>(&(df_structure->rooms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reach_room_timer"] = reinterpret_cast<uint64_t>(&(df_structure->reach_room_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tc_protect_timer"] = reinterpret_cast<uint64_t>(&(df_structure->tc_protect_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guard1_reach_tc_timer"] = reinterpret_cast<uint64_t>(&(df_structure->guard1_reach_tc_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guard2_reach_tc_timer"] = reinterpret_cast<uint64_t>(&(df_structure->guard2_reach_tc_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["collected"] = reinterpret_cast<uint64_t>(&(df_structure->collected)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quota"] = reinterpret_cast<uint64_t>(&(df_structure->quota)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["collector_pos"] = reinterpret_cast<uint64_t>(&(df_structure->collector_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guard_pos_x"] = reinterpret_cast<uint64_t>(&(df_structure->guard_pos_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guard_pos_y"] = reinterpret_cast<uint64_t>(&(df_structure->guard_pos_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guard_pos_z"] = reinterpret_cast<uint64_t>(&(df_structure->guard_pos_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["collector"] = reinterpret_cast<uint64_t>(&(df_structure->collector)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guard1"] = reinterpret_cast<uint64_t>(&(df_structure->guard1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guard2"] = reinterpret_cast<uint64_t>(&(df_structure->guard2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guard_lack_complained"] = reinterpret_cast<uint64_t>(&(df_structure->guard_lack_complained)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_becoming_capital_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_becoming_capital*>(p_df_structure);

	p_table["desired_architecture"] = reinterpret_cast<uint64_t>(&(df_structure->desired_architecture)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_offerings"] = reinterpret_cast<uint64_t>(&(df_structure->desired_offerings)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_invasions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_invasions*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_kitchen_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_kitchen*>(p_df_structure);

	p_table["item_types"] = reinterpret_cast<uint64_t>(&(df_structure->item_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtypes"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtypes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_types"] = reinterpret_cast<uint64_t>(&(df_structure->mat_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_indices"] = reinterpret_cast<uint64_t>(&(df_structure->mat_indices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["exc_types"] = reinterpret_cast<uint64_t>(&(df_structure->exc_types)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_economy_prices__T_price_adjustment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_economy_prices::T_price_adjustment*>(p_df_structure);

	p_table["general_items"] = reinterpret_cast<uint64_t>(&(df_structure->general_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapons"] = reinterpret_cast<uint64_t>(&(df_structure->weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor"] = reinterpret_cast<uint64_t>(&(df_structure->armor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["handwear"] = reinterpret_cast<uint64_t>(&(df_structure->handwear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["footwear"] = reinterpret_cast<uint64_t>(&(df_structure->footwear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["headwear"] = reinterpret_cast<uint64_t>(&(df_structure->headwear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["legwear"] = reinterpret_cast<uint64_t>(&(df_structure->legwear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prepared_food"] = reinterpret_cast<uint64_t>(&(df_structure->prepared_food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wood"] = reinterpret_cast<uint64_t>(&(df_structure->wood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thread_cloth"] = reinterpret_cast<uint64_t>(&(df_structure->thread_cloth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["paper"] = reinterpret_cast<uint64_t>(&(df_structure->paper)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parchment"] = reinterpret_cast<uint64_t>(&(df_structure->parchment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bone"] = reinterpret_cast<uint64_t>(&(df_structure->bone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tooth"] = reinterpret_cast<uint64_t>(&(df_structure->tooth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["horn"] = reinterpret_cast<uint64_t>(&(df_structure->horn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pearl"] = reinterpret_cast<uint64_t>(&(df_structure->pearl)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shell"] = reinterpret_cast<uint64_t>(&(df_structure->shell)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leather"] = reinterpret_cast<uint64_t>(&(df_structure->leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["silk"] = reinterpret_cast<uint64_t>(&(df_structure->silk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["yarn"] = reinterpret_cast<uint64_t>(&(df_structure->yarn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inorganic"] = reinterpret_cast<uint64_t>(&(df_structure->inorganic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meat"] = reinterpret_cast<uint64_t>(&(df_structure->meat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fish"] = reinterpret_cast<uint64_t>(&(df_structure->fish)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drinks"] = reinterpret_cast<uint64_t>(&(df_structure->drinks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extract_animal"] = reinterpret_cast<uint64_t>(&(df_structure->extract_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extract_plant"] = reinterpret_cast<uint64_t>(&(df_structure->extract_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mill_animal"] = reinterpret_cast<uint64_t>(&(df_structure->mill_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mill_plant"] = reinterpret_cast<uint64_t>(&(df_structure->mill_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese_animal"] = reinterpret_cast<uint64_t>(&(df_structure->cheese_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese_plant"] = reinterpret_cast<uint64_t>(&(df_structure->cheese_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pets"] = reinterpret_cast<uint64_t>(&(df_structure->pets)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_economy_prices__T_price_setter_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_economy_prices::T_price_setter*>(p_df_structure);

	p_table["general_items"] = reinterpret_cast<uint64_t>(&(df_structure->general_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapons"] = reinterpret_cast<uint64_t>(&(df_structure->weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armor"] = reinterpret_cast<uint64_t>(&(df_structure->armor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["handwear"] = reinterpret_cast<uint64_t>(&(df_structure->handwear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["footwear"] = reinterpret_cast<uint64_t>(&(df_structure->footwear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["headwear"] = reinterpret_cast<uint64_t>(&(df_structure->headwear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["legwear"] = reinterpret_cast<uint64_t>(&(df_structure->legwear)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prepared_food"] = reinterpret_cast<uint64_t>(&(df_structure->prepared_food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wood"] = reinterpret_cast<uint64_t>(&(df_structure->wood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thread_cloth"] = reinterpret_cast<uint64_t>(&(df_structure->thread_cloth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["paper"] = reinterpret_cast<uint64_t>(&(df_structure->paper)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parchment"] = reinterpret_cast<uint64_t>(&(df_structure->parchment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bone"] = reinterpret_cast<uint64_t>(&(df_structure->bone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tooth"] = reinterpret_cast<uint64_t>(&(df_structure->tooth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["horn"] = reinterpret_cast<uint64_t>(&(df_structure->horn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pearl"] = reinterpret_cast<uint64_t>(&(df_structure->pearl)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shell"] = reinterpret_cast<uint64_t>(&(df_structure->shell)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leather"] = reinterpret_cast<uint64_t>(&(df_structure->leather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["silk"] = reinterpret_cast<uint64_t>(&(df_structure->silk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["yarn"] = reinterpret_cast<uint64_t>(&(df_structure->yarn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inorganic"] = reinterpret_cast<uint64_t>(&(df_structure->inorganic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meat"] = reinterpret_cast<uint64_t>(&(df_structure->meat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fish"] = reinterpret_cast<uint64_t>(&(df_structure->fish)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drinks"] = reinterpret_cast<uint64_t>(&(df_structure->drinks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extract_animal"] = reinterpret_cast<uint64_t>(&(df_structure->extract_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["extract_plant"] = reinterpret_cast<uint64_t>(&(df_structure->extract_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mill_animal"] = reinterpret_cast<uint64_t>(&(df_structure->mill_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mill_plant"] = reinterpret_cast<uint64_t>(&(df_structure->mill_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese_animal"] = reinterpret_cast<uint64_t>(&(df_structure->cheese_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese_plant"] = reinterpret_cast<uint64_t>(&(df_structure->cheese_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pets"] = reinterpret_cast<uint64_t>(&(df_structure->pets)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_economy_prices_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_economy_prices*>(p_df_structure);

	p_table["price_adjustment"] = reinterpret_cast<uint64_t>(&(df_structure->price_adjustment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["price_setter"] = reinterpret_cast<uint64_t>(&(df_structure->price_setter)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_stockpile_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_stockpile*>(p_df_structure);

	p_table["reserved_bins"] = reinterpret_cast<uint64_t>(&(df_structure->reserved_bins)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reserved_barrels"] = reinterpret_cast<uint64_t>(&(df_structure->reserved_barrels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_settings"] = reinterpret_cast<uint64_t>(&(df_structure->custom_settings)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_unk2a8c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_unk2a8c*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_map_edge_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_map_edge*>(p_df_structure);

	p_table["layer_x"] = reinterpret_cast<uint64_t>(&(df_structure->layer_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["surface_x"] = reinterpret_cast<uint64_t>(&(df_structure->surface_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_y"] = reinterpret_cast<uint64_t>(&(df_structure->layer_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["surface_y"] = reinterpret_cast<uint64_t>(&(df_structure->surface_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_z"] = reinterpret_cast<uint64_t>(&(df_structure->layer_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["surface_z"] = reinterpret_cast<uint64_t>(&(df_structure->surface_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_waypoints__T_points_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_waypoints::T_points*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fg_color"] = reinterpret_cast<uint64_t>(&(df_structure->fg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bg_color"] = reinterpret_cast<uint64_t>(&(df_structure->bg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["comment"] = reinterpret_cast<uint64_t>(&(df_structure->comment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_waypoints__T_routes_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_waypoints::T_routes*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["points"] = reinterpret_cast<uint64_t>(&(df_structure->points)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_waypoints_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_waypoints*>(p_df_structure);

	p_table["points"] = reinterpret_cast<uint64_t>(&(df_structure->points)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["routes"] = reinterpret_cast<uint64_t>(&(df_structure->routes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_selector"] = reinterpret_cast<uint64_t>(&(df_structure->sym_selector)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_point_index"] = reinterpret_cast<uint64_t>(&(df_structure->cur_point_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_edit_name_mode"] = reinterpret_cast<uint64_t>(&(df_structure->in_edit_name_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_edit_text_mode"] = reinterpret_cast<uint64_t>(&(df_structure->in_edit_text_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_tile"] = reinterpret_cast<uint64_t>(&(df_structure->sym_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_fg_color"] = reinterpret_cast<uint64_t>(&(df_structure->sym_fg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_bg_color"] = reinterpret_cast<uint64_t>(&(df_structure->sym_bg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5c04"] = reinterpret_cast<uint64_t>(&(df_structure->unk5c04)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_point_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_point_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_route_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_route_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_route_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_route_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_route_waypt_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_route_waypt_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_edit_waypts_mode"] = reinterpret_cast<uint64_t>(&(df_structure->in_edit_waypts_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_42_06"] = reinterpret_cast<uint64_t>(&(df_structure->unk_42_06)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_burrows_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_burrows*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_index"] = reinterpret_cast<uint64_t>(&(df_structure->sel_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_id"] = reinterpret_cast<uint64_t>(&(df_structure->sel_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_confirm_delete"] = reinterpret_cast<uint64_t>(&(df_structure->in_confirm_delete)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_add_units_mode"] = reinterpret_cast<uint64_t>(&(df_structure->in_add_units_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_units"] = reinterpret_cast<uint64_t>(&(df_structure->list_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_units"] = reinterpret_cast<uint64_t>(&(df_structure->sel_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_cursor_pos"] = reinterpret_cast<uint64_t>(&(df_structure->unit_cursor_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_define_mode"] = reinterpret_cast<uint64_t>(&(df_structure->in_define_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["brush_erasing"] = reinterpret_cast<uint64_t>(&(df_structure->brush_erasing)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rect_start"] = reinterpret_cast<uint64_t>(&(df_structure->rect_start)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["brush_mode"] = reinterpret_cast<uint64_t>(&(df_structure->brush_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_edit_name_mode"] = reinterpret_cast<uint64_t>(&(df_structure->in_edit_name_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_selector"] = reinterpret_cast<uint64_t>(&(df_structure->sym_selector)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_tile"] = reinterpret_cast<uint64_t>(&(df_structure->sym_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_fg_color"] = reinterpret_cast<uint64_t>(&(df_structure->sym_fg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_bg_color"] = reinterpret_cast<uint64_t>(&(df_structure->sym_bg_color)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_alerts__T_list_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_alerts::T_list*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["burrows"] = reinterpret_cast<uint64_t>(&(df_structure->burrows)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_alerts_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_alerts*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_alert_idx"] = reinterpret_cast<uint64_t>(&(df_structure->civ_alert_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_equipment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_equipment*>(p_df_structure);

	p_table["items_by_type1"] = reinterpret_cast<uint64_t>(&(df_structure->items_by_type1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items_unassigned"] = reinterpret_cast<uint64_t>(&(df_structure->items_unassigned)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items_assigned"] = reinterpret_cast<uint64_t>(&(df_structure->items_assigned)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["update"] = reinterpret_cast<uint64_t>(&(df_structure->update)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["work_weapons"] = reinterpret_cast<uint64_t>(&(df_structure->work_weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["work_units"] = reinterpret_cast<uint64_t>(&(df_structure->work_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hunter_ammunition"] = reinterpret_cast<uint64_t>(&(df_structure->hunter_ammunition)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_items"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo_units"] = reinterpret_cast<uint64_t>(&(df_structure->ammo_units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["training_assignments"] = reinterpret_cast<uint64_t>(&(df_structure->training_assignments)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_hauling_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_hauling*>(p_df_structure);

	p_table["routes"] = reinterpret_cast<uint64_t>(&(df_structure->routes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["view_routes"] = reinterpret_cast<uint64_t>(&(df_structure->view_routes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["view_stops"] = reinterpret_cast<uint64_t>(&(df_structure->view_stops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["view_bad"] = reinterpret_cast<uint64_t>(&(df_structure->view_bad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_top"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_top)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_stop"] = reinterpret_cast<uint64_t>(&(df_structure->in_stop)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_stop"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_stop)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stop_conditions"] = reinterpret_cast<uint64_t>(&(df_structure->stop_conditions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stop_links"] = reinterpret_cast<uint64_t>(&(df_structure->stop_links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_advanced_cond"] = reinterpret_cast<uint64_t>(&(df_structure->in_advanced_cond)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_assign_vehicle"] = reinterpret_cast<uint64_t>(&(df_structure->in_assign_vehicle)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_vehicle"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_vehicle)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vehicles"] = reinterpret_cast<uint64_t>(&(df_structure->vehicles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_name"] = reinterpret_cast<uint64_t>(&(df_structure->in_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_name"] = reinterpret_cast<uint64_t>(&(df_structure->old_name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_main__T_dead_citizens_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_main::T_dead_citizens*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_year"] = reinterpret_cast<uint64_t>(&(df_structure->death_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_time"] = reinterpret_cast<uint64_t>(&(df_structure->death_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ghost_type"] = reinterpret_cast<uint64_t>(&(df_structure->ghost_type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_main_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_main*>(p_df_structure);

	p_table["hotkeys"] = reinterpret_cast<uint64_t>(&(df_structure->hotkeys)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traffic_cost_high"] = reinterpret_cast<uint64_t>(&(df_structure->traffic_cost_high)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traffic_cost_normal"] = reinterpret_cast<uint64_t>(&(df_structure->traffic_cost_normal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traffic_cost_low"] = reinterpret_cast<uint64_t>(&(df_structure->traffic_cost_low)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traffic_cost_restricted"] = reinterpret_cast<uint64_t>(&(df_structure->traffic_cost_restricted)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_citizens"] = reinterpret_cast<uint64_t>(&(df_structure->dead_citizens)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fortress_entity"] = reinterpret_cast<uint64_t>(&(df_structure->fortress_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fortress_site"] = reinterpret_cast<uint64_t>(&(df_structure->fortress_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_traffic_cost"] = reinterpret_cast<uint64_t>(&(df_structure->selected_traffic_cost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["autosave_request"] = reinterpret_cast<uint64_t>(&(df_structure->autosave_request)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["autosave_unk"] = reinterpret_cast<uint64_t>(&(df_structure->autosave_unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6df4"] = reinterpret_cast<uint64_t>(&(df_structure->unk6df4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_12a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_12a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_12b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_12b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_12c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_12c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44_12d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44_12d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_hotkey"] = reinterpret_cast<uint64_t>(&(df_structure->selected_hotkey)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_rename_hotkey"] = reinterpret_cast<uint64_t>(&(df_structure->in_rename_hotkey)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui__T_squads_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui::T_squads*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6e08"] = reinterpret_cast<uint64_t>(&(df_structure->unk6e08)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_squads"] = reinterpret_cast<uint64_t>(&(df_structure->sel_squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["indiv_selected"] = reinterpret_cast<uint64_t>(&(df_structure->indiv_selected)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_select_indiv"] = reinterpret_cast<uint64_t>(&(df_structure->in_select_indiv)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_indiv_squad"] = reinterpret_cast<uint64_t>(&(df_structure->sel_indiv_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_70"] = reinterpret_cast<uint64_t>(&(df_structure->unk_70)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_list_scroll"] = reinterpret_cast<uint64_t>(&(df_structure->squad_list_scroll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_list_first_id"] = reinterpret_cast<uint64_t>(&(df_structure->squad_list_first_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nearest_squad"] = reinterpret_cast<uint64_t>(&(df_structure->nearest_squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_move_order"] = reinterpret_cast<uint64_t>(&(df_structure->in_move_order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["point_list_scroll"] = reinterpret_cast<uint64_t>(&(df_structure->point_list_scroll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_kill_order"] = reinterpret_cast<uint64_t>(&(df_structure->in_kill_order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["kill_rect_targets"] = reinterpret_cast<uint64_t>(&(df_structure->kill_rect_targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["kill_rect_targets_scroll"] = reinterpret_cast<uint64_t>(&(df_structure->kill_rect_targets_scroll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_kill_list"] = reinterpret_cast<uint64_t>(&(df_structure->in_kill_list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["kill_targets"] = reinterpret_cast<uint64_t>(&(df_structure->kill_targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_kill_targets"] = reinterpret_cast<uint64_t>(&(df_structure->sel_kill_targets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["kill_list_scroll"] = reinterpret_cast<uint64_t>(&(df_structure->kill_list_scroll)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_kill_rect"] = reinterpret_cast<uint64_t>(&(df_structure->in_kill_rect)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rect_start"] = reinterpret_cast<uint64_t>(&(df_structure->rect_start)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_ui_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::ui*>(p_df_structure);

	p_table["game_state"] = reinterpret_cast<uint64_t>(&(df_structure->game_state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lost_to_siege_civ"] = reinterpret_cast<uint64_t>(&(df_structure->lost_to_siege_civ)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tax_collection"] = reinterpret_cast<uint64_t>(&(df_structure->tax_collection)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["manager_cooldown"] = reinterpret_cast<uint64_t>(&(df_structure->manager_cooldown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bookkeeper_cooldown"] = reinterpret_cast<uint64_t>(&(df_structure->bookkeeper_cooldown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bookkeeper_precision"] = reinterpret_cast<uint64_t>(&(df_structure->bookkeeper_precision)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bookkeeper_settings"] = reinterpret_cast<uint64_t>(&(df_structure->bookkeeper_settings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caravans"] = reinterpret_cast<uint64_t>(&(df_structure->caravans)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fortress_rank"] = reinterpret_cast<uint64_t>(&(df_structure->fortress_rank)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["progress_population"] = reinterpret_cast<uint64_t>(&(df_structure->progress_population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["progress_trade"] = reinterpret_cast<uint64_t>(&(df_structure->progress_trade)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["progress_production"] = reinterpret_cast<uint64_t>(&(df_structure->progress_production)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["king_arrived"] = reinterpret_cast<uint64_t>(&(df_structure->king_arrived)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["king_hasty"] = reinterpret_cast<uint64_t>(&(df_structure->king_hasty)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["economy_active"] = reinterpret_cast<uint64_t>(&(df_structure->economy_active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ignore_labor_shortage"] = reinterpret_cast<uint64_t>(&(df_structure->ignore_labor_shortage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["justice_active"] = reinterpret_cast<uint64_t>(&(df_structure->justice_active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["manager_timer"] = reinterpret_cast<uint64_t>(&(df_structure->manager_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["becoming_capital"] = reinterpret_cast<uint64_t>(&(df_structure->becoming_capital)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units_killed"] = reinterpret_cast<uint64_t>(&(df_structure->units_killed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["currency_value"] = reinterpret_cast<uint64_t>(&(df_structure->currency_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trees_removed"] = reinterpret_cast<uint64_t>(&(df_structure->trees_removed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fortress_age"] = reinterpret_cast<uint64_t>(&(df_structure->fortress_age)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tasks"] = reinterpret_cast<uint64_t>(&(df_structure->tasks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meeting_requests"] = reinterpret_cast<uint64_t>(&(df_structure->meeting_requests)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activities"] = reinterpret_cast<uint64_t>(&(df_structure->activities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dip_meeting_info"] = reinterpret_cast<uint64_t>(&(df_structure->dip_meeting_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["aid_requesters"] = reinterpret_cast<uint64_t>(&(df_structure->aid_requesters)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["game_over"] = reinterpret_cast<uint64_t>(&(df_structure->game_over)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["invasions"] = reinterpret_cast<uint64_t>(&(df_structure->invasions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["punishments"] = reinterpret_cast<uint64_t>(&(df_structure->punishments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["parties"] = reinterpret_cast<uint64_t>(&(df_structure->parties)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["room_rent"] = reinterpret_cast<uint64_t>(&(df_structure->room_rent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dipscripts"] = reinterpret_cast<uint64_t>(&(df_structure->dipscripts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dipscript_popups"] = reinterpret_cast<uint64_t>(&(df_structure->dipscript_popups)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["kitchen"] = reinterpret_cast<uint64_t>(&(df_structure->kitchen)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["economic_stone"] = reinterpret_cast<uint64_t>(&(df_structure->economic_stone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk23c8_flags"] = reinterpret_cast<uint64_t>(&(df_structure->unk23c8_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mood_cooldown"] = reinterpret_cast<uint64_t>(&(df_structure->mood_cooldown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_id"] = reinterpret_cast<uint64_t>(&(df_structure->group_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race_id"] = reinterpret_cast<uint64_t>(&(df_structure->race_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_races"] = reinterpret_cast<uint64_t>(&(df_structure->unk_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["farm_crops"] = reinterpret_cast<uint64_t>(&(df_structure->farm_crops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["farm_seasons"] = reinterpret_cast<uint64_t>(&(df_structure->farm_seasons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["economy_prices"] = reinterpret_cast<uint64_t>(&(df_structure->economy_prices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpile"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2a8c"] = reinterpret_cast<uint64_t>(&(df_structure->unk2a8c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_mapedge_x"] = reinterpret_cast<uint64_t>(&(df_structure->unk_mapedge_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_mapedge_y"] = reinterpret_cast<uint64_t>(&(df_structure->unk_mapedge_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_mapedge_z"] = reinterpret_cast<uint64_t>(&(df_structure->unk_mapedge_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_edge"] = reinterpret_cast<uint64_t>(&(df_structure->map_edge)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5b88"] = reinterpret_cast<uint64_t>(&(df_structure->unk5b88)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["waypoints"] = reinterpret_cast<uint64_t>(&(df_structure->waypoints)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["burrows"] = reinterpret_cast<uint64_t>(&(df_structure->burrows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["alerts"] = reinterpret_cast<uint64_t>(&(df_structure->alerts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["equipment"] = reinterpret_cast<uint64_t>(&(df_structure->equipment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hauling"] = reinterpret_cast<uint64_t>(&(df_structure->hauling)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["petitions"] = reinterpret_cast<uint64_t>(&(df_structure->petitions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["main"] = reinterpret_cast<uint64_t>(&(df_structure->main)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["follow_unit"] = reinterpret_cast<uint64_t>(&(df_structure->follow_unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["follow_item"] = reinterpret_cast<uint64_t>(&(df_structure->follow_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_farm_crops"] = reinterpret_cast<uint64_t>(&(df_structure->selected_farm_crops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["available_seeds"] = reinterpret_cast<uint64_t>(&(df_structure->available_seeds)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_savegamest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_savegamest*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_step"] = reinterpret_cast<uint64_t>(&(df_structure->cur_step)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["offload"] = reinterpret_cast<uint64_t>(&(df_structure->offload)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["compressor"] = reinterpret_cast<uint64_t>(&(df_structure->compressor)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_selectitemst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_selectitemst*>(p_df_structure);

	p_table["p_item_type"] = reinterpret_cast<uint64_t>(&(df_structure->p_item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["p_item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->p_item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["p_mattype"] = reinterpret_cast<uint64_t>(&(df_structure->p_mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["p_matindex"] = reinterpret_cast<uint64_t>(&(df_structure->p_matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choice"] = reinterpret_cast<uint64_t>(&(df_structure->choice)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["screen"] = reinterpret_cast<uint64_t>(&(df_structure->screen)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_base"] = reinterpret_cast<uint64_t>(&(df_structure->page_base)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["right_pos"] = reinterpret_cast<uint64_t>(&(df_structure->right_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["right_page_base"] = reinterpret_cast<uint64_t>(&(df_structure->right_page_base)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["right_list"] = reinterpret_cast<uint64_t>(&(df_structure->right_list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_category"] = reinterpret_cast<uint64_t>(&(df_structure->sel_category)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["categories"] = reinterpret_cast<uint64_t>(&(df_structure->categories)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_setup_character_info__T_available_embark_items_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::setup_character_info::T_available_embark_items*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_setup_character_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::setup_character_info*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skills"] = reinterpret_cast<uint64_t>(&(df_structure->skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig"] = reinterpret_cast<uint64_t>(&(df_structure->histfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_284"] = reinterpret_cast<uint64_t>(&(df_structure->unk_284)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cultural_identity"] = reinterpret_cast<uint64_t>(&(df_structure->cultural_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_290"] = reinterpret_cast<uint64_t>(&(df_structure->unk_290)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_294"] = reinterpret_cast<uint64_t>(&(df_structure->unk_294)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["physical_levels"] = reinterpret_cast<uint64_t>(&(df_structure->physical_levels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mental_levels"] = reinterpret_cast<uint64_t>(&(df_structure->mental_levels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status"] = reinterpret_cast<uint64_t>(&(df_structure->status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["home_site_id"] = reinterpret_cast<uint64_t>(&(df_structure->home_site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civilian_occupation"] = reinterpret_cast<uint64_t>(&(df_structure->civilian_occupation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civilian_skill"] = reinterpret_cast<uint64_t>(&(df_structure->civilian_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deity_id"] = reinterpret_cast<uint64_t>(&(df_structure->deity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["belief_strength"] = reinterpret_cast<uint64_t>(&(df_structure->belief_strength)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_000"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_000)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_001"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_001)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_002"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_002)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_003"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_003)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_004"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_004)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_005"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_005)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_006"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_006)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_007"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_007)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_008"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_008)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_009"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_009)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_010"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_010)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_011"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_011)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_012"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_012)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_013"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_013)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_014"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_014)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_015"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_015)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_016"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_016)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_017"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_017)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_018"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_018)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_019"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_019)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_020"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_020)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_021"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_021)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_022"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_022)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_023"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_023)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_024"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_024)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_025"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_025)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_026"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_026)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_027"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_027)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_028"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_028)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_029"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_029)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_030"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_030)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_031"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_031)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_032"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_032)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_033"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_033)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_034"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_034)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_035"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_035)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_036"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_036)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_037"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_037)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_038"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_038)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_039"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_039)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_040"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_040)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_041"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_041)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_042"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_042)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_043"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_043)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_044"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_044)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_045"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_045)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_046"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_046)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_047"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_047)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_048"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_048)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_049"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_049)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_050"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_050)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_051"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_051)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_052"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_052)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_053"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_053)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_054"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_054)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_055"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_055)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_056"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_056)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_057"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_057)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_058"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_058)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_059"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_059)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_060"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_060)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_061"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_061)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_062"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_062)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_063"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_063)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_064"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_064)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_065"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_065)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_066"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_066)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_067"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_067)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_068"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_068)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_069"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_069)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_070"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_070)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_071"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_071)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_072"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_072)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_073"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_073)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_074"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_074)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_075"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_075)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_076"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_076)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_077"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_077)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_078"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_078)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_079"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_079)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_080"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_080)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_081"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_081)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_082"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_082)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_083"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_083)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_084"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_084)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_085"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_085)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_086"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_086)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_087"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_087)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_088"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_088)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_089"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_089)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_090"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_090)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_091"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_091)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_092"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_092)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_093"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_093)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_094"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_094)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_095"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_095)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_096"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_096)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_097"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_097)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_098"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_098)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_099"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_099)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_100"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_100)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_101"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_101)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_102"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_102)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_103"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_103)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_104"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_104)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_105"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_105)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_106"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_106)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_107"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_107)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_108"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_108)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_110"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_110)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_111"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_111)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_112"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_112)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_trait_column"] = reinterpret_cast<uint64_t>(&(df_structure->sel_trait_column)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attribute_idx"] = reinterpret_cast<uint64_t>(&(df_structure->attribute_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attribute_points_remaining"] = reinterpret_cast<uint64_t>(&(df_structure->attribute_points_remaining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_list"] = reinterpret_cast<uint64_t>(&(df_structure->skill_list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_idx"] = reinterpret_cast<uint64_t>(&(df_structure->skill_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_points_remaining"] = reinterpret_cast<uint64_t>(&(df_structure->skill_points_remaining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_121"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_121)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["saved_first_name"] = reinterpret_cast<uint64_t>(&(df_structure->saved_first_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["description_lines"] = reinterpret_cast<uint64_t>(&(df_structure->description_lines)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_123"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_123)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_124"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_124)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_125"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_125)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_126"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_126)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_127"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_127)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_128"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_128)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_129"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_129)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_130"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_130)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_131"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_131)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_132"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_132)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_133"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_133)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["home_description_lines"] = reinterpret_cast<uint64_t>(&(df_structure->home_description_lines)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_135"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_135)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_136"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_136)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_137"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_137)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_138"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_138)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_139"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_139)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_140"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_140)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["equip_points_remaining"] = reinterpret_cast<uint64_t>(&(df_structure->equip_points_remaining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_142"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_142)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_143"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_143)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["available_embark_items"] = reinterpret_cast<uint64_t>(&(df_structure->available_embark_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_251"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_251)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_252"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_252)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_253"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_253)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_254"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_254)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_255"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_255)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_256"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_256)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_257"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_257)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_258"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_258)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_259"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_259)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_260"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_260)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_261"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_261)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_setupadventurest__T_races_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_setupadventurest::T_races_info*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["playable"] = reinterpret_cast<uint64_t>(&(df_structure->playable)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_setupadventurest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_setupadventurest*>(p_df_structure);

	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["races_info"] = reinterpret_cast<uint64_t>(&(df_structure->races_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status"] = reinterpret_cast<uint64_t>(&(df_structure->status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race_ids"] = reinterpret_cast<uint64_t>(&(df_structure->race_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["highlighted_entity_ids"] = reinterpret_cast<uint64_t>(&(df_structure->highlighted_entity_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race_idx"] = reinterpret_cast<uint64_t>(&(df_structure->race_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wild_creature_ids"] = reinterpret_cast<uint64_t>(&(df_structure->wild_creature_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wild_creature_idx"] = reinterpret_cast<uint64_t>(&(df_structure->wild_creature_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis_ids"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis_idx"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["home_entity_ids"] = reinterpret_cast<uint64_t>(&(df_structure->home_entity_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["home_entity_idx"] = reinterpret_cast<uint64_t>(&(df_structure->home_entity_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["party_members"] = reinterpret_cast<uint64_t>(&(df_structure->party_members)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_embark_item_choice__T_list_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::embark_item_choice::T_list*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_embark_item_choice_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::embark_item_choice*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_embark_profile_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::embark_profile*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_type"] = reinterpret_cast<uint64_t>(&(df_structure->skill_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_dwarf_idx"] = reinterpret_cast<uint64_t>(&(df_structure->skill_dwarf_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_level"] = reinterpret_cast<uint64_t>(&(df_structure->skill_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_info"] = reinterpret_cast<uint64_t>(&(df_structure->mat_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_count"] = reinterpret_cast<uint64_t>(&(df_structure->item_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_setupdwarfgamest__T_animals_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_setupdwarfgamest::T_animals*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_setupdwarfgamest__T_unk_v43__T_unk_v43_sub9_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_setupdwarfgamest::T_unk_v43::T_unk_v43_sub9*>(p_df_structure);

	p_table["unk_s1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_s7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_s7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_setupdwarfgamest__T_unk_v43_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_setupdwarfgamest::T_unk_v43*>(p_df_structure);

	p_table["unk_v43_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_sub9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_sub9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_setupdwarfgamest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_setupdwarfgamest*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dwarf_info"] = reinterpret_cast<uint64_t>(&(df_structure->dwarf_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_skills"] = reinterpret_cast<uint64_t>(&(df_structure->embark_skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reclaim_professions"] = reinterpret_cast<uint64_t>(&(df_structure->reclaim_professions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dwarf_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->dwarf_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dwarf_page_idx"] = reinterpret_cast<uint64_t>(&(df_structure->dwarf_page_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->item_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->skill_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animal_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->animal_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dwarf_column"] = reinterpret_cast<uint64_t>(&(df_structure->dwarf_column)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["supply_column"] = reinterpret_cast<uint64_t>(&(df_structure->supply_column)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["display_row"] = reinterpret_cast<uint64_t>(&(df_structure->display_row)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_play_now"] = reinterpret_cast<uint64_t>(&(df_structure->show_play_now)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_prompt"] = reinterpret_cast<uint64_t>(&(df_structure->embark_prompt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choice_types"] = reinterpret_cast<uint64_t>(&(df_structure->choice_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choices"] = reinterpret_cast<uint64_t>(&(df_structure->choices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["choice"] = reinterpret_cast<uint64_t>(&(df_structure->choice)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profile_name"] = reinterpret_cast<uint64_t>(&(df_structure->profile_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["problems"] = reinterpret_cast<uint64_t>(&(df_structure->problems)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_problems"] = reinterpret_cast<uint64_t>(&(df_structure->in_problems)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_save_profile"] = reinterpret_cast<uint64_t>(&(df_structure->in_save_profile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profile_name_conflict"] = reinterpret_cast<uint64_t>(&(df_structure->profile_name_conflict)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_choice"] = reinterpret_cast<uint64_t>(&(df_structure->item_choice)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animals"] = reinterpret_cast<uint64_t>(&(df_structure->animals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fort_name"] = reinterpret_cast<uint64_t>(&(df_structure->fort_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_name"] = reinterpret_cast<uint64_t>(&(df_structure->group_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location"] = reinterpret_cast<uint64_t>(&(df_structure->location)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["points_remaining"] = reinterpret_cast<uint64_t>(&(df_structure->points_remaining)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_item_type"] = reinterpret_cast<uint64_t>(&(df_structure->add_item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->add_item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_mattype"] = reinterpret_cast<uint64_t>(&(df_structure->add_mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_matindex"] = reinterpret_cast<uint64_t>(&(df_structure->add_matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adding_item"] = reinterpret_cast<uint64_t>(&(df_structure->adding_item)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_storesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_storesst*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->category_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->item_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_right_list"] = reinterpret_cast<uint64_t>(&(df_structure->in_right_list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_group_mode"] = reinterpret_cast<uint64_t>(&(df_structure->in_group_mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category_total"] = reinterpret_cast<uint64_t>(&(df_structure->category_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category_busy"] = reinterpret_cast<uint64_t>(&(df_structure->category_busy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_item_type"] = reinterpret_cast<uint64_t>(&(df_structure->group_item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->group_item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->group_mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->group_mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_count"] = reinterpret_cast<uint64_t>(&(df_structure->group_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["category_order"] = reinterpret_cast<uint64_t>(&(df_structure->category_order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["can_zoom"] = reinterpret_cast<uint64_t>(&(df_structure->can_zoom)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_textviewerst__T_formatted_text_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_textviewerst::T_formatted_text*>(p_df_structure);

	p_table["text"] = reinterpret_cast<uint64_t>(&(df_structure->text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["format"] = reinterpret_cast<uint64_t>(&(df_structure->format)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pause_depth"] = reinterpret_cast<uint64_t>(&(df_structure->pause_depth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["return_val"] = reinterpret_cast<uint64_t>(&(df_structure->return_val)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["indent"] = reinterpret_cast<uint64_t>(&(df_structure->indent)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_textviewerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_textviewerst*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title_colors"] = reinterpret_cast<uint64_t>(&(df_structure->title_colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["src_text"] = reinterpret_cast<uint64_t>(&(df_structure->src_text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["outvar_type"] = reinterpret_cast<uint64_t>(&(df_structure->outvar_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["outvar_name"] = reinterpret_cast<uint64_t>(&(df_structure->outvar_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meeting_context"] = reinterpret_cast<uint64_t>(&(df_structure->meeting_context)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["help_filename"] = reinterpret_cast<uint64_t>(&(df_structure->help_filename)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page_filename"] = reinterpret_cast<uint64_t>(&(df_structure->page_filename)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["formatted_text"] = reinterpret_cast<uint64_t>(&(df_structure->formatted_text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hyperlinks"] = reinterpret_cast<uint64_t>(&(df_structure->hyperlinks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["logged_error"] = reinterpret_cast<uint64_t>(&(df_structure->logged_error)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["scroll_pos"] = reinterpret_cast<uint64_t>(&(df_structure->scroll_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_line"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_line)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pause_depth"] = reinterpret_cast<uint64_t>(&(df_structure->pause_depth)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_titlest__T_start_savegames_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_titlest::T_start_savegames*>(p_df_structure);

	p_table["world_name"] = reinterpret_cast<uint64_t>(&(df_structure->world_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_name_str"] = reinterpret_cast<uint64_t>(&(df_structure->world_name_str)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["save_dir"] = reinterpret_cast<uint64_t>(&(df_structure->save_dir)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_titlest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_titlest*>(p_df_structure);

	p_table["str_histories"] = reinterpret_cast<uint64_t>(&(df_structure->str_histories)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["menu_items"] = reinterpret_cast<uint64_t>(&(df_structure->menu_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_subpage"] = reinterpret_cast<uint64_t>(&(df_structure->sel_subpage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_menu_line"] = reinterpret_cast<uint64_t>(&(df_structure->sel_menu_line)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sel_submenu_line"] = reinterpret_cast<uint64_t>(&(df_structure->sel_submenu_line)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["loading"] = reinterpret_cast<uint64_t>(&(df_structure->loading)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["menu_line_id"] = reinterpret_cast<uint64_t>(&(df_structure->menu_line_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["submenu_line_id"] = reinterpret_cast<uint64_t>(&(df_structure->submenu_line_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["submenu_line_text"] = reinterpret_cast<uint64_t>(&(df_structure->submenu_line_text)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_savegames"] = reinterpret_cast<uint64_t>(&(df_structure->start_savegames)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["arena_savegames"] = reinterpret_cast<uint64_t>(&(df_structure->arena_savegames)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_slaves"] = reinterpret_cast<uint64_t>(&(df_structure->str_slaves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_chapter"] = reinterpret_cast<uint64_t>(&(df_structure->str_chapter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_copyright"] = reinterpret_cast<uint64_t>(&(df_structure->str_copyright)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_version"] = reinterpret_cast<uint64_t>(&(df_structure->str_version)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_warning"] = reinterpret_cast<uint64_t>(&(df_structure->str_warning)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_programmed"] = reinterpret_cast<uint64_t>(&(df_structure->str_programmed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_designed"] = reinterpret_cast<uint64_t>(&(df_structure->str_designed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_visit"] = reinterpret_cast<uint64_t>(&(df_structure->str_visit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["str_site"] = reinterpret_cast<uint64_t>(&(df_structure->str_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["arena_raw_folder"] = reinterpret_cast<uint64_t>(&(df_structure->arena_raw_folder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_388"] = reinterpret_cast<uint64_t>(&(df_structure->unk_388)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_390"] = reinterpret_cast<uint64_t>(&(df_structure->unk_390)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_394"] = reinterpret_cast<uint64_t>(&(df_structure->unk_394)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_398"] = reinterpret_cast<uint64_t>(&(df_structure->unk_398)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_39c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_39c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3a0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3a0)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_topicmeetingst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_topicmeetingst*>(p_df_structure);

	p_table["popup"] = reinterpret_cast<uint64_t>(&(df_structure->popup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meeting"] = reinterpret_cast<uint64_t>(&(df_structure->meeting)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_138"] = reinterpret_cast<uint64_t>(&(df_structure->unk_138)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["text"] = reinterpret_cast<uint64_t>(&(df_structure->text)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_topicmeeting_fill_land_holder_positionsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_topicmeeting_fill_land_holder_positionsst*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["popup"] = reinterpret_cast<uint64_t>(&(df_structure->popup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meeting"] = reinterpret_cast<uint64_t>(&(df_structure->meeting)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_diplomat"] = reinterpret_cast<uint64_t>(&(df_structure->entity_diplomat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_fortress"] = reinterpret_cast<uint64_t>(&(df_structure->entity_fortress)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_ids"] = reinterpret_cast<uint64_t>(&(df_structure->position_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_histfig_ids"] = reinterpret_cast<uint64_t>(&(df_structure->selected_histfig_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["candidate_histfig_ids"] = reinterpret_cast<uint64_t>(&(df_structure->candidate_histfig_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["position_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->position_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_topicmeeting_takerequestsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_topicmeeting_takerequestsst*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["popup"] = reinterpret_cast<uint64_t>(&(df_structure->popup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meeting"] = reinterpret_cast<uint64_t>(&(df_structure->meeting)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_categories"] = reinterpret_cast<uint64_t>(&(df_structure->type_categories)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_idx"] = reinterpret_cast<uint64_t>(&(df_structure->type_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["good_idx"] = reinterpret_cast<uint64_t>(&(df_structure->good_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_tradeagreementst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_tradeagreementst*>(p_df_structure);

	p_table["requests"] = reinterpret_cast<uint64_t>(&(df_structure->requests)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type_idx"] = reinterpret_cast<uint64_t>(&(df_structure->type_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["good_idx"] = reinterpret_cast<uint64_t>(&(df_structure->good_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ"] = reinterpret_cast<uint64_t>(&(df_structure->civ)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_tradegoodsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_tradegoodsst*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["merchant_name"] = reinterpret_cast<uint64_t>(&(df_structure->merchant_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["merchant_entity"] = reinterpret_cast<uint64_t>(&(df_structure->merchant_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["depot"] = reinterpret_cast<uint64_t>(&(df_structure->depot)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caravan"] = reinterpret_cast<uint64_t>(&(df_structure->caravan)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_unloading"] = reinterpret_cast<uint64_t>(&(df_structure->is_unloading)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_traders"] = reinterpret_cast<uint64_t>(&(df_structure->has_traders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trader"] = reinterpret_cast<uint64_t>(&(df_structure->trader)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["broker"] = reinterpret_cast<uint64_t>(&(df_structure->broker)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trader_items"] = reinterpret_cast<uint64_t>(&(df_structure->trader_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["broker_items"] = reinterpret_cast<uint64_t>(&(df_structure->broker_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trader_selected"] = reinterpret_cast<uint64_t>(&(df_structure->trader_selected)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["broker_selected"] = reinterpret_cast<uint64_t>(&(df_structure->broker_selected)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trader_count"] = reinterpret_cast<uint64_t>(&(df_structure->trader_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["broker_count"] = reinterpret_cast<uint64_t>(&(df_structure->broker_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trader_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->trader_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["broker_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->broker_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_right_pane"] = reinterpret_cast<uint64_t>(&(df_structure->in_right_pane)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trade_reply"] = reinterpret_cast<uint64_t>(&(df_structure->trade_reply)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_offer"] = reinterpret_cast<uint64_t>(&(df_structure->has_offer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["counteroffer"] = reinterpret_cast<uint64_t>(&(df_structure->counteroffer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["in_edit_count"] = reinterpret_cast<uint64_t>(&(df_structure->in_edit_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["edit_count"] = reinterpret_cast<uint64_t>(&(df_structure->edit_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_tradelistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_tradelistst*>(p_df_structure);

	p_table["cursor"] = reinterpret_cast<uint64_t>(&(df_structure->cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["depot"] = reinterpret_cast<uint64_t>(&(df_structure->depot)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caravans"] = reinterpret_cast<uint64_t>(&(df_structure->caravans)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_treasurelistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_treasurelistst*>(p_df_structure);

	p_table["sel_idx"] = reinterpret_cast<uint64_t>(&(df_structure->sel_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_unitst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_unitst*>(p_df_structure);

	p_table["unit"] = reinterpret_cast<uint64_t>(&(df_structure->unit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noble_assignments"] = reinterpret_cast<uint64_t>(&(df_structure->noble_assignments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noble_histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->noble_histfigs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["noble_groups"] = reinterpret_cast<uint64_t>(&(df_structure->noble_groups)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_kills"] = reinterpret_cast<uint64_t>(&(df_structure->has_kills)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_wagesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_wagesst*>(p_df_structure);

	p_table["profession_category"] = reinterpret_cast<uint64_t>(&(df_structure->profession_category)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_workquota_conditionst__T_traits_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_workquota_conditionst::T_traits*>(p_df_structure);

	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_desc"] = reinterpret_cast<uint64_t>(&(df_structure->item_desc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["product_desc"] = reinterpret_cast<uint64_t>(&(df_structure->product_desc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_workquota_conditionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_workquota_conditionst*>(p_df_structure);

	p_table["order"] = reinterpret_cast<uint64_t>(&(df_structure->order)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cond_idx"] = reinterpret_cast<uint64_t>(&(df_structure->cond_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["satisfied_items"] = reinterpret_cast<uint64_t>(&(df_structure->satisfied_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["satisfied_orders"] = reinterpret_cast<uint64_t>(&(df_structure->satisfied_orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_entries"] = reinterpret_cast<uint64_t>(&(df_structure->list_entries)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_idx"] = reinterpret_cast<uint64_t>(&(df_structure->list_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_types"] = reinterpret_cast<uint64_t>(&(df_structure->item_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtypes"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtypes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_types_visible"] = reinterpret_cast<uint64_t>(&(df_structure->item_types_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtypes_visible"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtypes_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_types"] = reinterpret_cast<uint64_t>(&(df_structure->mat_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_indices"] = reinterpret_cast<uint64_t>(&(df_structure->mat_indices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_unk3"] = reinterpret_cast<uint64_t>(&(df_structure->list_unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list_visible"] = reinterpret_cast<uint64_t>(&(df_structure->list_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traits"] = reinterpret_cast<uint64_t>(&(df_structure->traits)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traits_visible"] = reinterpret_cast<uint64_t>(&(df_structure->traits_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_count_edit"] = reinterpret_cast<uint64_t>(&(df_structure->item_count_edit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_count_entry"] = reinterpret_cast<uint64_t>(&(df_structure->item_count_entry)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_workquota_detailsst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_workquota_detailsst*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_workshop_profilest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_workshop_profilest*>(p_df_structure);

	p_table["building_id"] = reinterpret_cast<uint64_t>(&(df_structure->building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profile"] = reinterpret_cast<uint64_t>(&(df_structure->profile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tab"] = reinterpret_cast<uint64_t>(&(df_structure->tab)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["workers"] = reinterpret_cast<uint64_t>(&(df_structure->workers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worker_idx"] = reinterpret_cast<uint64_t>(&(df_structure->worker_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orders"] = reinterpret_cast<uint64_t>(&(df_structure->orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["order_idx"] = reinterpret_cast<uint64_t>(&(df_structure->order_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["labors"] = reinterpret_cast<uint64_t>(&(df_structure->labors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["labor_idx"] = reinterpret_cast<uint64_t>(&(df_structure->labor_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_update_regionst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_update_regionst*>(p_df_structure);

	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_unk130__T_unk_4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_unk130::T_unk_4*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_unk130_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_unk130*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_embark_note_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::embark_note*>(p_df_structure);

	p_table["tile"] = reinterpret_cast<uint64_t>(&(df_structure->tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fg_color"] = reinterpret_cast<uint64_t>(&(df_structure->fg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bg_color"] = reinterpret_cast<uint64_t>(&(df_structure->bg_color)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["left"] = reinterpret_cast<uint64_t>(&(df_structure->left)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["right"] = reinterpret_cast<uint64_t>(&(df_structure->right)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["top"] = reinterpret_cast<uint64_t>(&(df_structure->top)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bottom"] = reinterpret_cast<uint64_t>(&(df_structure->bottom)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_population_ref_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_population_ref*>(p_df_structure);

	p_table["region_x"] = reinterpret_cast<uint64_t>(&(df_structure->region_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_y"] = reinterpret_cast<uint64_t>(&(df_structure->region_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_idx"] = reinterpret_cast<uint64_t>(&(df_structure->feature_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cave_id"] = reinterpret_cast<uint64_t>(&(df_structure->cave_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population_idx"] = reinterpret_cast<uint64_t>(&(df_structure->population_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["depth"] = reinterpret_cast<uint64_t>(&(df_structure->depth)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_item_eggst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::item_eggst*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_materials"] = reinterpret_cast<uint64_t>(&(df_structure->egg_materials)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["egg_flags"] = reinterpret_cast<uint64_t>(&(df_structure->egg_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["incubation_counter"] = reinterpret_cast<uint64_t>(&(df_structure->incubation_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_population_id"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_population_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_unit_unk_c0"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_unit_unk_c0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mothers_genes"] = reinterpret_cast<uint64_t>(&(df_structure->mothers_genes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mothers_caste"] = reinterpret_cast<uint64_t>(&(df_structure->mothers_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fathers_genes"] = reinterpret_cast<uint64_t>(&(df_structure->fathers_genes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fathers_caste"] = reinterpret_cast<uint64_t>(&(df_structure->fathers_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_flags1"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_flags2"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_flags3"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_training_level"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_training_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_animal_population"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_animal_population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hatchling_mother_id"] = reinterpret_cast<uint64_t>(&(df_structure->hatchling_mother_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_path_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_path*>(p_df_structure);

	p_table["dest"] = reinterpret_cast<uint64_t>(&(df_structure->dest)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["goal"] = reinterpret_cast<uint64_t>(&(df_structure->goal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["path"] = reinterpret_cast<uint64_t>(&(df_structure->path)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_meeting_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_meeting*>(p_df_structure);

	p_table["state"] = reinterpret_cast<uint64_t>(&(df_structure->state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_entity"] = reinterpret_cast<uint64_t>(&(df_structure->target_entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_role"] = reinterpret_cast<uint64_t>(&(df_structure->target_role)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_military_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_military*>(p_df_structure);

	p_table["squad_id"] = reinterpret_cast<uint64_t>(&(df_structure->squad_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad_position"] = reinterpret_cast<uint64_t>(&(df_structure->squad_position)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["patrol_cooldown"] = reinterpret_cast<uint64_t>(&(df_structure->patrol_cooldown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["patrol_timer"] = reinterpret_cast<uint64_t>(&(df_structure->patrol_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_uniform"] = reinterpret_cast<uint64_t>(&(df_structure->cur_uniform)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_items"] = reinterpret_cast<uint64_t>(&(df_structure->unk_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniforms"] = reinterpret_cast<uint64_t>(&(df_structure->uniforms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pickup_flags"] = reinterpret_cast<uint64_t>(&(df_structure->pickup_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform_pickup"] = reinterpret_cast<uint64_t>(&(df_structure->uniform_pickup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["uniform_drop"] = reinterpret_cast<uint64_t>(&(df_structure->uniform_drop)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["individual_drills"] = reinterpret_cast<uint64_t>(&(df_structure->individual_drills)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_animal_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_animal*>(p_df_structure);

	p_table["population"] = reinterpret_cast<uint64_t>(&(df_structure->population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leave_countdown"] = reinterpret_cast<uint64_t>(&(df_structure->leave_countdown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vanish_countdown"] = reinterpret_cast<uint64_t>(&(df_structure->vanish_countdown)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_opponent_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_opponent*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_pos"] = reinterpret_cast<uint64_t>(&(df_structure->unit_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_job_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_job*>(p_df_structure);

	p_table["account"] = reinterpret_cast<uint64_t>(&(df_structure->account)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["satisfaction"] = reinterpret_cast<uint64_t>(&(df_structure->satisfaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hunt_target"] = reinterpret_cast<uint64_t>(&(df_structure->hunt_target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4305_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4305_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["destroy_target"] = reinterpret_cast<uint64_t>(&(df_structure->destroy_target)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gait_buildup"] = reinterpret_cast<uint64_t>(&(df_structure->gait_buildup)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["climb_hold"] = reinterpret_cast<uint64_t>(&(df_structure->climb_hold)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4014_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4014_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["current_job"] = reinterpret_cast<uint64_t>(&(df_structure->current_job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mood_skill"] = reinterpret_cast<uint64_t>(&(df_structure->mood_skill)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mood_timeout"] = reinterpret_cast<uint64_t>(&(df_structure->mood_timeout)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_39c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_39c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_body_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_body*>(p_df_structure);

	p_table["components"] = reinterpret_cast<uint64_t>(&(df_structure->components)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wounds"] = reinterpret_cast<uint64_t>(&(df_structure->wounds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wound_next_id"] = reinterpret_cast<uint64_t>(&(df_structure->wound_next_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_39c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_39c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_plan"] = reinterpret_cast<uint64_t>(&(df_structure->body_plan)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapon_bp"] = reinterpret_cast<uint64_t>(&(df_structure->weapon_bp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["physical_attrs"] = reinterpret_cast<uint64_t>(&(df_structure->physical_attrs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size_info"] = reinterpret_cast<uint64_t>(&(df_structure->size_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blood_max"] = reinterpret_cast<uint64_t>(&(df_structure->blood_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["blood_count"] = reinterpret_cast<uint64_t>(&(df_structure->blood_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["infection_level"] = reinterpret_cast<uint64_t>(&(df_structure->infection_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spatters"] = reinterpret_cast<uint64_t>(&(df_structure->spatters)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_appearance_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_appearance*>(p_df_structure);

	p_table["body_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->body_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_modifiers"] = reinterpret_cast<uint64_t>(&(df_structure->bp_modifiers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size_modifier"] = reinterpret_cast<uint64_t>(&(df_structure->size_modifier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_style"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_style)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_style_civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_style_civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_style_id"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_style_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_style_type"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_style_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tissue_length"] = reinterpret_cast<uint64_t>(&(df_structure->tissue_length)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["genes"] = reinterpret_cast<uint64_t>(&(df_structure->genes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colors"] = reinterpret_cast<uint64_t>(&(df_structure->colors)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_counters_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_counters*>(p_df_structure);

	p_table["think_counter"] = reinterpret_cast<uint64_t>(&(df_structure->think_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job_counter"] = reinterpret_cast<uint64_t>(&(df_structure->job_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["swap_counter"] = reinterpret_cast<uint64_t>(&(df_structure->swap_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_cause"] = reinterpret_cast<uint64_t>(&(df_structure->death_cause)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_id"] = reinterpret_cast<uint64_t>(&(df_structure->death_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["winded"] = reinterpret_cast<uint64_t>(&(df_structure->winded)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stunned"] = reinterpret_cast<uint64_t>(&(df_structure->stunned)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unconscious"] = reinterpret_cast<uint64_t>(&(df_structure->unconscious)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["suffocation"] = reinterpret_cast<uint64_t>(&(df_structure->suffocation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["webbed"] = reinterpret_cast<uint64_t>(&(df_structure->webbed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guts_trail1"] = reinterpret_cast<uint64_t>(&(df_structure->guts_trail1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["guts_trail2"] = reinterpret_cast<uint64_t>(&(df_structure->guts_trail2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["soldier_mood_countdown"] = reinterpret_cast<uint64_t>(&(df_structure->soldier_mood_countdown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["soldier_mood"] = reinterpret_cast<uint64_t>(&(df_structure->soldier_mood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pain"] = reinterpret_cast<uint64_t>(&(df_structure->pain)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nausea"] = reinterpret_cast<uint64_t>(&(df_structure->nausea)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dizziness"] = reinterpret_cast<uint64_t>(&(df_structure->dizziness)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_curse_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_curse*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_tags1"] = reinterpret_cast<uint64_t>(&(df_structure->add_tags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rem_tags1"] = reinterpret_cast<uint64_t>(&(df_structure->rem_tags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_tags2"] = reinterpret_cast<uint64_t>(&(df_structure->add_tags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rem_tags2"] = reinterpret_cast<uint64_t>(&(df_structure->rem_tags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_visible"] = reinterpret_cast<uint64_t>(&(df_structure->name_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_plural"] = reinterpret_cast<uint64_t>(&(df_structure->name_plural)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_adjective"] = reinterpret_cast<uint64_t>(&(df_structure->name_adjective)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_and_color1"] = reinterpret_cast<uint64_t>(&(df_structure->sym_and_color1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sym_and_color2"] = reinterpret_cast<uint64_t>(&(df_structure->sym_and_color2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flash_period"] = reinterpret_cast<uint64_t>(&(df_structure->flash_period)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flash_time2"] = reinterpret_cast<uint64_t>(&(df_structure->flash_time2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_appearance"] = reinterpret_cast<uint64_t>(&(df_structure->body_appearance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bp_appearance"] = reinterpret_cast<uint64_t>(&(df_structure->bp_appearance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_add"] = reinterpret_cast<uint64_t>(&(df_structure->speed_add)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["speed_mul_percent"] = reinterpret_cast<uint64_t>(&(df_structure->speed_mul_percent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attr_change"] = reinterpret_cast<uint64_t>(&(df_structure->attr_change)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["luck_mul_percent"] = reinterpret_cast<uint64_t>(&(df_structure->luck_mul_percent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_98"] = reinterpret_cast<uint64_t>(&(df_structure->unk_98)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_id"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_time"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_delay"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_delay)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time_on_site"] = reinterpret_cast<uint64_t>(&(df_structure->time_on_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["own_interaction"] = reinterpret_cast<uint64_t>(&(df_structure->own_interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["own_interaction_delay"] = reinterpret_cast<uint64_t>(&(df_structure->own_interaction_delay)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_counters2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_counters2*>(p_df_structure);

	p_table["paralysis"] = reinterpret_cast<uint64_t>(&(df_structure->paralysis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["numbness"] = reinterpret_cast<uint64_t>(&(df_structure->numbness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fever"] = reinterpret_cast<uint64_t>(&(df_structure->fever)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["exhaustion"] = reinterpret_cast<uint64_t>(&(df_structure->exhaustion)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hunger_timer"] = reinterpret_cast<uint64_t>(&(df_structure->hunger_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thirst_timer"] = reinterpret_cast<uint64_t>(&(df_structure->thirst_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sleepiness_timer"] = reinterpret_cast<uint64_t>(&(df_structure->sleepiness_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stomach_content"] = reinterpret_cast<uint64_t>(&(df_structure->stomach_content)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stomach_food"] = reinterpret_cast<uint64_t>(&(df_structure->stomach_food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vomit_timeout"] = reinterpret_cast<uint64_t>(&(df_structure->vomit_timeout)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stored_fat"] = reinterpret_cast<uint64_t>(&(df_structure->stored_fat)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_status__T_eat_history__T_food_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_status::T_eat_history::T_food*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_time"] = reinterpret_cast<uint64_t>(&(df_structure->year_time)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_status__T_eat_history__T_drink_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_status::T_eat_history::T_drink*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["material"] = reinterpret_cast<uint64_t>(&(df_structure->material)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_time"] = reinterpret_cast<uint64_t>(&(df_structure->year_time)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_status__T_eat_history_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_status::T_eat_history*>(p_df_structure);

	p_table["food"] = reinterpret_cast<uint64_t>(&(df_structure->food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drink"] = reinterpret_cast<uint64_t>(&(df_structure->drink)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_status_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_status*>(p_df_structure);

	p_table["misc_traits"] = reinterpret_cast<uint64_t>(&(df_structure->misc_traits)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["eat_history"] = reinterpret_cast<uint64_t>(&(df_structure->eat_history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["demand_timeout"] = reinterpret_cast<uint64_t>(&(df_structure->demand_timeout)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mandate_timeout"] = reinterpret_cast<uint64_t>(&(df_structure->mandate_timeout)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_ids"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["attacker_cntdn"] = reinterpret_cast<uint64_t>(&(df_structure->attacker_cntdn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["face_direction"] = reinterpret_cast<uint64_t>(&(df_structure->face_direction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifact_name"] = reinterpret_cast<uint64_t>(&(df_structure->artifact_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["souls"] = reinterpret_cast<uint64_t>(&(df_structure->souls)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["current_soul"] = reinterpret_cast<uint64_t>(&(df_structure->current_soul)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["demands"] = reinterpret_cast<uint64_t>(&(df_structure->demands)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["labors"] = reinterpret_cast<uint64_t>(&(df_structure->labors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wrestle_items"] = reinterpret_cast<uint64_t>(&(df_structure->wrestle_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["observed_traps"] = reinterpret_cast<uint64_t>(&(df_structure->observed_traps)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["complaints"] = reinterpret_cast<uint64_t>(&(df_structure->complaints)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_138"] = reinterpret_cast<uint64_t>(&(df_structure->unk_138)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["requests"] = reinterpret_cast<uint64_t>(&(df_structure->requests)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["coin_debts"] = reinterpret_cast<uint64_t>(&(df_structure->coin_debts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adv_sleep_timer"] = reinterpret_cast<uint64_t>(&(df_structure->adv_sleep_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recent_job_area"] = reinterpret_cast<uint64_t>(&(df_structure->recent_job_area)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["recent_jobs"] = reinterpret_cast<uint64_t>(&(df_structure->recent_jobs)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_status2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_status2*>(p_df_structure);

	p_table["limbs_stand_max"] = reinterpret_cast<uint64_t>(&(df_structure->limbs_stand_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["limbs_stand_count"] = reinterpret_cast<uint64_t>(&(df_structure->limbs_stand_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["limbs_grasp_max"] = reinterpret_cast<uint64_t>(&(df_structure->limbs_grasp_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["limbs_grasp_count"] = reinterpret_cast<uint64_t>(&(df_structure->limbs_grasp_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["limbs_fly_max"] = reinterpret_cast<uint64_t>(&(df_structure->limbs_fly_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["limbs_fly_count"] = reinterpret_cast<uint64_t>(&(df_structure->limbs_fly_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_temperature"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_temperature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["add_path_flags"] = reinterpret_cast<uint64_t>(&(df_structure->add_path_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_type"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_depth"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_depth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7c0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7c0)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_unknown7_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_unknown7*>(p_df_structure);

	p_table["unk_7c4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7c4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_syndromes_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_syndromes*>(p_df_structure);

	p_table["active"] = reinterpret_cast<uint64_t>(&(df_structure->active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reinfection_type"] = reinterpret_cast<uint64_t>(&(df_structure->reinfection_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reinfection_count"] = reinterpret_cast<uint64_t>(&(df_structure->reinfection_count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_reports_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_reports*>(p_df_structure);

	p_table["log"] = reinterpret_cast<uint64_t>(&(df_structure->log)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_year"] = reinterpret_cast<uint64_t>(&(df_structure->last_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->last_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_undead_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_undead*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["root_body_part_id"] = reinterpret_cast<uint64_t>(&(df_structure->root_body_part_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["undead_name"] = reinterpret_cast<uint64_t>(&(df_structure->undead_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_witness_reports_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_witness_reports*>(p_df_structure);

	p_table["death_id"] = reinterpret_cast<uint64_t>(&(df_structure->death_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crime_id"] = reinterpret_cast<uint64_t>(&(df_structure->crime_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_unk_448__T_unk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_unk_448::T_unk*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_unk_448_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_unk_448*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_unk_44c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_unk_44c*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_unk_v40_sub3__T_unk_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_unk_v40_sub3::T_unk_2*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_unk_v40_sub3__T_unk_6_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_unk_v40_sub3::T_unk_6*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_unk_v40_sub3__T_unk_7__T_unk_sub1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_unk_v40_sub3::T_unk_7::T_unk_sub1*>(p_df_structure);

	p_table["unk_sub1_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_sub1_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_sub1_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_sub1_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_sub1_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_sub1_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_sub1_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_sub1_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_sub1_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_unk_v40_sub3__T_unk_7_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_unk_v40_sub3::T_unk_7*>(p_df_structure);

	p_table["unk_sub1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_sub1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy__T_unk_v40_sub3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy::T_unk_v40_sub3*>(p_df_structure);

	p_table["controller"] = reinterpret_cast<uint64_t>(&(df_structure->controller)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit__T_enemy_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit::T_enemy*>(p_df_structure);

	p_table["sound_cooldown"] = reinterpret_cast<uint64_t>(&(df_structure->sound_cooldown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["undead"] = reinterpret_cast<uint64_t>(&(df_structure->undead)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["were_race"] = reinterpret_cast<uint64_t>(&(df_structure->were_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["were_caste"] = reinterpret_cast<uint64_t>(&(df_structure->were_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["normal_race"] = reinterpret_cast<uint64_t>(&(df_structure->normal_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["normal_caste"] = reinterpret_cast<uint64_t>(&(df_structure->normal_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction"] = reinterpret_cast<uint64_t>(&(df_structure->interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appearances"] = reinterpret_cast<uint64_t>(&(df_structure->appearances)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["witness_reports"] = reinterpret_cast<uint64_t>(&(df_structure->witness_reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a5c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a5c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gait_index"] = reinterpret_cast<uint64_t>(&(df_structure->gait_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_unit_id_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_unit_id_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_unit_id_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_unit_id_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_unit_id_2_count"] = reinterpret_cast<uint64_t>(&(df_structure->unk_unit_id_2_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_448"] = reinterpret_cast<uint64_t>(&(df_structure->unk_448)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_450"] = reinterpret_cast<uint64_t>(&(df_structure->unk_450)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_454"] = reinterpret_cast<uint64_t>(&(df_structure->unk_454)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_controller_id"] = reinterpret_cast<uint64_t>(&(df_structure->army_controller_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_sub3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_sub3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["enemy_status_slot"] = reinterpret_cast<uint64_t>(&(df_structure->enemy_status_slot)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste_flags"] = reinterpret_cast<uint64_t>(&(df_structure->caste_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v4206_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v4206_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_874_cntr"] = reinterpret_cast<uint64_t>(&(df_structure->unk_874_cntr)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_878"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_878)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_888"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_888)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_relsize"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_relsize)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_8a8"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_8a8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_base_ins"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_base_ins)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_clothing_ins"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_clothing_ins)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part_8d8"] = reinterpret_cast<uint64_t>(&(df_structure->body_part_8d8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8f8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8f8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_unit_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::unit*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_profession"] = reinterpret_cast<uint64_t>(&(df_structure->custom_profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession2"] = reinterpret_cast<uint64_t>(&(df_structure->profession2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idle_area"] = reinterpret_cast<uint64_t>(&(df_structure->idle_area)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idle_area_threshold"] = reinterpret_cast<uint64_t>(&(df_structure->idle_area_threshold)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idle_area_type"] = reinterpret_cast<uint64_t>(&(df_structure->idle_area_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["follow_distance"] = reinterpret_cast<uint64_t>(&(df_structure->follow_distance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["path"] = reinterpret_cast<uint64_t>(&(df_structure->path)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags1"] = reinterpret_cast<uint64_t>(&(df_structure->flags1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags2"] = reinterpret_cast<uint64_t>(&(df_structure->flags2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags3"] = reinterpret_cast<uint64_t>(&(df_structure->flags3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags4"] = reinterpret_cast<uint64_t>(&(df_structure->flags4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meeting"] = reinterpret_cast<uint64_t>(&(df_structure->meeting)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sex"] = reinterpret_cast<uint64_t>(&(df_structure->sex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_100"] = reinterpret_cast<uint64_t>(&(df_structure->unk_100)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["training_level"] = reinterpret_cast<uint64_t>(&(df_structure->training_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["schedule_id"] = reinterpret_cast<uint64_t>(&(df_structure->schedule_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population_id"] = reinterpret_cast<uint64_t>(&(df_structure->population_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cultural_identity"] = reinterpret_cast<uint64_t>(&(df_structure->cultural_identity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["invasion_id"] = reinterpret_cast<uint64_t>(&(df_structure->invasion_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["patrol_route"] = reinterpret_cast<uint64_t>(&(df_structure->patrol_route)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["patrol_index"] = reinterpret_cast<uint64_t>(&(df_structure->patrol_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["specific_refs"] = reinterpret_cast<uint64_t>(&(df_structure->specific_refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["general_refs"] = reinterpret_cast<uint64_t>(&(df_structure->general_refs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["military"] = reinterpret_cast<uint64_t>(&(df_structure->military)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["social_activities"] = reinterpret_cast<uint64_t>(&(df_structure->social_activities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["conversations"] = reinterpret_cast<uint64_t>(&(df_structure->conversations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activities"] = reinterpret_cast<uint64_t>(&(df_structure->activities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animal"] = reinterpret_cast<uint64_t>(&(df_structure->animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["opponent"] = reinterpret_cast<uint64_t>(&(df_structure->opponent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mood"] = reinterpret_cast<uint64_t>(&(df_structure->mood)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pregnancy_timer"] = reinterpret_cast<uint64_t>(&(df_structure->pregnancy_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pregnancy_genes"] = reinterpret_cast<uint64_t>(&(df_structure->pregnancy_genes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pregnancy_caste"] = reinterpret_cast<uint64_t>(&(df_structure->pregnancy_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pregnancy_spouse"] = reinterpret_cast<uint64_t>(&(df_structure->pregnancy_spouse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mood_copy"] = reinterpret_cast<uint64_t>(&(df_structure->mood_copy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ghost_info"] = reinterpret_cast<uint64_t>(&(df_structure->ghost_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_year"] = reinterpret_cast<uint64_t>(&(df_structure->birth_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_time"] = reinterpret_cast<uint64_t>(&(df_structure->birth_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse_year"] = reinterpret_cast<uint64_t>(&(df_structure->curse_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse_time"] = reinterpret_cast<uint64_t>(&(df_structure->curse_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_year_bias"] = reinterpret_cast<uint64_t>(&(df_structure->birth_year_bias)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["birth_time_bias"] = reinterpret_cast<uint64_t>(&(df_structure->birth_time_bias)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_year"] = reinterpret_cast<uint64_t>(&(df_structure->old_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_time"] = reinterpret_cast<uint64_t>(&(df_structure->old_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["following"] = reinterpret_cast<uint64_t>(&(df_structure->following)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_238"] = reinterpret_cast<uint64_t>(&(df_structure->unk_238)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["relationship_ids"] = reinterpret_cast<uint64_t>(&(df_structure->relationship_ids)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mount_type"] = reinterpret_cast<uint64_t>(&(df_structure->mount_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_hit"] = reinterpret_cast<uint64_t>(&(df_structure->last_hit)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["riding_item_id"] = reinterpret_cast<uint64_t>(&(df_structure->riding_item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inventory"] = reinterpret_cast<uint64_t>(&(df_structure->inventory)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owned_items"] = reinterpret_cast<uint64_t>(&(df_structure->owned_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["traded_items"] = reinterpret_cast<uint64_t>(&(df_structure->traded_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owned_buildings"] = reinterpret_cast<uint64_t>(&(df_structure->owned_buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["corpse_parts"] = reinterpret_cast<uint64_t>(&(df_structure->corpse_parts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job"] = reinterpret_cast<uint64_t>(&(df_structure->job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body"] = reinterpret_cast<uint64_t>(&(df_structure->body)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["appearance"] = reinterpret_cast<uint64_t>(&(df_structure->appearance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["actions"] = reinterpret_cast<uint64_t>(&(df_structure->actions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_action_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_action_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["counters"] = reinterpret_cast<uint64_t>(&(df_structure->counters)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["curse"] = reinterpret_cast<uint64_t>(&(df_structure->curse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["counters2"] = reinterpret_cast<uint64_t>(&(df_structure->counters2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status"] = reinterpret_cast<uint64_t>(&(df_structure->status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hist_figure_id2"] = reinterpret_cast<uint64_t>(&(df_structure->hist_figure_id2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status2"] = reinterpret_cast<uint64_t>(&(df_structure->status2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown7"] = reinterpret_cast<uint64_t>(&(df_structure->unknown7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["syndromes"] = reinterpret_cast<uint64_t>(&(df_structure->syndromes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reports"] = reinterpret_cast<uint64_t>(&(df_structure->reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["health"] = reinterpret_cast<uint64_t>(&(df_structure->health)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["used_items"] = reinterpret_cast<uint64_t>(&(df_structure->used_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["enemy"] = reinterpret_cast<uint64_t>(&(df_structure->enemy)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["healing_rate"] = reinterpret_cast<uint64_t>(&(df_structure->healing_rate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effective_rate"] = reinterpret_cast<uint64_t>(&(df_structure->effective_rate)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tendons_heal"] = reinterpret_cast<uint64_t>(&(df_structure->tendons_heal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ligaments_heal"] = reinterpret_cast<uint64_t>(&(df_structure->ligaments_heal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weight"] = reinterpret_cast<uint64_t>(&(df_structure->weight)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weight_fraction"] = reinterpret_cast<uint64_t>(&(df_structure->weight_fraction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["burrows"] = reinterpret_cast<uint64_t>(&(df_structure->burrows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vision_cone"] = reinterpret_cast<uint64_t>(&(df_structure->vision_cone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occupations"] = reinterpret_cast<uint64_t>(&(df_structure->occupations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adjective"] = reinterpret_cast<uint64_t>(&(df_structure->adjective)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_vermin_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::vermin*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["visible"] = reinterpret_cast<uint64_t>(&(df_structure->visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["countdown"] = reinterpret_cast<uint64_t>(&(df_structure->countdown)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["amount"] = reinterpret_cast<uint64_t>(&(df_structure->amount)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population"] = reinterpret_cast<uint64_t>(&(df_structure->population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_viewscreen_unitlistst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::viewscreen_unitlistst*>(p_df_structure);

	p_table["allow_zoom"] = reinterpret_cast<uint64_t>(&(df_structure->allow_zoom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["page"] = reinterpret_cast<uint64_t>(&(df_structure->page)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_pos"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jobs"] = reinterpret_cast<uint64_t>(&(df_structure->jobs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_local_population_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::local_population*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plant"] = reinterpret_cast<uint64_t>(&(df_structure->plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quantity"] = reinterpret_cast<uint64_t>(&(df_structure->quantity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["quantity2"] = reinterpret_cast<uint64_t>(&(df_structure->quantity2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population"] = reinterpret_cast<uint64_t>(&(df_structure->population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wp_unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->wp_unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wp_unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->wp_unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wp_unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->wp_unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_population_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_population*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plant"] = reinterpret_cast<uint64_t>(&(df_structure->plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_min"] = reinterpret_cast<uint64_t>(&(df_structure->count_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_max"] = reinterpret_cast<uint64_t>(&(df_structure->count_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owner"] = reinterpret_cast<uint64_t>(&(df_structure->owner)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_landmass_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_landmass*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["area"] = reinterpret_cast<uint64_t>(&(df_structure->area)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_x"] = reinterpret_cast<uint64_t>(&(df_structure->min_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_x"] = reinterpret_cast<uint64_t>(&(df_structure->max_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_y"] = reinterpret_cast<uint64_t>(&(df_structure->min_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_y"] = reinterpret_cast<uint64_t>(&(df_structure->max_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_74"] = reinterpret_cast<uint64_t>(&(df_structure->unk_74)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_84"] = reinterpret_cast<uint64_t>(&(df_structure->unk_84)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_region_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_region*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_coords"] = reinterpret_cast<uint64_t>(&(df_structure->region_coords)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["size"] = reinterpret_cast<uint64_t>(&(df_structure->size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_98"] = reinterpret_cast<uint64_t>(&(df_structure->unk_98)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_9c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_9c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["population"] = reinterpret_cast<uint64_t>(&(df_structure->population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["biome_tile_counts"] = reinterpret_cast<uint64_t>(&(df_structure->biome_tile_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_biomes"] = reinterpret_cast<uint64_t>(&(df_structure->tree_biomes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_tiles_1"] = reinterpret_cast<uint64_t>(&(df_structure->tree_tiles_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_tiles_2"] = reinterpret_cast<uint64_t>(&(df_structure->tree_tiles_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_tiles_good"] = reinterpret_cast<uint64_t>(&(df_structure->tree_tiles_good)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_tiles_evil"] = reinterpret_cast<uint64_t>(&(df_structure->tree_tiles_evil)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_tiles_savage"] = reinterpret_cast<uint64_t>(&(df_structure->tree_tiles_savage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dead_percentage"] = reinterpret_cast<uint64_t>(&(df_structure->dead_percentage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reanimating"] = reinterpret_cast<uint64_t>(&(df_structure->reanimating)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["evil"] = reinterpret_cast<uint64_t>(&(df_structure->evil)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["good"] = reinterpret_cast<uint64_t>(&(df_structure->good)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lake_surface"] = reinterpret_cast<uint64_t>(&(df_structure->lake_surface)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["forces"] = reinterpret_cast<uint64_t>(&(df_structure->forces)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mid_x"] = reinterpret_cast<uint64_t>(&(df_structure->mid_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mid_y"] = reinterpret_cast<uint64_t>(&(df_structure->mid_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_x"] = reinterpret_cast<uint64_t>(&(df_structure->min_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_x"] = reinterpret_cast<uint64_t>(&(df_structure->max_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_y"] = reinterpret_cast<uint64_t>(&(df_structure->min_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_y"] = reinterpret_cast<uint64_t>(&(df_structure->max_y)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_underground_region_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_underground_region*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_depth"] = reinterpret_cast<uint64_t>(&(df_structure->layer_depth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_depth_p1a"] = reinterpret_cast<uint64_t>(&(df_structure->layer_depth_p1a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_depth_p1b"] = reinterpret_cast<uint64_t>(&(df_structure->layer_depth_p1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["water"] = reinterpret_cast<uint64_t>(&(df_structure->water)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["openness_min"] = reinterpret_cast<uint64_t>(&(df_structure->openness_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["openness_max"] = reinterpret_cast<uint64_t>(&(df_structure->openness_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["passage_density_min"] = reinterpret_cast<uint64_t>(&(df_structure->passage_density_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["passage_density_max"] = reinterpret_cast<uint64_t>(&(df_structure->passage_density_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_coords"] = reinterpret_cast<uint64_t>(&(df_structure->region_coords)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_min_z"] = reinterpret_cast<uint64_t>(&(df_structure->region_min_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_max_z"] = reinterpret_cast<uint64_t>(&(df_structure->region_max_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_init"] = reinterpret_cast<uint64_t>(&(df_structure->feature_init)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_river_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_river*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["path"] = reinterpret_cast<uint64_t>(&(df_structure->path)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flow"] = reinterpret_cast<uint64_t>(&(df_structure->flow)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["exit_tile"] = reinterpret_cast<uint64_t>(&(df_structure->exit_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation"] = reinterpret_cast<uint64_t>(&(df_structure->elevation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_pos"] = reinterpret_cast<uint64_t>(&(df_structure->end_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_geo_layer_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_geo_layer*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vein_mat"] = reinterpret_cast<uint64_t>(&(df_structure->vein_mat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vein_nested_in"] = reinterpret_cast<uint64_t>(&(df_structure->vein_nested_in)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vein_type"] = reinterpret_cast<uint64_t>(&(df_structure->vein_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vein_unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->vein_unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["top_height"] = reinterpret_cast<uint64_t>(&(df_structure->top_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bottom_height"] = reinterpret_cast<uint64_t>(&(df_structure->bottom_height)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_geo_biome_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_geo_biome*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layers"] = reinterpret_cast<uint64_t>(&(df_structure->layers)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_region_feature_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_region_feature*>(p_df_structure);

	p_table["feature_idx"] = reinterpret_cast<uint64_t>(&(df_structure->feature_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_tile_idx"] = reinterpret_cast<uint64_t>(&(df_structure->region_tile_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_z"] = reinterpret_cast<uint64_t>(&(df_structure->min_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_z"] = reinterpret_cast<uint64_t>(&(df_structure->max_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed"] = reinterpret_cast<uint64_t>(&(df_structure->seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["top_layer_idx"] = reinterpret_cast<uint64_t>(&(df_structure->top_layer_idx)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_region_details__T_edges_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_region_details::T_edges*>(p_df_structure);

	p_table["split_x"] = reinterpret_cast<uint64_t>(&(df_structure->split_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["split_y"] = reinterpret_cast<uint64_t>(&(df_structure->split_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["biome_corner"] = reinterpret_cast<uint64_t>(&(df_structure->biome_corner)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["biome_x"] = reinterpret_cast<uint64_t>(&(df_structure->biome_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["biome_y"] = reinterpret_cast<uint64_t>(&(df_structure->biome_y)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_region_details__T_rivers_vertical_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_region_details::T_rivers_vertical*>(p_df_structure);

	p_table["x_min"] = reinterpret_cast<uint64_t>(&(df_structure->x_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x_max"] = reinterpret_cast<uint64_t>(&(df_structure->x_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active"] = reinterpret_cast<uint64_t>(&(df_structure->active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation"] = reinterpret_cast<uint64_t>(&(df_structure->elevation)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_region_details__T_rivers_horizontal_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_region_details::T_rivers_horizontal*>(p_df_structure);

	p_table["y_min"] = reinterpret_cast<uint64_t>(&(df_structure->y_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y_max"] = reinterpret_cast<uint64_t>(&(df_structure->y_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active"] = reinterpret_cast<uint64_t>(&(df_structure->active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation"] = reinterpret_cast<uint64_t>(&(df_structure->elevation)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_region_details_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_region_details*>(p_df_structure);

	p_table["biome"] = reinterpret_cast<uint64_t>(&(df_structure->biome)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation"] = reinterpret_cast<uint64_t>(&(df_structure->elevation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed"] = reinterpret_cast<uint64_t>(&(df_structure->seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["edges"] = reinterpret_cast<uint64_t>(&(df_structure->edges)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk12e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk12e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rivers_vertical"] = reinterpret_cast<uint64_t>(&(df_structure->rivers_vertical)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rivers_horizontal"] = reinterpret_cast<uint64_t>(&(df_structure->rivers_horizontal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other_features"] = reinterpret_cast<uint64_t>(&(df_structure->other_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["features"] = reinterpret_cast<uint64_t>(&(df_structure->features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lava_stone"] = reinterpret_cast<uint64_t>(&(df_structure->lava_stone)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation2"] = reinterpret_cast<uint64_t>(&(df_structure->elevation2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["undef13"] = reinterpret_cast<uint64_t>(&(df_structure->undef13)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_region_map_entry_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::region_map_entry*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finder_rank"] = reinterpret_cast<uint64_t>(&(df_structure->finder_rank)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites"] = reinterpret_cast<uint64_t>(&(df_structure->sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation"] = reinterpret_cast<uint64_t>(&(df_structure->elevation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rainfall"] = reinterpret_cast<uint64_t>(&(df_structure->rainfall)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vegetation"] = reinterpret_cast<uint64_t>(&(df_structure->vegetation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature"] = reinterpret_cast<uint64_t>(&(df_structure->temperature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["evilness"] = reinterpret_cast<uint64_t>(&(df_structure->evilness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drainage"] = reinterpret_cast<uint64_t>(&(df_structure->drainage)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volcanism"] = reinterpret_cast<uint64_t>(&(df_structure->volcanism)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["savagery"] = reinterpret_cast<uint64_t>(&(df_structure->savagery)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["air_temp"] = reinterpret_cast<uint64_t>(&(df_structure->air_temp)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["air_x"] = reinterpret_cast<uint64_t>(&(df_structure->air_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["air_y"] = reinterpret_cast<uint64_t>(&(df_structure->air_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["clouds"] = reinterpret_cast<uint64_t>(&(df_structure->clouds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wind"] = reinterpret_cast<uint64_t>(&(df_structure->wind)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["snowfall"] = reinterpret_cast<uint64_t>(&(df_structure->snowfall)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["salinity"] = reinterpret_cast<uint64_t>(&(df_structure->salinity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_id"] = reinterpret_cast<uint64_t>(&(df_structure->region_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["landmass_id"] = reinterpret_cast<uint64_t>(&(df_structure->landmass_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["geo_index"] = reinterpret_cast<uint64_t>(&(df_structure->geo_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_claim_mask__T_map_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_claim_mask::T_map*>(p_df_structure);

	p_table["entities"] = reinterpret_cast<uint64_t>(&(df_structure->entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_masks"] = reinterpret_cast<uint64_t>(&(df_structure->region_masks)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_entity_claim_mask_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::entity_claim_mask*>(p_df_structure);

	p_table["map"] = reinterpret_cast<uint64_t>(&(df_structure->map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["width"] = reinterpret_cast<uint64_t>(&(df_structure->width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["height"] = reinterpret_cast<uint64_t>(&(df_structure->height)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_moving_party__T_members_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::moving_party::T_members*>(p_df_structure);

	p_table["nemesis_id"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hunger"] = reinterpret_cast<uint64_t>(&(df_structure->hunger)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thirst"] = reinterpret_cast<uint64_t>(&(df_structure->thirst)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sleepiness"] = reinterpret_cast<uint64_t>(&(df_structure->sleepiness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stored_fat"] = reinterpret_cast<uint64_t>(&(df_structure->stored_fat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_moving_party_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::moving_party*>(p_df_structure);

	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["members"] = reinterpret_cast<uint64_t>(&(df_structure->members)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_70"] = reinterpret_cast<uint64_t>(&(df_structure->unk_70)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_72"] = reinterpret_cast<uint64_t>(&(df_structure->unk_72)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_74"] = reinterpret_cast<uint64_t>(&(df_structure->unk_74)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_id"] = reinterpret_cast<uint64_t>(&(df_structure->region_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["beast_id"] = reinterpret_cast<uint64_t>(&(df_structure->beast_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_object_data__T_offloaded_items_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_object_data::T_offloaded_items*>(p_df_structure);

	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_x"] = reinterpret_cast<uint64_t>(&(df_structure->global_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_y"] = reinterpret_cast<uint64_t>(&(df_structure->global_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_z"] = reinterpret_cast<uint64_t>(&(df_structure->global_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["container"] = reinterpret_cast<uint64_t>(&(df_structure->container)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_object_data__T_offloaded_buildings_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_object_data::T_offloaded_buildings*>(p_df_structure);

	p_table["building"] = reinterpret_cast<uint64_t>(&(df_structure->building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_x"] = reinterpret_cast<uint64_t>(&(df_structure->global_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_y"] = reinterpret_cast<uint64_t>(&(df_structure->global_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_z"] = reinterpret_cast<uint64_t>(&(df_structure->global_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_object_data__T_unk_94_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_object_data::T_unk_94*>(p_df_structure);

	p_table["global_x"] = reinterpret_cast<uint64_t>(&(df_structure->global_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_y"] = reinterpret_cast<uint64_t>(&(df_structure->global_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_z"] = reinterpret_cast<uint64_t>(&(df_structure->global_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_object_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_object_data*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["altered_items"] = reinterpret_cast<uint64_t>(&(df_structure->altered_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["offloaded_items"] = reinterpret_cast<uint64_t>(&(df_structure->offloaded_items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_54"] = reinterpret_cast<uint64_t>(&(df_structure->unk_54)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_64"] = reinterpret_cast<uint64_t>(&(df_structure->unk_64)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["altered_buildings"] = reinterpret_cast<uint64_t>(&(df_structure->altered_buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["offloaded_buildings"] = reinterpret_cast<uint64_t>(&(df_structure->offloaded_buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_94"] = reinterpret_cast<uint64_t>(&(df_structure->unk_94)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creation_zone_alterations"] = reinterpret_cast<uint64_t>(&(df_structure->creation_zone_alterations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_d0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_d0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_e0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_e0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_f0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_f0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_100"] = reinterpret_cast<uint64_t>(&(df_structure->unk_100)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_110"] = reinterpret_cast<uint64_t>(&(df_structure->unk_110)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_unk_b4_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_unk_b4*>(p_df_structure);

	p_table["world_width2"] = reinterpret_cast<uint64_t>(&(df_structure->world_width2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_height2"] = reinterpret_cast<uint64_t>(&(df_structure->world_height2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_constructions_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_constructions*>(p_df_structure);

	p_table["width"] = reinterpret_cast<uint64_t>(&(df_structure->width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["height"] = reinterpret_cast<uint64_t>(&(df_structure->height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map"] = reinterpret_cast<uint64_t>(&(df_structure->map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_unk_150__T_unk_8_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_unk_150::T_unk_8*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_unk_150__T_unk_18_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_unk_150::T_unk_18*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_unk_150__T_unk_28_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_unk_150::T_unk_28*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_unk_150_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_unk_150*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_field_battles__T_sapient_deaths_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_field_battles::T_sapient_deaths*>(p_df_structure);

	p_table["deaths"] = reinterpret_cast<uint64_t>(&(df_structure->deaths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squad"] = reinterpret_cast<uint64_t>(&(df_structure->squad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year"] = reinterpret_cast<uint64_t>(&(df_structure->end_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_field_battles_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_field_battles*>(p_df_structure);

	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sapient_deaths"] = reinterpret_cast<uint64_t>(&(df_structure->sapient_deaths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hfs_killed"] = reinterpret_cast<uint64_t>(&(df_structure->hfs_killed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x1"] = reinterpret_cast<uint64_t>(&(df_structure->x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y1"] = reinterpret_cast<uint64_t>(&(df_structure->y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x2"] = reinterpret_cast<uint64_t>(&(df_structure->x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y2"] = reinterpret_cast<uint64_t>(&(df_structure->y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_collections"] = reinterpret_cast<uint64_t>(&(df_structure->event_collections)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_freakish_weather_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_freakish_weather*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_x"] = reinterpret_cast<uint64_t>(&(df_structure->region_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_y"] = reinterpret_cast<uint64_t>(&(df_structure->region_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_mountain_peaks_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_mountain_peaks*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["height"] = reinterpret_cast<uint64_t>(&(df_structure->height)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_feature_map__T_features_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_feature_map::T_features*>(p_df_structure);

	p_table["feature_init"] = reinterpret_cast<uint64_t>(&(df_structure->feature_init)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_feature_map_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_feature_map*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["features"] = reinterpret_cast<uint64_t>(&(df_structure->features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_unk_274__T_unk_10_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_unk_274::T_unk_10*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_unk_274_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_unk_274*>(p_df_structure);

	p_table["members"] = reinterpret_cast<uint64_t>(&(df_structure->members)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_region_name"] = reinterpret_cast<uint64_t>(&(df_structure->unk_region_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data__T_unk_482f8_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data::T_unk_482f8*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_data*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_site_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_site_unk136_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_site_unk136_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_resource_allotment_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_resource_allotment_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_unk_150_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_unk_150_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_unk_170_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_unk_170_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_width"] = reinterpret_cast<uint64_t>(&(df_structure->world_width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_height"] = reinterpret_cast<uint64_t>(&(df_structure->world_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_78"] = reinterpret_cast<uint64_t>(&(df_structure->unk_78)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["moon_phase"] = reinterpret_cast<uint64_t>(&(df_structure->moon_phase)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flip_latitude"] = reinterpret_cast<uint64_t>(&(df_structure->flip_latitude)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flip_longitude"] = reinterpret_cast<uint64_t>(&(df_structure->flip_longitude)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_84"] = reinterpret_cast<uint64_t>(&(df_structure->unk_84)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_86"] = reinterpret_cast<uint64_t>(&(df_structure->unk_86)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_88"] = reinterpret_cast<uint64_t>(&(df_structure->unk_88)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_b4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_b4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_details"] = reinterpret_cast<uint64_t>(&(df_structure->region_details)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adv_region_x"] = reinterpret_cast<uint64_t>(&(df_structure->adv_region_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adv_region_y"] = reinterpret_cast<uint64_t>(&(df_structure->adv_region_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adv_emb_x"] = reinterpret_cast<uint64_t>(&(df_structure->adv_emb_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["adv_emb_y"] = reinterpret_cast<uint64_t>(&(df_structure->adv_emb_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_x1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_x1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_y1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_y1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_x2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_x2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_y2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_y2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["constructions"] = reinterpret_cast<uint64_t>(&(df_structure->constructions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_claims1"] = reinterpret_cast<uint64_t>(&(df_structure->entity_claims1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_claims2"] = reinterpret_cast<uint64_t>(&(df_structure->entity_claims2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites"] = reinterpret_cast<uint64_t>(&(df_structure->sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_unk130"] = reinterpret_cast<uint64_t>(&(df_structure->site_unk130)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["resource_allotments"] = reinterpret_cast<uint64_t>(&(df_structure->resource_allotments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_150"] = reinterpret_cast<uint64_t>(&(df_structure->unk_150)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["field_battles"] = reinterpret_cast<uint64_t>(&(df_structure->field_battles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["freakish_weather"] = reinterpret_cast<uint64_t>(&(df_structure->freakish_weather)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["object_data"] = reinterpret_cast<uint64_t>(&(df_structure->object_data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["landmasses"] = reinterpret_cast<uint64_t>(&(df_structure->landmasses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["regions"] = reinterpret_cast<uint64_t>(&(df_structure->regions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["underground_regions"] = reinterpret_cast<uint64_t>(&(df_structure->underground_regions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["geo_biomes"] = reinterpret_cast<uint64_t>(&(df_structure->geo_biomes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mountain_peaks"] = reinterpret_cast<uint64_t>(&(df_structure->mountain_peaks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rivers"] = reinterpret_cast<uint64_t>(&(df_structure->rivers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_map"] = reinterpret_cast<uint64_t>(&(df_structure->region_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_notes"] = reinterpret_cast<uint64_t>(&(df_structure->embark_notes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1dc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1dc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1ec"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1ec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1f0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1f0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active_site"] = reinterpret_cast<uint64_t>(&(df_structure->active_site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_map"] = reinterpret_cast<uint64_t>(&(df_structure->feature_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_sites"] = reinterpret_cast<uint64_t>(&(df_structure->old_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_site_x"] = reinterpret_cast<uint64_t>(&(df_structure->old_site_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["old_site_y"] = reinterpret_cast<uint64_t>(&(df_structure->old_site_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["land_rgns"] = reinterpret_cast<uint64_t>(&(df_structure->land_rgns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_260"] = reinterpret_cast<uint64_t>(&(df_structure->unk_260)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_264"] = reinterpret_cast<uint64_t>(&(df_structure->unk_264)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_268"] = reinterpret_cast<uint64_t>(&(df_structure->unk_268)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_270"] = reinterpret_cast<uint64_t>(&(df_structure->unk_270)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_274"] = reinterpret_cast<uint64_t>(&(df_structure->unk_274)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_482f8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_482f8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_reputation_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_reputation_info*>(p_df_structure);

	p_table["reports"] = reinterpret_cast<uint64_t>(&(df_structure->reports)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_location_scribe_jobs_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::location_scribe_jobs*>(p_df_structure);

	p_table["scribejobs"] = reinterpret_cast<uint64_t>(&(df_structure->scribejobs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nextidmaybe"] = reinterpret_cast<uint64_t>(&(df_structure->nextidmaybe)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_unk__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_unk::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_unk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_unk*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfigs"] = reinterpret_cast<uint64_t>(&(df_structure->histfigs)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_contents_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_contents*>(p_df_structure);

	p_table["unk_e4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_e4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession"] = reinterpret_cast<uint64_t>(&(df_structure->profession)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_goblets"] = reinterpret_cast<uint64_t>(&(df_structure->desired_goblets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_instruments"] = reinterpret_cast<uint64_t>(&(df_structure->desired_instruments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_paper"] = reinterpret_cast<uint64_t>(&(df_structure->desired_paper)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["desired_copies"] = reinterpret_cast<uint64_t>(&(df_structure->desired_copies)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_tier"] = reinterpret_cast<uint64_t>(&(df_structure->location_tier)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["location_value"] = reinterpret_cast<uint64_t>(&(df_structure->location_value)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_goblets"] = reinterpret_cast<uint64_t>(&(df_structure->count_goblets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_instruments"] = reinterpret_cast<uint64_t>(&(df_structure->count_instruments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count_paper"] = reinterpret_cast<uint64_t>(&(df_structure->count_paper)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_ids"] = reinterpret_cast<uint64_t>(&(df_structure->building_ids)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building__T_inhabitants_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building::T_inhabitants*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["histfig_id"] = reinterpret_cast<uint64_t>(&(df_structure->histfig_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building__T_unk1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building::T_unk1*>(p_df_structure);

	p_table["hfig"] = reinterpret_cast<uint64_t>(&(df_structure->hfig)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inhabitants"] = reinterpret_cast<uint64_t>(&(df_structure->inhabitants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_owner_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_owner_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["scribeinfo"] = reinterpret_cast<uint64_t>(&(df_structure->scribeinfo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reputation_reports"] = reinterpret_cast<uint64_t>(&(df_structure->reputation_reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occupations"] = reinterpret_cast<uint64_t>(&(df_structure->occupations)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_keepst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_keepst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_templest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_templest*>(p_df_structure);

	p_table["deity_type"] = reinterpret_cast<uint64_t>(&(df_structure->deity_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deity_data"] = reinterpret_cast<uint64_t>(&(df_structure->deity_data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contents"] = reinterpret_cast<uint64_t>(&(df_structure->contents)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_dark_towerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_dark_towerst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_marketst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_marketst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_tombst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_tombst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_dungeonst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_dungeonst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dungeon_type"] = reinterpret_cast<uint64_t>(&(df_structure->dungeon_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_underworld_spirest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_underworld_spirest*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_bc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_bc)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_inn_tavernst__T_room_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_inn_tavernst::T_room_info*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_x"] = reinterpret_cast<uint64_t>(&(df_structure->world_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_y"] = reinterpret_cast<uint64_t>(&(df_structure->world_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_z"] = reinterpret_cast<uint64_t>(&(df_structure->world_z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_inn_tavernst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_inn_tavernst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contents"] = reinterpret_cast<uint64_t>(&(df_structure->contents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["room_info"] = reinterpret_cast<uint64_t>(&(df_structure->room_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_room_info_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_room_info_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_libraryst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_libraryst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contents"] = reinterpret_cast<uint64_t>(&(df_structure->contents)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_counting_housest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_counting_housest*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_guildhallst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_guildhallst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["contents"] = reinterpret_cast<uint64_t>(&(df_structure->contents)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_towerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_towerst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_1__T_units_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_1::T_units*>(p_df_structure);

	p_table["unit_id"] = reinterpret_cast<uint64_t>(&(df_structure->unit_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_x"] = reinterpret_cast<uint64_t>(&(df_structure->pos_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_y"] = reinterpret_cast<uint64_t>(&(df_structure->pos_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_z"] = reinterpret_cast<uint64_t>(&(df_structure->pos_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_1*>(p_df_structure);

	p_table["nemesis"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->artifacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["animals"] = reinterpret_cast<uint64_t>(&(df_structure->animals)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inhabitants"] = reinterpret_cast<uint64_t>(&(df_structure->inhabitants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_d4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_d4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1e"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1e)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1f"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1f)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1g"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1g)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1h"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1h)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_118_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_118*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_13c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_13c*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v40_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v40_2*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_30)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v47_1__T_unk_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v47_1::T_unk_1*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v47_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v47_1*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["count"] = reinterpret_cast<uint64_t>(&(df_structure->count)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_subtype_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_subtype_info*>(p_df_structure);

	p_table["fortress_type"] = reinterpret_cast<uint64_t>(&(df_structure->fortress_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["monument_type"] = reinterpret_cast<uint64_t>(&(df_structure->monument_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lair_type"] = reinterpret_cast<uint64_t>(&(df_structure->lair_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_night_creature_lair"] = reinterpret_cast<uint64_t>(&(df_structure->unk_night_creature_lair)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creator"] = reinterpret_cast<uint64_t>(&(df_structure->creator)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_vault"] = reinterpret_cast<uint64_t>(&(df_structure->unk_vault)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tower_seed"] = reinterpret_cast<uint64_t>(&(df_structure->tower_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_monastery"] = reinterpret_cast<uint64_t>(&(df_structure->unk_monastery)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["founding_entity"] = reinterpret_cast<uint64_t>(&(df_structure->founding_entity)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_21c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_21c*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v40_4a_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v40_4a*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v40_4b_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v40_4b*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v40_4c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v40_4c*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v40_4d__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v40_4d::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v40_4d_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v40_4d*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_id"] = reinterpret_cast<uint64_t>(&(df_structure->entity_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_v43_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_v43_2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_188__T_unk1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_188::T_unk1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hfid"] = reinterpret_cast<uint64_t>(&(df_structure->hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site__T_unk_188_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site::T_unk_188*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_owner_id"] = reinterpret_cast<uint64_t>(&(df_structure->cur_owner_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rgn_min_x"] = reinterpret_cast<uint64_t>(&(df_structure->rgn_min_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rgn_max_x"] = reinterpret_cast<uint64_t>(&(df_structure->rgn_max_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rgn_min_y"] = reinterpret_cast<uint64_t>(&(df_structure->rgn_min_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rgn_max_y"] = reinterpret_cast<uint64_t>(&(df_structure->rgn_max_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rgn_min_z"] = reinterpret_cast<uint64_t>(&(df_structure->rgn_min_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rgn_max_z"] = reinterpret_cast<uint64_t>(&(df_structure->rgn_max_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_min_x"] = reinterpret_cast<uint64_t>(&(df_structure->global_min_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_min_y"] = reinterpret_cast<uint64_t>(&(df_structure->global_min_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_max_x"] = reinterpret_cast<uint64_t>(&(df_structure->global_max_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_max_y"] = reinterpret_cast<uint64_t>(&(df_structure->global_max_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed1"] = reinterpret_cast<uint64_t>(&(df_structure->seed1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed2"] = reinterpret_cast<uint64_t>(&(df_structure->seed2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["resident_count"] = reinterpret_cast<uint64_t>(&(df_structure->resident_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_110"] = reinterpret_cast<uint64_t>(&(df_structure->unk_110)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_114"] = reinterpret_cast<uint64_t>(&(df_structure->unk_114)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_118"] = reinterpret_cast<uint64_t>(&(df_structure->unk_118)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_11c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_11c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_120"] = reinterpret_cast<uint64_t>(&(df_structure->unk_120)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_124"] = reinterpret_cast<uint64_t>(&(df_structure->unk_124)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_128"] = reinterpret_cast<uint64_t>(&(df_structure->unk_128)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_13c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_13c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildings"] = reinterpret_cast<uint64_t>(&(df_structure->buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_building_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["property_ownership"] = reinterpret_cast<uint64_t>(&(df_structure->property_ownership)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_property_ownership_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_property_ownership_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["created_tick"] = reinterpret_cast<uint64_t>(&(df_structure->created_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["created_year"] = reinterpret_cast<uint64_t>(&(df_structure->created_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_170"] = reinterpret_cast<uint64_t>(&(df_structure->unk_170)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_174"] = reinterpret_cast<uint64_t>(&(df_structure->unk_174)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_178"] = reinterpret_cast<uint64_t>(&(df_structure->unk_178)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["realization"] = reinterpret_cast<uint64_t>(&(df_structure->realization)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subtype_info"] = reinterpret_cast<uint64_t>(&(df_structure->subtype_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_21c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_21c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deaths"] = reinterpret_cast<uint64_t>(&(df_structure->deaths)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_mountain_halls"] = reinterpret_cast<uint64_t>(&(df_structure->is_mountain_halls)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["is_fortress"] = reinterpret_cast<uint64_t>(&(df_structure->is_fortress)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4d_next_id"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4d_next_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_188"] = reinterpret_cast<uint64_t>(&(df_structure->unk_188)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3a8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3a8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_3b0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_3b0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_19c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_19c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_links"] = reinterpret_cast<uint64_t>(&(df_structure->entity_links)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cultural_identities"] = reinterpret_cast<uint64_t>(&(df_structure->cultural_identities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v42_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v42_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v43_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v43_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_23"] = reinterpret_cast<uint64_t>(&(df_structure->anon_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_24"] = reinterpret_cast<uint64_t>(&(df_structure->anon_24)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_cultural_identity__T_group_log_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::cultural_identity::T_group_log*>(p_df_structure);

	p_table["group_id"] = reinterpret_cast<uint64_t>(&(df_structure->group_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_year"] = reinterpret_cast<uint64_t>(&(df_structure->start_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_tick"] = reinterpret_cast<uint64_t>(&(df_structure->start_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year"] = reinterpret_cast<uint64_t>(&(df_structure->end_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_tick"] = reinterpret_cast<uint64_t>(&(df_structure->end_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["join_type"] = reinterpret_cast<uint64_t>(&(df_structure->join_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_24"] = reinterpret_cast<uint64_t>(&(df_structure->unk_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_cultural_identity__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::cultural_identity::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_cultural_identity__T_anon_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::cultural_identity::T_anon_2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_cultural_identity_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::cultural_identity*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_id"] = reinterpret_cast<uint64_t>(&(df_structure->site_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_id"] = reinterpret_cast<uint64_t>(&(df_structure->civ_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["group_log"] = reinterpret_cast<uint64_t>(&(df_structure->group_log)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ethic"] = reinterpret_cast<uint64_t>(&(df_structure->ethic)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["values"] = reinterpret_cast<uint64_t>(&(df_structure->values)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["events"] = reinterpret_cast<uint64_t>(&(df_structure->events)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_d8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_d8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_dc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_dc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_ec"] = reinterpret_cast<uint64_t>(&(df_structure->unk_ec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_f0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_f0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_f4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_f4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_f8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_f8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_crossroads_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_crossroads*>(p_df_structure);

	p_table["road_min_y"] = reinterpret_cast<uint64_t>(&(df_structure->road_min_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["road_max_y"] = reinterpret_cast<uint64_t>(&(df_structure->road_max_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["road_min_x"] = reinterpret_cast<uint64_t>(&(df_structure->road_min_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["road_max_x"] = reinterpret_cast<uint64_t>(&(df_structure->road_max_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_x"] = reinterpret_cast<uint64_t>(&(df_structure->idx_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["idx_y"] = reinterpret_cast<uint64_t>(&(df_structure->idx_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_width"] = reinterpret_cast<uint64_t>(&(df_structure->tile_width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tile_height"] = reinterpret_cast<uint64_t>(&(df_structure->tile_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_310"] = reinterpret_cast<uint64_t>(&(df_structure->unk_310)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_314"] = reinterpret_cast<uint64_t>(&(df_structure->unk_314)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_318"] = reinterpret_cast<uint64_t>(&(df_structure->unk_318)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_31c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_31c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_320"] = reinterpret_cast<uint64_t>(&(df_structure->unk_320)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_324"] = reinterpret_cast<uint64_t>(&(df_structure->unk_324)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_328"] = reinterpret_cast<uint64_t>(&(df_structure->unk_328)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_32c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_32c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["center_x_tile"] = reinterpret_cast<uint64_t>(&(df_structure->center_x_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["center_y_tile"] = reinterpret_cast<uint64_t>(&(df_structure->center_y_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["up"] = reinterpret_cast<uint64_t>(&(df_structure->up)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["down"] = reinterpret_cast<uint64_t>(&(df_structure->down)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["right"] = reinterpret_cast<uint64_t>(&(df_structure->right)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["left"] = reinterpret_cast<uint64_t>(&(df_structure->left)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_348"] = reinterpret_cast<uint64_t>(&(df_structure->unk_348)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_349"] = reinterpret_cast<uint64_t>(&(df_structure->unk_349)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_34c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_34c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_356"] = reinterpret_cast<uint64_t>(&(df_structure->unk_356)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_building_item_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_building_item*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_type"] = reinterpret_cast<uint64_t>(&(df_structure->mat_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_index"] = reinterpret_cast<uint64_t>(&(df_structure->mat_index)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_abstract_building_mead_hallst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::abstract_building_mead_hallst*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item1"] = reinterpret_cast<uint64_t>(&(df_structure->item1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item2"] = reinterpret_cast<uint64_t>(&(df_structure->item2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building__T_unk_4c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building::T_unk_4c*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owner"] = reinterpret_cast<uint64_t>(&(df_structure->owner)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_x"] = reinterpret_cast<uint64_t>(&(df_structure->min_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_y"] = reinterpret_cast<uint64_t>(&(df_structure->min_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_x"] = reinterpret_cast<uint64_t>(&(df_structure->max_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_y"] = reinterpret_cast<uint64_t>(&(df_structure->max_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["inhabitants"] = reinterpret_cast<uint64_t>(&(df_structure->inhabitants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["abstract_building_id"] = reinterpret_cast<uint64_t>(&(df_structure->abstract_building_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_info"] = reinterpret_cast<uint64_t>(&(df_structure->building_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_60"] = reinterpret_cast<uint64_t>(&(df_structure->unk_60)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_realization__T_river_map_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_realization::T_river_map*>(p_df_structure);

	p_table["start"] = reinterpret_cast<uint64_t>(&(df_structure->start)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end"] = reinterpret_cast<uint64_t>(&(df_structure->end)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_180"] = reinterpret_cast<uint64_t>(&(df_structure->unk_180)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_184"] = reinterpret_cast<uint64_t>(&(df_structure->unk_184)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_array_limits"] = reinterpret_cast<uint64_t>(&(df_structure->start_array_limits)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_array_limits"] = reinterpret_cast<uint64_t>(&(df_structure->end_array_limits)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_realization__T_unk_55e8__T_unk_v40_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_realization::T_unk_55e8::T_unk_v40_2*>(p_df_structure);

	p_table["unk_0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_16"] = reinterpret_cast<uint64_t>(&(df_structure->unk_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_realization__T_unk_55e8_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_realization::T_unk_55e8*>(p_df_structure);

	p_table["unk_55e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55ec"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55ec)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55f0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55f0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55f4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55f4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55f8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55f8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55fa"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55fa)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55fc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55fc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5600"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5600)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5604"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5604)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5608"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5608)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_560c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_560c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5610"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5610)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5614"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5614)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5618"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5618)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5628"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5628)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_562c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_562c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5630"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5630)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5634"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5634)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3d)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_realization__T_building_map_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_realization::T_building_map*>(p_df_structure);

	p_table["unk0"] = reinterpret_cast<uint64_t>(&(df_structure->unk0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildings"] = reinterpret_cast<uint64_t>(&(df_structure->buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_realization__T_areas_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_realization::T_areas*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["index"] = reinterpret_cast<uint64_t>(&(df_structure->index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_x"] = reinterpret_cast<uint64_t>(&(df_structure->min_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_x"] = reinterpret_cast<uint64_t>(&(df_structure->max_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["min_y"] = reinterpret_cast<uint64_t>(&(df_structure->min_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["max_y"] = reinterpret_cast<uint64_t>(&(df_structure->max_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_realization__T_unk_193bc__T_unk_8_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_realization::T_unk_193bc::T_unk_8*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_realization__T_unk_193bc_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_realization::T_unk_193bc*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_site_realization_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_site_realization*>(p_df_structure);

	p_table["buildings"] = reinterpret_cast<uint64_t>(&(df_structure->buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_buildings"] = reinterpret_cast<uint64_t>(&(df_structure->num_buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_14"] = reinterpret_cast<uint64_t>(&(df_structure->unk_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_areas"] = reinterpret_cast<uint64_t>(&(df_structure->num_areas)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mini_rivers"] = reinterpret_cast<uint64_t>(&(df_structure->mini_rivers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mini_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->mini_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mini_colors"] = reinterpret_cast<uint64_t>(&(df_structure->mini_colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["road_map"] = reinterpret_cast<uint64_t>(&(df_structure->road_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["river_map"] = reinterpret_cast<uint64_t>(&(df_structure->river_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_55e8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_55e8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_map"] = reinterpret_cast<uint64_t>(&(df_structure->building_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags_map"] = reinterpret_cast<uint64_t>(&(df_structure->flags_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["zoom_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->zoom_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["zoom_colors"] = reinterpret_cast<uint64_t>(&(df_structure->zoom_colors)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["zoom_movemask"] = reinterpret_cast<uint64_t>(&(df_structure->zoom_movemask)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["area_map"] = reinterpret_cast<uint64_t>(&(df_structure->area_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["areas"] = reinterpret_cast<uint64_t>(&(df_structure->areas)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_controller_pos_x"] = reinterpret_cast<uint64_t>(&(df_structure->army_controller_pos_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_controller_pos_y"] = reinterpret_cast<uint64_t>(&(df_structure->army_controller_pos_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_193bc"] = reinterpret_cast<uint64_t>(&(df_structure->unk_193bc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_unk_193bc"] = reinterpret_cast<uint64_t>(&(df_structure->num_unk_193bc)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_well"] = reinterpret_cast<uint64_t>(&(df_structure->building_well)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_building_well"] = reinterpret_cast<uint64_t>(&(df_structure->num_building_well)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_temple"] = reinterpret_cast<uint64_t>(&(df_structure->building_temple)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_building_temple"] = reinterpret_cast<uint64_t>(&(df_structure->num_building_temple)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_type22"] = reinterpret_cast<uint64_t>(&(df_structure->building_type22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_building_type22"] = reinterpret_cast<uint64_t>(&(df_structure->num_building_type22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_type21"] = reinterpret_cast<uint64_t>(&(df_structure->building_type21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_building_type21"] = reinterpret_cast<uint64_t>(&(df_structure->num_building_type21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_wsr_vector"] = reinterpret_cast<uint64_t>(&(df_structure->unk_wsr_vector)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_info_castle_wallst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_castle_wallst*>(p_df_structure);

	p_table["length"] = reinterpret_cast<uint64_t>(&(df_structure->length)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["door_pos"] = reinterpret_cast<uint64_t>(&(df_structure->door_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_x"] = reinterpret_cast<uint64_t>(&(df_structure->start_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_y"] = reinterpret_cast<uint64_t>(&(df_structure->start_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_z"] = reinterpret_cast<uint64_t>(&(df_structure->start_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_x"] = reinterpret_cast<uint64_t>(&(df_structure->end_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_y"] = reinterpret_cast<uint64_t>(&(df_structure->end_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_z"] = reinterpret_cast<uint64_t>(&(df_structure->end_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wall_item"] = reinterpret_cast<uint64_t>(&(df_structure->wall_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["door_item"] = reinterpret_cast<uint64_t>(&(df_structure->door_item)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_info_castle_towerst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_castle_towerst*>(p_df_structure);

	p_table["roof_z"] = reinterpret_cast<uint64_t>(&(df_structure->roof_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["base_z"] = reinterpret_cast<uint64_t>(&(df_structure->base_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["door_n_elevation"] = reinterpret_cast<uint64_t>(&(df_structure->door_n_elevation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["door_s_elevation"] = reinterpret_cast<uint64_t>(&(df_structure->door_s_elevation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["door_e_elevation"] = reinterpret_cast<uint64_t>(&(df_structure->door_e_elevation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["door_w_elevation"] = reinterpret_cast<uint64_t>(&(df_structure->door_w_elevation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["door_item"] = reinterpret_cast<uint64_t>(&(df_structure->door_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wall_item"] = reinterpret_cast<uint64_t>(&(df_structure->wall_item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shape"] = reinterpret_cast<uint64_t>(&(df_structure->shape)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_40"] = reinterpret_cast<uint64_t>(&(df_structure->unk_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_44"] = reinterpret_cast<uint64_t>(&(df_structure->unk_44)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_info_shop_housest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_shop_housest*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_info_market_squarest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_market_squarest*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_info_trenchesst__T_spokes_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_trenchesst::T_spokes*>(p_df_structure);

	p_table["mound_min"] = reinterpret_cast<uint64_t>(&(df_structure->mound_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trench_min"] = reinterpret_cast<uint64_t>(&(df_structure->trench_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["trench_max"] = reinterpret_cast<uint64_t>(&(df_structure->trench_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mound_max"] = reinterpret_cast<uint64_t>(&(df_structure->mound_max)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_info_trenchesst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_trenchesst*>(p_df_structure);

	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spokes"] = reinterpret_cast<uint64_t>(&(df_structure->spokes)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_info_tree_housest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_tree_housest*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_site_realization_building_info_hillock_housest_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::site_realization_building_info_hillock_housest*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creation_zone_pwg_alteration_location_deathst__T_unk_1__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creation_zone_pwg_alteration_location_deathst::T_unk_1::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creation_zone_pwg_alteration_location_deathst__T_unk_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creation_zone_pwg_alteration_location_deathst::T_unk_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_creation_zone_pwg_alteration_location_deathst_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::creation_zone_pwg_alteration_location_deathst*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident__T_data_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident::T_data*>(p_df_structure);

	p_table["t6_performance"] = reinterpret_cast<uint64_t>(&(df_structure->t6_performance)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t7"] = reinterpret_cast<uint64_t>(&(df_structure->t7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t8"] = reinterpret_cast<uint64_t>(&(df_structure->t8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t9"] = reinterpret_cast<uint64_t>(&(df_structure->t9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["t10"] = reinterpret_cast<uint64_t>(&(df_structure->t10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["witnesses"] = reinterpret_cast<uint64_t>(&(df_structure->witnesses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_year"] = reinterpret_cast<uint64_t>(&(df_structure->unk_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->unk_year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim"] = reinterpret_cast<uint64_t>(&(df_structure->victim)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_hf"] = reinterpret_cast<uint64_t>(&(df_structure->victim_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_race"] = reinterpret_cast<uint64_t>(&(df_structure->victim_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_caste"] = reinterpret_cast<uint64_t>(&(df_structure->victim_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killer"] = reinterpret_cast<uint64_t>(&(df_structure->killer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killer_hf"] = reinterpret_cast<uint64_t>(&(df_structure->killer_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killer_race"] = reinterpret_cast<uint64_t>(&(df_structure->killer_race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["killer_caste"] = reinterpret_cast<uint64_t>(&(df_structure->killer_caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity1"] = reinterpret_cast<uint64_t>(&(df_structure->entity1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crime_id"] = reinterpret_cast<uint64_t>(&(df_structure->crime_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_year"] = reinterpret_cast<uint64_t>(&(df_structure->event_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_time"] = reinterpret_cast<uint64_t>(&(df_structure->event_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["death_cause"] = reinterpret_cast<uint64_t>(&(df_structure->death_cause)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["conflict_level"] = reinterpret_cast<uint64_t>(&(df_structure->conflict_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activity_id"] = reinterpret_cast<uint64_t>(&(df_structure->activity_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_x"] = reinterpret_cast<uint64_t>(&(df_structure->world_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_y"] = reinterpret_cast<uint64_t>(&(df_structure->world_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_z"] = reinterpret_cast<uint64_t>(&(df_structure->world_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_80"] = reinterpret_cast<uint64_t>(&(df_structure->unk_80)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["data"] = reinterpret_cast<uint64_t>(&(df_structure->data)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident_sub6_performance__T_participants_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident_sub6_performance::T_participants*>(p_df_structure);

	p_table["performance_event"] = reinterpret_cast<uint64_t>(&(df_structure->performance_event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["role_index"] = reinterpret_cast<uint64_t>(&(df_structure->role_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident_sub6_performance_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident_sub6_performance*>(p_df_structure);

	p_table["performance_event"] = reinterpret_cast<uint64_t>(&(df_structure->performance_event)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["participants"] = reinterpret_cast<uint64_t>(&(df_structure->participants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reference_id"] = reinterpret_cast<uint64_t>(&(df_structure->reference_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["written_content_id"] = reinterpret_cast<uint64_t>(&(df_structure->written_content_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["poetic_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->poetic_form_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["musical_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->musical_form_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dance_form_id"] = reinterpret_cast<uint64_t>(&(df_structure->dance_form_id)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident_sub7_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident_sub7*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident_sub8_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident_sub8*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident_sub9_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident_sub9*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_incident_sub10_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::incident_sub10*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_crime__T_punishment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::crime::T_punishment*>(p_df_structure);

	p_table["hammerstrikes"] = reinterpret_cast<uint64_t>(&(df_structure->hammerstrikes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["prison_time"] = reinterpret_cast<uint64_t>(&(df_structure->prison_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["give_beating"] = reinterpret_cast<uint64_t>(&(df_structure->give_beating)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_crime__T_reports_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::crime::T_reports*>(p_df_structure);

	p_table["death_id"] = reinterpret_cast<uint64_t>(&(df_structure->death_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crime_id"] = reinterpret_cast<uint64_t>(&(df_structure->crime_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_year"] = reinterpret_cast<uint64_t>(&(df_structure->event_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_time"] = reinterpret_cast<uint64_t>(&(df_structure->event_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["witness"] = reinterpret_cast<uint64_t>(&(df_structure->witness)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["accuses"] = reinterpret_cast<uint64_t>(&(df_structure->accuses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["report_year"] = reinterpret_cast<uint64_t>(&(df_structure->report_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["report_time"] = reinterpret_cast<uint64_t>(&(df_structure->report_time)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_crime__T_counterintelligence_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::crime::T_counterintelligence*>(p_df_structure);

	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["identified_hf"] = reinterpret_cast<uint64_t>(&(df_structure->identified_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["identified_2"] = reinterpret_cast<uint64_t>(&(df_structure->identified_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_crime_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::crime*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mode"] = reinterpret_cast<uint64_t>(&(df_structure->mode)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["punishment"] = reinterpret_cast<uint64_t>(&(df_structure->punishment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["criminal"] = reinterpret_cast<uint64_t>(&(df_structure->criminal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["criminal_hf"] = reinterpret_cast<uint64_t>(&(df_structure->criminal_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["criminal_hf_2"] = reinterpret_cast<uint64_t>(&(df_structure->criminal_hf_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["criminal_hf_3"] = reinterpret_cast<uint64_t>(&(df_structure->criminal_hf_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convicted"] = reinterpret_cast<uint64_t>(&(df_structure->convicted)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convicted_hf"] = reinterpret_cast<uint64_t>(&(df_structure->convicted_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convicted_hf_2"] = reinterpret_cast<uint64_t>(&(df_structure->convicted_hf_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["convicted_hf_3"] = reinterpret_cast<uint64_t>(&(df_structure->convicted_hf_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_15"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_16"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_17"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_18"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_19"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_21"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim"] = reinterpret_cast<uint64_t>(&(df_structure->victim)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_22"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_hf"] = reinterpret_cast<uint64_t>(&(df_structure->victim_hf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_hf_2"] = reinterpret_cast<uint64_t>(&(df_structure->victim_hf_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["victim_hf_3"] = reinterpret_cast<uint64_t>(&(df_structure->victim_hf_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_26"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_27"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_27)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_28"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_29"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_30"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_31"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_31)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_32"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_32)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["incident_id"] = reinterpret_cast<uint64_t>(&(df_structure->incident_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_year"] = reinterpret_cast<uint64_t>(&(df_structure->event_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["event_time"] = reinterpret_cast<uint64_t>(&(df_structure->event_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_year"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["discovered_time"] = reinterpret_cast<uint64_t>(&(df_structure->discovered_time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site"] = reinterpret_cast<uint64_t>(&(df_structure->site)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity"] = reinterpret_cast<uint64_t>(&(df_structure->entity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_id"] = reinterpret_cast<uint64_t>(&(df_structure->item_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reports"] = reinterpret_cast<uint64_t>(&(df_structure->reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["counterintelligence"] = reinterpret_cast<uint64_t>(&(df_structure->counterintelligence)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mission_report_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mission_report*>(p_df_structure);

	p_table["campaigns"] = reinterpret_cast<uint64_t>(&(df_structure->campaigns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["origin_x"] = reinterpret_cast<uint64_t>(&(df_structure->origin_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["origin_y"] = reinterpret_cast<uint64_t>(&(df_structure->origin_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_5"] = reinterpret_cast<uint64_t>(&(df_structure->unk_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_7"] = reinterpret_cast<uint64_t>(&(df_structure->unk_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_11"] = reinterpret_cast<uint64_t>(&(df_structure->unk_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_12"] = reinterpret_cast<uint64_t>(&(df_structure->unk_12)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_spoils_report_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::spoils_report*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_types"] = reinterpret_cast<uint64_t>(&(df_structure->item_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtypes"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtypes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_types"] = reinterpret_cast<uint64_t>(&(df_structure->mat_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mat_indices"] = reinterpret_cast<uint64_t>(&(df_structure->mat_indices)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_counts"] = reinterpret_cast<uint64_t>(&(df_structure->item_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_races"] = reinterpret_cast<uint64_t>(&(df_structure->creature_races)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_castes"] = reinterpret_cast<uint64_t>(&(df_structure->creature_castes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_counts"] = reinterpret_cast<uint64_t>(&(df_structure->creature_counts)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_unk_20__T_anon_7_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_unk_20::T_anon_7*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_unk_20_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_unk_20*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_unk_6c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_unk_6c*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_embark_feature_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::embark_feature*>(p_df_structure);

	p_table["world_tile"] = reinterpret_cast<uint64_t>(&(df_structure->world_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mid_level_tile"] = reinterpret_cast<uint64_t>(&(df_structure->mid_level_tile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local_feature_idx"] = reinterpret_cast<uint64_t>(&(df_structure->local_feature_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["global_feature_idx"] = reinterpret_cast<uint64_t>(&(df_structure->global_feature_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk10"] = reinterpret_cast<uint64_t>(&(df_structure->unk10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer"] = reinterpret_cast<uint64_t>(&(df_structure->layer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local"] = reinterpret_cast<uint64_t>(&(df_structure->local)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z_min"] = reinterpret_cast<uint64_t>(&(df_structure->z_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z_max"] = reinterpret_cast<uint64_t>(&(df_structure->z_max)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_unk_c0__T_anon_7_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_unk_c0::T_anon_7*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_unk_c0_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world_unk_c0*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_glowing_barrier_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::glowing_barrier*>(p_df_structure);

	p_table["triggered"] = reinterpret_cast<uint64_t>(&(df_structure->triggered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildings"] = reinterpret_cast<uint64_t>(&(df_structure->buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_deep_vein_hollow_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::deep_vein_hollow*>(p_df_structure);

	p_table["triggered"] = reinterpret_cast<uint64_t>(&(df_structure->triggered)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tiles"] = reinterpret_cast<uint64_t>(&(df_structure->tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_campfire_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::campfire*>(p_df_structure);

	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_web_cluster_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::web_cluster*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_min"] = reinterpret_cast<uint64_t>(&(df_structure->pos_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos_max"] = reinterpret_cast<uint64_t>(&(df_structure->pos_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ambushers"] = reinterpret_cast<uint64_t>(&(df_structure->ambushers)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_fire_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::fire*>(p_df_structure);

	p_table["pos"] = reinterpret_cast<uint64_t>(&(df_structure->pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["timer"] = reinterpret_cast<uint64_t>(&(df_structure->timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature"] = reinterpret_cast<uint64_t>(&(df_structure->temperature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temp_unk1"] = reinterpret_cast<uint64_t>(&(df_structure->temp_unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temp_unk2"] = reinterpret_cast<uint64_t>(&(df_structure->temp_unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temp_unk3"] = reinterpret_cast<uint64_t>(&(df_structure->temp_unk3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_handler__T_postings_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job_handler::T_postings*>(p_df_structure);

	p_table["idx"] = reinterpret_cast<uint64_t>(&(df_structure->idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["job"] = reinterpret_cast<uint64_t>(&(df_structure->job)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_handler__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job_handler::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_job_handler_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::job_handler*>(p_df_structure);

	p_table["list"] = reinterpret_cast<uint64_t>(&(df_structure->list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["postings"] = reinterpret_cast<uint64_t>(&(df_structure->postings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_building_handler_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::building_handler*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other"] = reinterpret_cast<uint64_t>(&(df_structure->other)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["check_bridge_collapse"] = reinterpret_cast<uint64_t>(&(df_structure->check_bridge_collapse)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["check_machine_collapse"] = reinterpret_cast<uint64_t>(&(df_structure->check_machine_collapse)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_machine_handler_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::machine_handler*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture__T_unk_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture::T_unk*>(p_df_structure);

	p_table["elements"] = reinterpret_cast<uint64_t>(&(df_structure->elements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["properties"] = reinterpret_cast<uint64_t>(&(df_structure->properties)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_mental_picture_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::mental_picture*>(p_df_structure);

	p_table["unk"] = reinterpret_cast<uint64_t>(&(df_structure->unk)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_belief_system_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::belief_system*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mental_pictures"] = reinterpret_cast<uint64_t>(&(df_structure->mental_pictures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deities"] = reinterpret_cast<uint64_t>(&(df_structure->deities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worship_levels"] = reinterpret_cast<uint64_t>(&(df_structure->worship_levels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_23"] = reinterpret_cast<uint64_t>(&(df_structure->anon_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_24"] = reinterpret_cast<uint64_t>(&(df_structure->anon_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_25"] = reinterpret_cast<uint64_t>(&(df_structure->anon_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_26"] = reinterpret_cast<uint64_t>(&(df_structure->anon_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_27"] = reinterpret_cast<uint64_t>(&(df_structure->anon_27)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_28"] = reinterpret_cast<uint64_t>(&(df_structure->anon_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_29"] = reinterpret_cast<uint64_t>(&(df_structure->anon_29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_30"] = reinterpret_cast<uint64_t>(&(df_structure->anon_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_31"] = reinterpret_cast<uint64_t>(&(df_structure->anon_31)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_32"] = reinterpret_cast<uint64_t>(&(df_structure->anon_32)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_33"] = reinterpret_cast<uint64_t>(&(df_structure->anon_33)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_34"] = reinterpret_cast<uint64_t>(&(df_structure->anon_34)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_35"] = reinterpret_cast<uint64_t>(&(df_structure->anon_35)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_36"] = reinterpret_cast<uint64_t>(&(df_structure->anon_36)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_37"] = reinterpret_cast<uint64_t>(&(df_structure->anon_37)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_38"] = reinterpret_cast<uint64_t>(&(df_structure->anon_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_39"] = reinterpret_cast<uint64_t>(&(df_structure->anon_39)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_40"] = reinterpret_cast<uint64_t>(&(df_structure->anon_40)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_41"] = reinterpret_cast<uint64_t>(&(df_structure->anon_41)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_42"] = reinterpret_cast<uint64_t>(&(df_structure->anon_42)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_43"] = reinterpret_cast<uint64_t>(&(df_structure->anon_43)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_44"] = reinterpret_cast<uint64_t>(&(df_structure->anon_44)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_45"] = reinterpret_cast<uint64_t>(&(df_structure->anon_45)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_46"] = reinterpret_cast<uint64_t>(&(df_structure->anon_46)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_47"] = reinterpret_cast<uint64_t>(&(df_structure->anon_47)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_48"] = reinterpret_cast<uint64_t>(&(df_structure->anon_48)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_49"] = reinterpret_cast<uint64_t>(&(df_structure->anon_49)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_50"] = reinterpret_cast<uint64_t>(&(df_structure->anon_50)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_51"] = reinterpret_cast<uint64_t>(&(df_structure->anon_51)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_52"] = reinterpret_cast<uint64_t>(&(df_structure->anon_52)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_53"] = reinterpret_cast<uint64_t>(&(df_structure->anon_53)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_54"] = reinterpret_cast<uint64_t>(&(df_structure->anon_54)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_55"] = reinterpret_cast<uint64_t>(&(df_structure->anon_55)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_56"] = reinterpret_cast<uint64_t>(&(df_structure->anon_56)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_57"] = reinterpret_cast<uint64_t>(&(df_structure->anon_57)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_58"] = reinterpret_cast<uint64_t>(&(df_structure->anon_58)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_59"] = reinterpret_cast<uint64_t>(&(df_structure->anon_59)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_60"] = reinterpret_cast<uint64_t>(&(df_structure->anon_60)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_61"] = reinterpret_cast<uint64_t>(&(df_structure->anon_61)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_62"] = reinterpret_cast<uint64_t>(&(df_structure->anon_62)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_63"] = reinterpret_cast<uint64_t>(&(df_structure->anon_63)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_64"] = reinterpret_cast<uint64_t>(&(df_structure->anon_64)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_divination_set_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::divination_set*>(p_df_structure);

	p_table["id"] = reinterpret_cast<uint64_t>(&(df_structure->id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["owner_id"] = reinterpret_cast<uint64_t>(&(df_structure->owner_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v47_4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rolls"] = reinterpret_cast<uint64_t>(&(df_structure->rolls)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_vermin_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_vermin*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["colonies"] = reinterpret_cast<uint64_t>(&(df_structure->colonies)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_entities_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_entities*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_worldgen_coord_buf_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_worldgen_coord_buf*>(p_df_structure);

	p_table["slots"] = reinterpret_cast<uint64_t>(&(df_structure->slots)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_slot"] = reinterpret_cast<uint64_t>(&(df_structure->next_slot)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_units_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_units*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active"] = reinterpret_cast<uint64_t>(&(df_structure->active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other"] = reinterpret_cast<uint64_t>(&(df_structure->other)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unknown"] = reinterpret_cast<uint64_t>(&(df_structure->unknown)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_nemesis_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_nemesis*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other"] = reinterpret_cast<uint64_t>(&(df_structure->other)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_items_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_items*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["other"] = reinterpret_cast<uint64_t>(&(df_structure->other)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad_tag"] = reinterpret_cast<uint64_t>(&(df_structure->bad_tag)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_artifacts_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_artifacts*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_flow_guides_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_flow_guides*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_stockpile__T_simple1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_stockpile::T_simple1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["food"] = reinterpret_cast<uint64_t>(&(df_structure->food)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_stockpile__T_simple2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_stockpile::T_simple2*>(p_df_structure);

	p_table["seeds"] = reinterpret_cast<uint64_t>(&(df_structure->seeds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese"] = reinterpret_cast<uint64_t>(&(df_structure->cheese)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fish"] = reinterpret_cast<uint64_t>(&(df_structure->fish)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meat"] = reinterpret_cast<uint64_t>(&(df_structure->meat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leaves"] = reinterpret_cast<uint64_t>(&(df_structure->leaves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["powder"] = reinterpret_cast<uint64_t>(&(df_structure->powder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["eggs"] = reinterpret_cast<uint64_t>(&(df_structure->eggs)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_stockpile__T_simple3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_stockpile::T_simple3*>(p_df_structure);

	p_table["glob_fat"] = reinterpret_cast<uint64_t>(&(df_structure->glob_fat)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glob_tallow"] = reinterpret_cast<uint64_t>(&(df_structure->glob_tallow)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glob_paste"] = reinterpret_cast<uint64_t>(&(df_structure->glob_paste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["glob_pressed"] = reinterpret_cast<uint64_t>(&(df_structure->glob_pressed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weapons"] = reinterpret_cast<uint64_t>(&(df_structure->weapons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shields"] = reinterpret_cast<uint64_t>(&(df_structure->shields)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ammo"] = reinterpret_cast<uint64_t>(&(df_structure->ammo)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["coins"] = reinterpret_cast<uint64_t>(&(df_structure->coins)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bar_blocks"] = reinterpret_cast<uint64_t>(&(df_structure->bar_blocks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["gems"] = reinterpret_cast<uint64_t>(&(df_structure->gems)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finished_goods"] = reinterpret_cast<uint64_t>(&(df_structure->finished_goods)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tanned_skins"] = reinterpret_cast<uint64_t>(&(df_structure->tanned_skins)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["thread_cloth"] = reinterpret_cast<uint64_t>(&(df_structure->thread_cloth)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_stockpile_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_stockpile*>(p_df_structure);

	p_table["num_jobs"] = reinterpret_cast<uint64_t>(&(df_structure->num_jobs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_haulers"] = reinterpret_cast<uint64_t>(&(df_structure->num_haulers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["simple1"] = reinterpret_cast<uint64_t>(&(df_structure->simple1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seeds"] = reinterpret_cast<uint64_t>(&(df_structure->seeds)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cheese"] = reinterpret_cast<uint64_t>(&(df_structure->cheese)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["meat_fish"] = reinterpret_cast<uint64_t>(&(df_structure->meat_fish)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["eggs"] = reinterpret_cast<uint64_t>(&(df_structure->eggs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["leaves"] = reinterpret_cast<uint64_t>(&(df_structure->leaves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plant_powder"] = reinterpret_cast<uint64_t>(&(df_structure->plant_powder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["simple2"] = reinterpret_cast<uint64_t>(&(df_structure->simple2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_plant"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_plant)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_animal"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_animal)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["liquid_builtin"] = reinterpret_cast<uint64_t>(&(df_structure->liquid_builtin)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["simple3"] = reinterpret_cast<uint64_t>(&(df_structure->simple3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_plants_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_plants*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shrub_dry"] = reinterpret_cast<uint64_t>(&(df_structure->shrub_dry)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["shrub_wet"] = reinterpret_cast<uint64_t>(&(df_structure->shrub_wet)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_dry"] = reinterpret_cast<uint64_t>(&(df_structure->tree_dry)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_wet"] = reinterpret_cast<uint64_t>(&(df_structure->tree_wet)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["empty"] = reinterpret_cast<uint64_t>(&(df_structure->empty)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_enemy_status_cache_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_enemy_status_cache*>(p_df_structure);

	p_table["slot_used"] = reinterpret_cast<uint64_t>(&(df_structure->slot_used)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rel_map"] = reinterpret_cast<uint64_t>(&(df_structure->rel_map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_slot"] = reinterpret_cast<uint64_t>(&(df_structure->next_slot)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_schedules_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_schedules*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_squads_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_squads*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_formations_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_formations*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_activities_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_activities*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_status__T_slots_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_status::T_slots*>(p_df_structure);

	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item"] = reinterpret_cast<uint64_t>(&(df_structure->item)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1b"] = reinterpret_cast<uint64_t>(&(df_structure->unk1b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1c"] = reinterpret_cast<uint64_t>(&(df_structure->unk1c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1d"] = reinterpret_cast<uint64_t>(&(df_structure->unk1d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["body_part"] = reinterpret_cast<uint64_t>(&(df_structure->body_part)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2b"] = reinterpret_cast<uint64_t>(&(df_structure->unk2b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2c"] = reinterpret_cast<uint64_t>(&(df_structure->unk2c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2d"] = reinterpret_cast<uint64_t>(&(df_structure->unk2d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["target_bp_name"] = reinterpret_cast<uint64_t>(&(df_structure->target_bp_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["verb"] = reinterpret_cast<uint64_t>(&(df_structure->verb)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["with_item_name"] = reinterpret_cast<uint64_t>(&(df_structure->with_item_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3d"] = reinterpret_cast<uint64_t>(&(df_structure->unk3d)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_status_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_status*>(p_df_structure);

	p_table["reports"] = reinterpret_cast<uint64_t>(&(df_structure->reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["announcements"] = reinterpret_cast<uint64_t>(&(df_structure->announcements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["popups"] = reinterpret_cast<uint64_t>(&(df_structure->popups)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_report_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_report_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flags"] = reinterpret_cast<uint64_t>(&(df_structure->flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mission_reports"] = reinterpret_cast<uint64_t>(&(df_structure->mission_reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["spoils_reports"] = reinterpret_cast<uint64_t>(&(df_structure->spoils_reports)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["display_timer"] = reinterpret_cast<uint64_t>(&(df_structure->display_timer)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slots"] = reinterpret_cast<uint64_t>(&(df_structure->slots)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slot_id_used"] = reinterpret_cast<uint64_t>(&(df_structure->slot_id_used)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slot_id_idx1"] = reinterpret_cast<uint64_t>(&(df_structure->slot_id_idx1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slot_id_idx2"] = reinterpret_cast<uint64_t>(&(df_structure->slot_id_idx2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["slots_used"] = reinterpret_cast<uint64_t>(&(df_structure->slots_used)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_interaction_instances_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_interaction_instances*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_written_contents_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_written_contents*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_identities_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_identities*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_incidents_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_incidents*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_crimes_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_crimes*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_vehicles_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_vehicles*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["active"] = reinterpret_cast<uint64_t>(&(df_structure->active)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_armies_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_armies*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_army_controllers_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_army_controllers*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_army_tracking_info_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_army_tracking_info*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_cultural_identities_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_cultural_identities*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_agreements_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_agreements*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_poetic_forms_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_poetic_forms*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_musical_forms_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_musical_forms*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_dance_forms_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_dance_forms*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_scales_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_scales*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_rhythms_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_rhythms*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_occupations_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_occupations*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_belief_systems_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_belief_systems*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_image_sets__T_all__T_anon_3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_image_sets::T_all::T_anon_3*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_image_sets__T_all_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_image_sets::T_all*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_image_sets_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_image_sets*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_divination_sets_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_divination_sets*>(p_df_structure);

	p_table["all"] = reinterpret_cast<uint64_t>(&(df_structure->all)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bad"] = reinterpret_cast<uint64_t>(&(df_structure->bad)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_map_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_map*>(p_df_structure);

	p_table["map_blocks"] = reinterpret_cast<uint64_t>(&(df_structure->map_blocks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_index"] = reinterpret_cast<uint64_t>(&(df_structure->block_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_block_columns"] = reinterpret_cast<uint64_t>(&(df_structure->map_block_columns)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["column_index"] = reinterpret_cast<uint64_t>(&(df_structure->column_index)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x_count_block"] = reinterpret_cast<uint64_t>(&(df_structure->x_count_block)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y_count_block"] = reinterpret_cast<uint64_t>(&(df_structure->y_count_block)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z_count_block"] = reinterpret_cast<uint64_t>(&(df_structure->z_count_block)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x_count"] = reinterpret_cast<uint64_t>(&(df_structure->x_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y_count"] = reinterpret_cast<uint64_t>(&(df_structure->y_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z_count"] = reinterpret_cast<uint64_t>(&(df_structure->z_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_x"] = reinterpret_cast<uint64_t>(&(df_structure->region_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_y"] = reinterpret_cast<uint64_t>(&(df_structure->region_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_z"] = reinterpret_cast<uint64_t>(&(df_structure->region_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["distance_lookup"] = reinterpret_cast<uint64_t>(&(df_structure->distance_lookup)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_profession_skills_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_profession_skills*>(p_df_structure);

	p_table["primary"] = reinterpret_cast<uint64_t>(&(df_structure->primary)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["secondary"] = reinterpret_cast<uint64_t>(&(df_structure->secondary)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_math__T_approx_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_math::T_approx*>(p_df_structure);

	p_table["cos"] = reinterpret_cast<uint64_t>(&(df_structure->cos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sin"] = reinterpret_cast<uint64_t>(&(df_structure->sin)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_math_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_math*>(p_df_structure);

	p_table["approx"] = reinterpret_cast<uint64_t>(&(df_structure->approx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cos"] = reinterpret_cast<uint64_t>(&(df_structure->cos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["hypot"] = reinterpret_cast<uint64_t>(&(df_structure->hypot)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_map_extras_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_map_extras*>(p_df_structure);

	p_table["rotation"] = reinterpret_cast<uint64_t>(&(df_structure->rotation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z_level_flags"] = reinterpret_cast<uint64_t>(&(df_structure->z_level_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3a"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3b"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3d"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3d)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_worldgen_status_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_worldgen_status*>(p_df_structure);

	p_table["state"] = reinterpret_cast<uint64_t>(&(df_structure->state)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["num_rejects"] = reinterpret_cast<uint64_t>(&(df_structure->num_rejects)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rejection_reason"] = reinterpret_cast<uint64_t>(&(df_structure->rejection_reason)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lakes_total"] = reinterpret_cast<uint64_t>(&(df_structure->lakes_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["lakes_cur"] = reinterpret_cast<uint64_t>(&(df_structure->lakes_cur)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["geo_layers"] = reinterpret_cast<uint64_t>(&(df_structure->geo_layers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finalized_civ_mats"] = reinterpret_cast<uint64_t>(&(df_structure->finalized_civ_mats)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finalized_art"] = reinterpret_cast<uint64_t>(&(df_structure->finalized_art)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finalized_uniforms"] = reinterpret_cast<uint64_t>(&(df_structure->finalized_uniforms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finalized_sites"] = reinterpret_cast<uint64_t>(&(df_structure->finalized_sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities"] = reinterpret_cast<uint64_t>(&(df_structure->entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites"] = reinterpret_cast<uint64_t>(&(df_structure->sites)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_x"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cursor_y"] = reinterpret_cast<uint64_t>(&(df_structure->cursor_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rivers_total"] = reinterpret_cast<uint64_t>(&(df_structure->rivers_total)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rivers_cur"] = reinterpret_cast<uint64_t>(&(df_structure->rivers_cur)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_param_set"] = reinterpret_cast<uint64_t>(&(df_structure->last_param_set)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_seed"] = reinterpret_cast<uint64_t>(&(df_structure->last_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_name_seed"] = reinterpret_cast<uint64_t>(&(df_structure->last_name_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_history_seed"] = reinterpret_cast<uint64_t>(&(df_structure->last_history_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["last_creature_seed"] = reinterpret_cast<uint64_t>(&(df_structure->last_creature_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["place_caves"] = reinterpret_cast<uint64_t>(&(df_structure->place_caves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["place_good_evil"] = reinterpret_cast<uint64_t>(&(df_structure->place_good_evil)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["place_megabeasts"] = reinterpret_cast<uint64_t>(&(df_structure->place_megabeasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["place_other_beasts"] = reinterpret_cast<uint64_t>(&(df_structure->place_other_beasts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["make_cave_pops"] = reinterpret_cast<uint64_t>(&(df_structure->make_cave_pops)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["make_cave_civs"] = reinterpret_cast<uint64_t>(&(df_structure->make_cave_civs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["place_civs"] = reinterpret_cast<uint64_t>(&(df_structure->place_civs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["finished_prehistory"] = reinterpret_cast<uint64_t>(&(df_structure->finished_prehistory)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites2"] = reinterpret_cast<uint64_t>(&(df_structure->sites2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["sites3"] = reinterpret_cast<uint64_t>(&(df_structure->sites3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_17"] = reinterpret_cast<uint64_t>(&(df_structure->anon_17)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_18"] = reinterpret_cast<uint64_t>(&(df_structure->anon_18)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_19"] = reinterpret_cast<uint64_t>(&(df_structure->anon_19)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_20"] = reinterpret_cast<uint64_t>(&(df_structure->anon_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_raws"] = reinterpret_cast<uint64_t>(&(df_structure->entity_raws)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_21"] = reinterpret_cast<uint64_t>(&(df_structure->anon_21)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civ_count"] = reinterpret_cast<uint64_t>(&(df_structure->civ_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["civs_left_to_place"] = reinterpret_cast<uint64_t>(&(df_structure->civs_left_to_place)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["regions1"] = reinterpret_cast<uint64_t>(&(df_structure->regions1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["regions2"] = reinterpret_cast<uint64_t>(&(df_structure->regions2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["regions3"] = reinterpret_cast<uint64_t>(&(df_structure->regions3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_22"] = reinterpret_cast<uint64_t>(&(df_structure->anon_22)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_23"] = reinterpret_cast<uint64_t>(&(df_structure->anon_23)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_24"] = reinterpret_cast<uint64_t>(&(df_structure->anon_24)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_25"] = reinterpret_cast<uint64_t>(&(df_structure->anon_25)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_26"] = reinterpret_cast<uint64_t>(&(df_structure->anon_26)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_27"] = reinterpret_cast<uint64_t>(&(df_structure->anon_27)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_28"] = reinterpret_cast<uint64_t>(&(df_structure->anon_28)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_29"] = reinterpret_cast<uint64_t>(&(df_structure->anon_29)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10d298"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10d298)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_10d2a4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_10d2a4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["libraries"] = reinterpret_cast<uint64_t>(&(df_structure->libraries)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_30"] = reinterpret_cast<uint64_t>(&(df_structure->anon_30)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temples"] = reinterpret_cast<uint64_t>(&(df_structure->temples)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["some_artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->some_artifacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_31"] = reinterpret_cast<uint64_t>(&(df_structure->anon_31)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_32"] = reinterpret_cast<uint64_t>(&(df_structure->anon_32)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_area_grasses__T_layer_grasses_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_area_grasses::T_layer_grasses*>(p_df_structure);

	p_table["ref"] = reinterpret_cast<uint64_t>(&(df_structure->ref)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["grasses"] = reinterpret_cast<uint64_t>(&(df_structure->grasses)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_area_grasses_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_area_grasses*>(p_df_structure);

	p_table["world_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->world_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["layer_grasses"] = reinterpret_cast<uint64_t>(&(df_structure->layer_grasses)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_flow_engine_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_flow_engine*>(p_df_structure);

	p_table["rnd_16"] = reinterpret_cast<uint64_t>(&(df_structure->rnd_16)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rnd_256"] = reinterpret_cast<uint64_t>(&(df_structure->rnd_256)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rnd_pos"] = reinterpret_cast<uint64_t>(&(df_structure->rnd_pos)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rnd_x"] = reinterpret_cast<uint64_t>(&(df_structure->rnd_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rnd_y"] = reinterpret_cast<uint64_t>(&(df_structure->rnd_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["block_idx"] = reinterpret_cast<uint64_t>(&(df_structure->block_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7a"] = reinterpret_cast<uint64_t>(&(df_structure->unk7a)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7b"] = reinterpret_cast<uint64_t>(&(df_structure->unk7b)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7c"] = reinterpret_cast<uint64_t>(&(df_structure->unk7c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk7_cntdn"] = reinterpret_cast<uint64_t>(&(df_structure->unk7_cntdn)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_worldgen__T_worldgen_parms_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_worldgen::T_worldgen_parms*>(p_df_structure);

	p_table["title"] = reinterpret_cast<uint64_t>(&(df_structure->title)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["seed"] = reinterpret_cast<uint64_t>(&(df_structure->seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["history_seed"] = reinterpret_cast<uint64_t>(&(df_structure->history_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["name_seed"] = reinterpret_cast<uint64_t>(&(df_structure->name_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_seed"] = reinterpret_cast<uint64_t>(&(df_structure->creature_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dim_x"] = reinterpret_cast<uint64_t>(&(df_structure->dim_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dim_y"] = reinterpret_cast<uint64_t>(&(df_structure->dim_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["custom_name"] = reinterpret_cast<uint64_t>(&(df_structure->custom_name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_seed"] = reinterpret_cast<uint64_t>(&(df_structure->has_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_history_seed"] = reinterpret_cast<uint64_t>(&(df_structure->has_history_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_name_seed"] = reinterpret_cast<uint64_t>(&(df_structure->has_name_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["has_creature_seed"] = reinterpret_cast<uint64_t>(&(df_structure->has_creature_seed)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_points"] = reinterpret_cast<uint64_t>(&(df_structure->embark_points)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["peak_number_min"] = reinterpret_cast<uint64_t>(&(df_structure->peak_number_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["partial_ocean_edge_min"] = reinterpret_cast<uint64_t>(&(df_structure->partial_ocean_edge_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["complete_ocean_edge_min"] = reinterpret_cast<uint64_t>(&(df_structure->complete_ocean_edge_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volcano_min"] = reinterpret_cast<uint64_t>(&(df_structure->volcano_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["region_counts"] = reinterpret_cast<uint64_t>(&(df_structure->region_counts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["river_mins"] = reinterpret_cast<uint64_t>(&(df_structure->river_mins)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["subregion_max"] = reinterpret_cast<uint64_t>(&(df_structure->subregion_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cavern_layer_count"] = reinterpret_cast<uint64_t>(&(df_structure->cavern_layer_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cavern_layer_openness_min"] = reinterpret_cast<uint64_t>(&(df_structure->cavern_layer_openness_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cavern_layer_openness_max"] = reinterpret_cast<uint64_t>(&(df_structure->cavern_layer_openness_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cavern_layer_passage_density_min"] = reinterpret_cast<uint64_t>(&(df_structure->cavern_layer_passage_density_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cavern_layer_passage_density_max"] = reinterpret_cast<uint64_t>(&(df_structure->cavern_layer_passage_density_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cavern_layer_water_min"] = reinterpret_cast<uint64_t>(&(df_structure->cavern_layer_water_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cavern_layer_water_max"] = reinterpret_cast<uint64_t>(&(df_structure->cavern_layer_water_max)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["have_bottom_layer_1"] = reinterpret_cast<uint64_t>(&(df_structure->have_bottom_layer_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["have_bottom_layer_2"] = reinterpret_cast<uint64_t>(&(df_structure->have_bottom_layer_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["levels_above_ground"] = reinterpret_cast<uint64_t>(&(df_structure->levels_above_ground)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["levels_above_layer_1"] = reinterpret_cast<uint64_t>(&(df_structure->levels_above_layer_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["levels_above_layer_2"] = reinterpret_cast<uint64_t>(&(df_structure->levels_above_layer_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["levels_above_layer_3"] = reinterpret_cast<uint64_t>(&(df_structure->levels_above_layer_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["levels_above_layer_4"] = reinterpret_cast<uint64_t>(&(df_structure->levels_above_layer_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["levels_above_layer_5"] = reinterpret_cast<uint64_t>(&(df_structure->levels_above_layer_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["levels_at_bottom"] = reinterpret_cast<uint64_t>(&(df_structure->levels_at_bottom)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cave_min_size"] = reinterpret_cast<uint64_t>(&(df_structure->cave_min_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cave_max_size"] = reinterpret_cast<uint64_t>(&(df_structure->cave_max_size)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mountain_cave_min"] = reinterpret_cast<uint64_t>(&(df_structure->mountain_cave_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["non_mountain_cave_min"] = reinterpret_cast<uint64_t>(&(df_structure->non_mountain_cave_min)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_civ_number"] = reinterpret_cast<uint64_t>(&(df_structure->total_civ_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rain_ranges_1"] = reinterpret_cast<uint64_t>(&(df_structure->rain_ranges_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rain_ranges_0"] = reinterpret_cast<uint64_t>(&(df_structure->rain_ranges_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rain_ranges_2"] = reinterpret_cast<uint64_t>(&(df_structure->rain_ranges_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drainage_ranges_1"] = reinterpret_cast<uint64_t>(&(df_structure->drainage_ranges_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drainage_ranges_0"] = reinterpret_cast<uint64_t>(&(df_structure->drainage_ranges_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drainage_ranges_2"] = reinterpret_cast<uint64_t>(&(df_structure->drainage_ranges_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["savagery_ranges_1"] = reinterpret_cast<uint64_t>(&(df_structure->savagery_ranges_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["savagery_ranges_0"] = reinterpret_cast<uint64_t>(&(df_structure->savagery_ranges_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["savagery_ranges_2"] = reinterpret_cast<uint64_t>(&(df_structure->savagery_ranges_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volcanism_ranges_1"] = reinterpret_cast<uint64_t>(&(df_structure->volcanism_ranges_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volcanism_ranges_0"] = reinterpret_cast<uint64_t>(&(df_structure->volcanism_ranges_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volcanism_ranges_2"] = reinterpret_cast<uint64_t>(&(df_structure->volcanism_ranges_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ranges"] = reinterpret_cast<uint64_t>(&(df_structure->ranges)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["beast_end_year"] = reinterpret_cast<uint64_t>(&(df_structure->beast_end_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_year"] = reinterpret_cast<uint64_t>(&(df_structure->end_year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["beast_end_year_percent"] = reinterpret_cast<uint64_t>(&(df_structure->beast_end_year_percent)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["total_civ_population"] = reinterpret_cast<uint64_t>(&(df_structure->total_civ_population)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["site_cap"] = reinterpret_cast<uint64_t>(&(df_structure->site_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation_ranges_1"] = reinterpret_cast<uint64_t>(&(df_structure->elevation_ranges_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation_ranges_0"] = reinterpret_cast<uint64_t>(&(df_structure->elevation_ranges_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation_ranges_2"] = reinterpret_cast<uint64_t>(&(df_structure->elevation_ranges_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mineral_scarcity"] = reinterpret_cast<uint64_t>(&(df_structure->mineral_scarcity)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["megabeast_cap"] = reinterpret_cast<uint64_t>(&(df_structure->megabeast_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["semimegabeast_cap"] = reinterpret_cast<uint64_t>(&(df_structure->semimegabeast_cap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["titan_number"] = reinterpret_cast<uint64_t>(&(df_structure->titan_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["titan_attack_trigger"] = reinterpret_cast<uint64_t>(&(df_structure->titan_attack_trigger)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["demon_number"] = reinterpret_cast<uint64_t>(&(df_structure->demon_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["night_troll_number"] = reinterpret_cast<uint64_t>(&(df_structure->night_troll_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["bogeyman_number"] = reinterpret_cast<uint64_t>(&(df_structure->bogeyman_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nightmare_number"] = reinterpret_cast<uint64_t>(&(df_structure->nightmare_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vampire_number"] = reinterpret_cast<uint64_t>(&(df_structure->vampire_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["werebeast_number"] = reinterpret_cast<uint64_t>(&(df_structure->werebeast_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["werebeast_attack_trigger"] = reinterpret_cast<uint64_t>(&(df_structure->werebeast_attack_trigger)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["secret_number"] = reinterpret_cast<uint64_t>(&(df_structure->secret_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["regional_interaction_number"] = reinterpret_cast<uint64_t>(&(df_structure->regional_interaction_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["disturbance_interaction_number"] = reinterpret_cast<uint64_t>(&(df_structure->disturbance_interaction_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["evil_cloud_number"] = reinterpret_cast<uint64_t>(&(df_structure->evil_cloud_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["evil_rain_number"] = reinterpret_cast<uint64_t>(&(df_structure->evil_rain_number)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["generate_divine_materials"] = reinterpret_cast<uint64_t>(&(df_structure->generate_divine_materials)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allow_divination"] = reinterpret_cast<uint64_t>(&(df_structure->allow_divination)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allow_demonic_experiments"] = reinterpret_cast<uint64_t>(&(df_structure->allow_demonic_experiments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allow_necromancer_experiments"] = reinterpret_cast<uint64_t>(&(df_structure->allow_necromancer_experiments)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allow_necromancer_lieutenants"] = reinterpret_cast<uint64_t>(&(df_structure->allow_necromancer_lieutenants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allow_necromancer_ghouls"] = reinterpret_cast<uint64_t>(&(df_structure->allow_necromancer_ghouls)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["allow_necromancer_summons"] = reinterpret_cast<uint64_t>(&(df_structure->allow_necromancer_summons)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["good_sq_counts_0"] = reinterpret_cast<uint64_t>(&(df_structure->good_sq_counts_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["evil_sq_counts_0"] = reinterpret_cast<uint64_t>(&(df_structure->evil_sq_counts_0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["good_sq_counts_1"] = reinterpret_cast<uint64_t>(&(df_structure->good_sq_counts_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["evil_sq_counts_1"] = reinterpret_cast<uint64_t>(&(df_structure->evil_sq_counts_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["good_sq_counts_2"] = reinterpret_cast<uint64_t>(&(df_structure->good_sq_counts_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["evil_sq_counts_2"] = reinterpret_cast<uint64_t>(&(df_structure->evil_sq_counts_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["elevation_frequency"] = reinterpret_cast<uint64_t>(&(df_structure->elevation_frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rain_frequency"] = reinterpret_cast<uint64_t>(&(df_structure->rain_frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["drainage_frequency"] = reinterpret_cast<uint64_t>(&(df_structure->drainage_frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["savagery_frequency"] = reinterpret_cast<uint64_t>(&(df_structure->savagery_frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature_frequency"] = reinterpret_cast<uint64_t>(&(df_structure->temperature_frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["volcanism_frequency"] = reinterpret_cast<uint64_t>(&(df_structure->volcanism_frequency)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ps"] = reinterpret_cast<uint64_t>(&(df_structure->ps)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reveal_all_history"] = reinterpret_cast<uint64_t>(&(df_structure->reveal_all_history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cull_historical_figures"] = reinterpret_cast<uint64_t>(&(df_structure->cull_historical_figures)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["erosion_cycle_count"] = reinterpret_cast<uint64_t>(&(df_structure->erosion_cycle_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["periodically_erode_extremes"] = reinterpret_cast<uint64_t>(&(df_structure->periodically_erode_extremes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orographic_precipitation"] = reinterpret_cast<uint64_t>(&(df_structure->orographic_precipitation)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["playable_civilization_required"] = reinterpret_cast<uint64_t>(&(df_structure->playable_civilization_required)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["all_caves_visible"] = reinterpret_cast<uint64_t>(&(df_structure->all_caves_visible)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["show_embark_tunnel"] = reinterpret_cast<uint64_t>(&(df_structure->show_embark_tunnel)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pole"] = reinterpret_cast<uint64_t>(&(df_structure->pole)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_worldgen_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_worldgen*>(p_df_structure);

	p_table["version"] = reinterpret_cast<uint64_t>(&(df_structure->version)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_unit_chunk_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_unit_chunk_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_unit_chunk_offset"] = reinterpret_cast<uint64_t>(&(df_structure->next_unit_chunk_offset)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_art_image_chunk_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_art_image_chunk_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_art_image_chunk_offset"] = reinterpret_cast<uint64_t>(&(df_structure->next_art_image_chunk_offset)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worldgen_parms"] = reinterpret_cast<uint64_t>(&(df_structure->worldgen_parms)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_v40_6_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_v40_6*>(p_df_structure);

	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk2"] = reinterpret_cast<uint64_t>(&(df_structure->unk2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk3"] = reinterpret_cast<uint64_t>(&(df_structure->unk3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk4"] = reinterpret_cast<uint64_t>(&(df_structure->unk4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk5"] = reinterpret_cast<uint64_t>(&(df_structure->unk5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk6"] = reinterpret_cast<uint64_t>(&(df_structure->unk6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_131ec0_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_131ec0*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_16"] = reinterpret_cast<uint64_t>(&(df_structure->anon_16)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_languages_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_languages*>(p_df_structure);

	p_table["name"] = reinterpret_cast<uint64_t>(&(df_structure->name)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_131ef0__T_claims_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_131ef0::T_claims*>(p_df_structure);

	p_table["artifact"] = reinterpret_cast<uint64_t>(&(df_structure->artifact)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year"] = reinterpret_cast<uint64_t>(&(df_structure->year)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["year_tick"] = reinterpret_cast<uint64_t>(&(df_structure->year_tick)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_131ef0_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_131ef0*>(p_df_structure);

	p_table["hfid"] = reinterpret_cast<uint64_t>(&(df_structure->hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["claims"] = reinterpret_cast<uint64_t>(&(df_structure->claims)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_hfid"] = reinterpret_cast<uint64_t>(&(df_structure->unk_hfid)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_pathfinder__T_boundary_heap_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_pathfinder::T_boundary_heap*>(p_df_structure);

	p_table["total_cost"] = reinterpret_cast<uint64_t>(&(df_structure->total_cost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["local_cost"] = reinterpret_cast<uint64_t>(&(df_structure->local_cost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_pathfinder_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_pathfinder*>(p_df_structure);

	p_table["boundary_heap"] = reinterpret_cast<uint64_t>(&(df_structure->boundary_heap)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["heap_count"] = reinterpret_cast<uint64_t>(&(df_structure->heap_count)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos1"] = reinterpret_cast<uint64_t>(&(df_structure->pos1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pos2"] = reinterpret_cast<uint64_t>(&(df_structure->pos2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dist_x"] = reinterpret_cast<uint64_t>(&(df_structure->dist_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dist_y"] = reinterpret_cast<uint64_t>(&(df_structure->dist_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dist_z"] = reinterpret_cast<uint64_t>(&(df_structure->dist_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_path_cost"] = reinterpret_cast<uint64_t>(&(df_structure->next_path_cost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wipe_path_cost"] = reinterpret_cast<uint64_t>(&(df_structure->wipe_path_cost)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_path_tag"] = reinterpret_cast<uint64_t>(&(df_structure->next_path_tag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["wipe_path_tag"] = reinterpret_cast<uint64_t>(&(df_structure->wipe_path_tag)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["next_walkable_id"] = reinterpret_cast<uint64_t>(&(df_structure->next_walkable_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plant_update_step"] = reinterpret_cast<uint64_t>(&(df_structure->plant_update_step)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_cur_savegame_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_cur_savegame*>(p_df_structure);

	p_table["save_dir"] = reinterpret_cast<uint64_t>(&(df_structure->save_dir)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_0s"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_0s)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_1s"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_1s)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_2s"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_2s)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_features_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_features*>(p_df_structure);

	p_table["unk_v47_1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v47_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_features"] = reinterpret_cast<uint64_t>(&(df_structure->map_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_x"] = reinterpret_cast<uint64_t>(&(df_structure->feature_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_y"] = reinterpret_cast<uint64_t>(&(df_structure->feature_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_local_idx"] = reinterpret_cast<uint64_t>(&(df_structure->feature_local_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["feature_global_idx"] = reinterpret_cast<uint64_t>(&(df_structure->feature_global_idx)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_12"] = reinterpret_cast<uint64_t>(&(df_structure->anon_12)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_13"] = reinterpret_cast<uint64_t>(&(df_structure->anon_13)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_14"] = reinterpret_cast<uint64_t>(&(df_structure->anon_14)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_15"] = reinterpret_cast<uint64_t>(&(df_structure->anon_15)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_arena_spawn__T_item_types_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_arena_spawn::T_item_types*>(p_df_structure);

	p_table["item_type"] = reinterpret_cast<uint64_t>(&(df_structure->item_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtype"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mattype"] = reinterpret_cast<uint64_t>(&(df_structure->mattype)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["matindex"] = reinterpret_cast<uint64_t>(&(df_structure->matindex)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_arena_spawn__T_equipment_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_arena_spawn::T_equipment*>(p_df_structure);

	p_table["skills"] = reinterpret_cast<uint64_t>(&(df_structure->skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["skill_levels"] = reinterpret_cast<uint64_t>(&(df_structure->skill_levels)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_types"] = reinterpret_cast<uint64_t>(&(df_structure->item_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_subtypes"] = reinterpret_cast<uint64_t>(&(df_structure->item_subtypes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_materials"] = reinterpret_cast<uint64_t>(&(df_structure->item_materials)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_counts"] = reinterpret_cast<uint64_t>(&(df_structure->item_counts)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_arena_spawn_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_arena_spawn*>(p_df_structure);

	p_table["race"] = reinterpret_cast<uint64_t>(&(df_structure->race)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["caste"] = reinterpret_cast<uint64_t>(&(df_structure->caste)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["type"] = reinterpret_cast<uint64_t>(&(df_structure->type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["filter"] = reinterpret_cast<uint64_t>(&(df_structure->filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["item_types"] = reinterpret_cast<uint64_t>(&(df_structure->item_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_vec1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_vec1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_vec2"] = reinterpret_cast<uint64_t>(&(df_structure->unk_vec2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_vec3"] = reinterpret_cast<uint64_t>(&(df_structure->unk_vec3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["equipment"] = reinterpret_cast<uint64_t>(&(df_structure->equipment)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["side"] = reinterpret_cast<uint64_t>(&(df_structure->side)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction"] = reinterpret_cast<uint64_t>(&(df_structure->interaction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tame"] = reinterpret_cast<uint64_t>(&(df_structure->tame)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interactions"] = reinterpret_cast<uint64_t>(&(df_structure->interactions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["creature_cnt"] = reinterpret_cast<uint64_t>(&(df_structure->creature_cnt)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_int1"] = reinterpret_cast<uint64_t>(&(df_structure->unk_int1)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_arena_settings_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_arena_settings*>(p_df_structure);

	p_table["conflict_level"] = reinterpret_cast<uint64_t>(&(df_structure->conflict_level)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["morale_enable"] = reinterpret_cast<uint64_t>(&(df_structure->morale_enable)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk1"] = reinterpret_cast<uint64_t>(&(df_structure->unk1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["temperature"] = reinterpret_cast<uint64_t>(&(df_structure->temperature)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["time"] = reinterpret_cast<uint64_t>(&(df_structure->time)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weather_column"] = reinterpret_cast<uint64_t>(&(df_structure->weather_column)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["weather_row"] = reinterpret_cast<uint64_t>(&(df_structure->weather_row)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_types"] = reinterpret_cast<uint64_t>(&(df_structure->tree_types)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_cursor"] = reinterpret_cast<uint64_t>(&(df_structure->tree_cursor)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_age"] = reinterpret_cast<uint64_t>(&(df_structure->tree_age)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_filter"] = reinterpret_cast<uint64_t>(&(df_structure->tree_filter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["tree_age_str"] = reinterpret_cast<uint64_t>(&(df_structure->tree_age_str)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_26c678_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_26c678*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_38"] = reinterpret_cast<uint64_t>(&(df_structure->unk_38)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_7"] = reinterpret_cast<uint64_t>(&(df_structure->anon_7)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_8"] = reinterpret_cast<uint64_t>(&(df_structure->anon_8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_9"] = reinterpret_cast<uint64_t>(&(df_structure->anon_9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_10"] = reinterpret_cast<uint64_t>(&(df_structure->anon_10)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_11"] = reinterpret_cast<uint64_t>(&(df_structure->anon_11)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_19325c__T_anon_1_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_19325c::T_anon_1*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_19325c__T_anon_2_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_19325c::T_anon_2*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_19325c__T_anon_3_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_19325c::T_anon_3*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world__T_unk_19325c_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world::T_unk_19325c*>(p_df_structure);

	p_table["anon_1"] = reinterpret_cast<uint64_t>(&(df_structure->anon_1)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_2"] = reinterpret_cast<uint64_t>(&(df_structure->anon_2)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_3"] = reinterpret_cast<uint64_t>(&(df_structure->anon_3)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_4"] = reinterpret_cast<uint64_t>(&(df_structure->anon_4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_5"] = reinterpret_cast<uint64_t>(&(df_structure->anon_5)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["anon_6"] = reinterpret_cast<uint64_t>(&(df_structure->anon_6)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_world_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::world*>(p_df_structure);

	p_table["glowing_barriers"] = reinterpret_cast<uint64_t>(&(df_structure->glowing_barriers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["deep_vein_hollows"] = reinterpret_cast<uint64_t>(&(df_structure->deep_vein_hollows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_20"] = reinterpret_cast<uint64_t>(&(df_structure->unk_20)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["engravings"] = reinterpret_cast<uint64_t>(&(df_structure->engravings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vermin"] = reinterpret_cast<uint64_t>(&(df_structure->vermin)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flow_tiles"] = reinterpret_cast<uint64_t>(&(df_structure->flow_tiles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["campfires"] = reinterpret_cast<uint64_t>(&(df_structure->campfires)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["web_clusters"] = reinterpret_cast<uint64_t>(&(df_structure->web_clusters)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["fires"] = reinterpret_cast<uint64_t>(&(df_structure->fires)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_6C"] = reinterpret_cast<uint64_t>(&(df_structure->unk_6C)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["ocean_waves"] = reinterpret_cast<uint64_t>(&(df_structure->ocean_waves)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["constructions"] = reinterpret_cast<uint64_t>(&(df_structure->constructions)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["murky_pools"] = reinterpret_cast<uint64_t>(&(df_structure->murky_pools)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["embark_features"] = reinterpret_cast<uint64_t>(&(df_structure->embark_features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_A8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_A8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_B4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_B4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_C0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_C0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_CC"] = reinterpret_cast<uint64_t>(&(df_structure->unk_CC)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_D8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_D8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_E4"] = reinterpret_cast<uint64_t>(&(df_structure->unk_E4)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_F0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_F0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_FC"] = reinterpret_cast<uint64_t>(&(df_structure->unk_FC)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["effects"] = reinterpret_cast<uint64_t>(&(df_structure->effects)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["coin_batches"] = reinterpret_cast<uint64_t>(&(df_structure->coin_batches)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["populations"] = reinterpret_cast<uint64_t>(&(df_structure->populations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["manager_orders"] = reinterpret_cast<uint64_t>(&(df_structure->manager_orders)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["manager_order_next_id"] = reinterpret_cast<uint64_t>(&(df_structure->manager_order_next_id)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["mandates"] = reinterpret_cast<uint64_t>(&(df_structure->mandates)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entities"] = reinterpret_cast<uint64_t>(&(df_structure->entities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worldgen_coord_buf"] = reinterpret_cast<uint64_t>(&(df_structure->worldgen_coord_buf)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["units"] = reinterpret_cast<uint64_t>(&(df_structure->units)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unit_chunks"] = reinterpret_cast<uint64_t>(&(df_structure->unit_chunks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["art_image_chunks"] = reinterpret_cast<uint64_t>(&(df_structure->art_image_chunks)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["nemesis"] = reinterpret_cast<uint64_t>(&(df_structure->nemesis)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["items"] = reinterpret_cast<uint64_t>(&(df_structure->items)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["artifacts"] = reinterpret_cast<uint64_t>(&(df_structure->artifacts)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["jobs"] = reinterpret_cast<uint64_t>(&(df_structure->jobs)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["proj_list"] = reinterpret_cast<uint64_t>(&(df_structure->proj_list)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["buildings"] = reinterpret_cast<uint64_t>(&(df_structure->buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["machines"] = reinterpret_cast<uint64_t>(&(df_structure->machines)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flow_guides"] = reinterpret_cast<uint64_t>(&(df_structure->flow_guides)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["stockpile"] = reinterpret_cast<uint64_t>(&(df_structure->stockpile)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["plants"] = reinterpret_cast<uint64_t>(&(df_structure->plants)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["enemy_status_cache"] = reinterpret_cast<uint64_t>(&(df_structure->enemy_status_cache)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["schedules"] = reinterpret_cast<uint64_t>(&(df_structure->schedules)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["squads"] = reinterpret_cast<uint64_t>(&(df_structure->squads)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["formations"] = reinterpret_cast<uint64_t>(&(df_structure->formations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["activities"] = reinterpret_cast<uint64_t>(&(df_structure->activities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["status"] = reinterpret_cast<uint64_t>(&(df_structure->status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["interaction_instances"] = reinterpret_cast<uint64_t>(&(df_structure->interaction_instances)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["written_contents"] = reinterpret_cast<uint64_t>(&(df_structure->written_contents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["identities"] = reinterpret_cast<uint64_t>(&(df_structure->identities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["incidents"] = reinterpret_cast<uint64_t>(&(df_structure->incidents)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["crimes"] = reinterpret_cast<uint64_t>(&(df_structure->crimes)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["vehicles"] = reinterpret_cast<uint64_t>(&(df_structure->vehicles)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["armies"] = reinterpret_cast<uint64_t>(&(df_structure->armies)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_controllers"] = reinterpret_cast<uint64_t>(&(df_structure->army_controllers)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["army_tracking_info"] = reinterpret_cast<uint64_t>(&(df_structure->army_tracking_info)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cultural_identities"] = reinterpret_cast<uint64_t>(&(df_structure->cultural_identities)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["agreements"] = reinterpret_cast<uint64_t>(&(df_structure->agreements)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["poetic_forms"] = reinterpret_cast<uint64_t>(&(df_structure->poetic_forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["musical_forms"] = reinterpret_cast<uint64_t>(&(df_structure->musical_forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["dance_forms"] = reinterpret_cast<uint64_t>(&(df_structure->dance_forms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["scales"] = reinterpret_cast<uint64_t>(&(df_structure->scales)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["rhythms"] = reinterpret_cast<uint64_t>(&(df_structure->rhythms)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["occupations"] = reinterpret_cast<uint64_t>(&(df_structure->occupations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["belief_systems"] = reinterpret_cast<uint64_t>(&(df_structure->belief_systems)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["image_sets"] = reinterpret_cast<uint64_t>(&(df_structure->image_sets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["divination_sets"] = reinterpret_cast<uint64_t>(&(df_structure->divination_sets)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_building"] = reinterpret_cast<uint64_t>(&(df_structure->selected_building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_stockpile_type"] = reinterpret_cast<uint64_t>(&(df_structure->selected_stockpile_type)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["update_selected_building"] = reinterpret_cast<uint64_t>(&(df_structure->update_selected_building)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_width"] = reinterpret_cast<uint64_t>(&(df_structure->building_width)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["building_height"] = reinterpret_cast<uint64_t>(&(df_structure->building_height)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["selected_direction"] = reinterpret_cast<uint64_t>(&(df_structure->selected_direction)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map"] = reinterpret_cast<uint64_t>(&(df_structure->map)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["profession_skills"] = reinterpret_cast<uint64_t>(&(df_structure->profession_skills)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["math"] = reinterpret_cast<uint64_t>(&(df_structure->math)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["map_extras"] = reinterpret_cast<uint64_t>(&(df_structure->map_extras)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["world_data"] = reinterpret_cast<uint64_t>(&(df_structure->world_data)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worldgen_status"] = reinterpret_cast<uint64_t>(&(df_structure->worldgen_status)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orphaned_flow_pool"] = reinterpret_cast<uint64_t>(&(df_structure->orphaned_flow_pool)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["raws"] = reinterpret_cast<uint64_t>(&(df_structure->raws)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["area_grasses"] = reinterpret_cast<uint64_t>(&(df_structure->area_grasses)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["flow_engine"] = reinterpret_cast<uint64_t>(&(df_structure->flow_engine)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["busy_buildings"] = reinterpret_cast<uint64_t>(&(df_structure->busy_buildings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cavein_flags"] = reinterpret_cast<uint64_t>(&(df_structure->cavein_flags)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["original_save_version"] = reinterpret_cast<uint64_t>(&(df_structure->original_save_version)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["worldgen"] = reinterpret_cast<uint64_t>(&(df_structure->worldgen)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["history"] = reinterpret_cast<uint64_t>(&(df_structure->history)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["entity_populations"] = reinterpret_cast<uint64_t>(&(df_structure->entity_populations)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_6"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_6)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_131ec0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_131ec0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["languages"] = reinterpret_cast<uint64_t>(&(df_structure->languages)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_131ef0"] = reinterpret_cast<uint64_t>(&(df_structure->unk_131ef0)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_131f08"] = reinterpret_cast<uint64_t>(&(df_structure->unk_131f08)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["reindex_pathfinding"] = reinterpret_cast<uint64_t>(&(df_structure->reindex_pathfinding)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["frame_counter"] = reinterpret_cast<uint64_t>(&(df_structure->frame_counter)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["orphaned_flows"] = reinterpret_cast<uint64_t>(&(df_structure->orphaned_flows)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["pathfinder"] = reinterpret_cast<uint64_t>(&(df_structure->pathfinder)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["save_version"] = reinterpret_cast<uint64_t>(&(df_structure->save_version)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["cur_savegame"] = reinterpret_cast<uint64_t>(&(df_structure->cur_savegame)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_3s"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_3s)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_4s"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_4s)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_5s"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_5s)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_6s"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_6s)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_v40_7s"] = reinterpret_cast<uint64_t>(&(df_structure->unk_v40_7s)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["features"] = reinterpret_cast<uint64_t>(&(df_structure->features)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26a9a8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26a9a8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26a9a9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26a9a9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26a9aa"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26a9aa)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["arena_spawn"] = reinterpret_cast<uint64_t>(&(df_structure->arena_spawn)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["arena_settings"] = reinterpret_cast<uint64_t>(&(df_structure->arena_settings)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26b5b8"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26b5b8)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26b5b9"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26b5b9)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26c678"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26c678)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_19325c"] = reinterpret_cast<uint64_t>(&(df_structure->unk_19325c)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["unk_26b618"] = reinterpret_cast<uint64_t>(&(df_structure->unk_26b618)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_T_cursor_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::global::T_cursor*>(p_df_structure);

	p_table["x"] = reinterpret_cast<uint64_t>(&(df_structure->x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["y"] = reinterpret_cast<uint64_t>(&(df_structure->y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["z"] = reinterpret_cast<uint64_t>(&(df_structure->z)) - reinterpret_cast<uint64_t>(df_structure);
}

void generate_T_selection_rect_offsets(void* p_df_structure, std::unordered_map<std::string, std::size_t>& p_table)
{
	auto df_structure = static_cast<df::global::T_selection_rect*>(p_df_structure);

	p_table["start_x"] = reinterpret_cast<uint64_t>(&(df_structure->start_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_y"] = reinterpret_cast<uint64_t>(&(df_structure->start_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["start_z"] = reinterpret_cast<uint64_t>(&(df_structure->start_z)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_x"] = reinterpret_cast<uint64_t>(&(df_structure->end_x)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_y"] = reinterpret_cast<uint64_t>(&(df_structure->end_y)) - reinterpret_cast<uint64_t>(df_structure);
	p_table["end_z"] = reinterpret_cast<uint64_t>(&(df_structure->end_z)) - reinterpret_cast<uint64_t>(df_structure);
}

}

